
# Things To Do

## High-level

1. Get a basic, working implementation of an offline game.
1. Write the stylesheets + consider SASS.
1. Record music + find out how to play tracks together.
1. Get working bundles for networked games.

## Concrete TODO's

### High Priority

1. Change Game.allHumanPlayers and Game.allArtificialPlayers to a record from operator-classes to a list of players.
   - The definition of Player.Id must change:
     - operator-class,
     - operator-class-specific unique id.
   - Player.CtorArgs related changes:
     - Game no longer needs to assign player ids.
       - `operatorClass` field is now implied by dict key.
       - `idnumber` field is not implied by array index.
   - Talk about how type-aliasing a primitive made refactoring a type that was all over my project relatively easy to do.
1. Make grid's tile getters have a method-object nesting: `this.getTile.At`, `this.getTile.[unoccupied|occupied].[destsFrom|SourcesTo]`.
   - Update documentation on what the range of a bubble is and how range-extension works (both look at destFrom).
   - Update wording in lang readme to reflect new (and improved) method names.
1. Make Grid abstract static method to take grid's player descs and produce similar dict containing randomized spawn points.
1. Split `Game` definition into multiple files.
   - Rationale: the file is getting big and annoying to scroll through.
   - Specifically, move event processing / executing method pairs to their own files.
   - Make sure that they still have regular access to private fields, etc.
   - Look into using triple-slash directives or module augmentation (see TypeScript docs for both topics)

### Low Priority

- Make the main readme file less verbose.
- Make eslintrc's for impl/ folders saying that they can't import from the impl/ folder they are in.
  - Check if it can detect relative imports. If not, don't do this

---

## Important Ideas to Develop

- Make all settings available to all clients, and leave it to GameSession / Game Manager to decide how to respond
  - (ie, execute privileged-only change if requester is privileged client,
  - And broadcast how the request was handled:
    - "lang change made by _username_ will take effect in the next game"
    - Or "_username_ requested a game-pause" or "_username_ paused the game")
- Make sound settings stubs for playing music and sound effects.
  - make BGM have a track that varies with lang and different selectable style variations such as jazz cafe/elevator music, fast 13/8.
  - Make movement sound effects able to depend on translated key input like morse sounds.

## Fun Ideas to Explore

- Set a random tile to be marked as occupied by a player. does this mean they can be attacked through that tile without their player pointing to that tile?
- Make each tile have a list field of "jump-tiles": tiles that cannot be produced by the normal means of using the grid to get adjacent tiles, and that are merged into the pre-occupancy-filter of getUNTs to allow weird jumping / portal-like movement. Would this have to be limited to artificial players because of the rules on langChar shuffle-ins?

## Links I Saved for Later

```text
https://javascript.info/modules-dynamic-imports
https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node
https://medium.com/@iamstan/typescript-es-modules-micheal-jackson-2040216be793


https://nodejs.org/api/esm.html#esm_enabling
https://docs.npmjs.com/files/package.json
https://www.typescriptlang.org/docs/handbook/modules.html
https://www.typescriptlang.org/docs/handbook/module-resolution.html

https://devdocs.io/jsdoc/howto-es2015-classes

https://devdocs.io/dom/audiobuffersourcenode/loop#Example

https://devdocs.io/css/clip-path

https://expressjs.com/en/api.html#app.set
https://stackoverflow.com/a/38129612/11107541

https://stackoverflow.com/a/45802847/11107541
https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties
https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders
https://developer.mozilla.org/en-US/docs/Web/CSS/display

https://martinfowler.com/eaaDev/EventSourcing.html
https://stackoverflow.com/a/9283222/11107541

https://www.mikedoesweb.com/2017/dynamic-super-classes-extends-in-es6/
```

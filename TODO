
# Things To Do

## High-level

1. Get a basic, working implementation of an offline game.
1. Write the stylesheets + consider SASS.
1. Record music + find out how to play tracks together.
1. Get working bundles for networked games.

## Concrete TODOs

### High Priority

1. For classes implementing some swappable component or ones in a long class hierarchy, see if there are elegance-improvements to be made by using re-exports.
1. Decide: Should I get rid of player classes? (human, chaser, runner, etc)?
   - It seems like the focus will be on making the old `Chaser` artificial player behave like a human player in that they can be eliminated and act as teammates for human players. The boundary between them has blurred.
   - But! I still kind of want to have a kind of artificial player that can't be killed in a more "survive for as long as possible" mode (instead of an "eliminate all other teams" mode), which I could implement as a subclass of `Chaser` whose `status` field has its `set rawHealth` to do nothing.
1. Fill in implementation of bubble event handler.
1. Design decision: Change bubble mechanism:
   - Activates automatically and immediately upon players entering each others' (mutual) attack range, or by pressing space in the (mutual) attack range of other players.
   - When done automatically, health will be levelled-down enough to cause as many changes in downed-ness as possible by changing other players' health to zero.
   - If done by pressing space, health will be levelled further until the space-presser's health is at zero.
   - The player with the highest health upon contact, or the player who pressed space is considered the attacker.
     - First, for each un-downed enemy (non-teammate) in range (sorted to evenly distribute downed-ness), the attacker will subtract that enemy's health+1 from its own, causing that enemy to become downed (health === -1 \< 0) until all enemies are downed, or any further whole-health-subtractions would cause it to become downed.
     - If it still has more health, it does something similar for its teammates.

### Low Priority

- Use es6 #private syntax for getter-backing fields
  - Waiting for eslint parser plugin: `https://github.com/typescript-eslint/typescript-eslint/pull/1465#issuecomment-591562659`
  - Turn eslint back on (the vscode extension) when the typescript parser for eslint is ready.
- Make eslintrc's for impl/ folders saying that they can't import from the impl/ folder they are in.
  - Check if it can detect relative imports. If not, don't do this
- Look into switching from JsDoc to TsDoc
  - [eslint plugin](https://www.npmjs.com/package/eslint-plugin-tsdoc)

---

## Important Ideas to Develop

- Make all settings available to all clients, and leave it to GameSession / Game Manager to decide how to respond
  - (ie, execute privileged-only change if requester is privileged client,
  - And broadcast how the request was handled:
    - "lang change made by _username_ will take effect in the next game"
    - Or "_username_ requested a game-pause" or "_username_ paused the game")
- Make sound settings stubs for playing music and sound effects.
  - make BGM have a track that varies with lang and different selectable style variations such as jazz cafe/elevator music, fast 13/8.
  - Make movement sound effects able to depend on translated key input like morse sounds.

## Links I Saved for Later

```text
https://nodejs.org/api/https.html
https://javascript.info/modules-dynamic-imports
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
https://github.com/tc39/proposal-dynamic-import/#import
https://v8.dev/features/dynamic-import
https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node
https://medium.com/@iamstan/typescript-es-modules-micheal-jackson-2040216be793


https://nodejs.org/api/esm.html#esm_enabling
https://docs.npmjs.com/files/package.json
https://www.typescriptlang.org/docs/handbook/modules.html
https://www.typescriptlang.org/docs/handbook/module-resolution.html

https://devdocs.io/jsdoc/howto-es2015-classes

https://devdocs.io/dom/audiobuffersourcenode/loop#Example

https://devdocs.io/css/clip-path

https://expressjs.com/en/api.html#app.set
https://stackoverflow.com/a/38129612/11107541

https://stackoverflow.com/a/45802847/11107541
https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties
https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders
https://developer.mozilla.org/en-US/docs/Web/CSS/display
https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing

https://martinfowler.com/eaaDev/EventSourcing.html
https://stackoverflow.com/a/9283222/11107541

https://www.mikedoesweb.com/2017/dynamic-super-classes-extends-in-es6/

Navigator.{keyboard,online,connection,language,languages,battery}
```

## Good Reads

```text
https://javascript.info/class-inheritance
https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b
```

## Things I have Tried that Haven't Worked (and that's okay)

- Tile Benching
- Being on multiple teams
- Nicety system instead of teams
- Using TypeScript's project-references feature to speed up compile time
- Turtle conduits: They actually aren't foolproof. You can just make a really big turtle wall so there's space between you and who you're trying to protect and then the conduit is broken.

{"version":3,"sources":["../webpack/runtime/create fake namespace object?","../webpack/runtime/require chunk loading?",".././src/base/defs/JsUtils.ts?",".././src/base/defs/TypeDefs.ts?",".././src/base/lang/LangDescs.ts?",".././src/base/lang/Lang.ts?",".././src/base/lang/impl|lazy|/^\\.\\/.*\\.ts$/|chunkName: lang/[request]|groupOptions: {}|namespace object?","../webpack/bootstrap?","../webpack/runtime/compat get default export?","../webpack/runtime/define property getters?","../webpack/runtime/ensure chunk?","../webpack/runtime/get javascript chunk filename?","../webpack/runtime/hasOwnProperty shorthand?","../webpack/runtime/make namespace object?","../external \"fs\"?","../external \"path\"?",".././src/node_modules/my-type-utils/ModNodePlatform.ts?","../external \"os\"?","../external \"http\"?","../external \"koa\"?","../external \"koa-static\"?","../external \"ws\"?",".././src/base/defs/OnlineDefs.ts?",".././src/base/game/Game.ts?",".././src/base/game/player/RequestBuffer.ts?",".././src/base/game/player/Team.ts?",".././src/base/game/player/Player.ts?",".././src/base/game/gameparts/ScoreInfo.ts?",".././src/base/floor/Grid.ts?",".././src/base/game/gameparts/GameMirror.ts?",".././src/base/floor/impl/Euclid2/System.ts?",".././src/base/floor/impl/Beehive/System.ts?",".././src/base/game/player/RobotPlayer.ts?",".././src/base/game/player/robots/Chaser.ts?",".././src/base/game/gameparts/GameManager.ts?",".././src/base/game/ctormaps/CmapManager.ts?",".././src/server/ServerGame.ts?",".././src/server/Group.ts?",".././src/server/joinerCb.ts?",".././src/server/index.ts?"],"names":["leafPrototypes","getProto","installedChunks","NO_ENUM","Object","freeze","enumerable","NO_WRITE","writable","_onclickNoButtonRepeat","ev","repeat","preventDefault","JsUtils","obj","key","getOwnPropertyNames","val","_deepFreeze","descriptor","inst","propNames","propName","defineProperty","Web","deepFreeze","hasProp","prototype","hasOwnProperty","call","protoNoEnum","ctor","forEach","instNoEnum","_configProp","bind","propNoWrite","camelCaseTransforms","camelCaseName","spaceyLowercase","replace","letter","toLowerCase","spaceyUppercase","toUpperCase","spaceyCapitalized","split","map","word","charAt","substring","join","prependComment","node","commentStr","parentNode","insertBefore","document","createComment","adoptStyleSheet","root","href","appendChild","html","rel","_makeSmartStorage","localPrefix","storage","example","smart","keys","storageKey","defaultValue","get","getItem","JSON","parse","set","setItem","stringify","tagName","classNames","domProps","el","createElement","seal","e","length","classList","add","type","addEventListener","capture","draggable","assign","svg","createElementNS","behavior","block","inline","Id","Username","Avatar","Family","HUMAN","CHASER","NULL","REGEXP","MAX_LENGTH","Values","emoji","GET_RANDOM","Math","floor","random","Player","Seq","WeightExaggeration","RegExp","MAX","CHAR_HIT_COUNT_SEED_CEILING","Lang","REMAP","IDENT","input","LOWER","LangDescs","id","module","export","isolatedMinOpts","avgWeight","remapFunc","fontScaling","displayName","blurb","entries","desc","CSP_CACHE","Map","weightExaggeration","super","this","GetDesc","csps","has","buildDict","getPrototypeOf","constructor","BUILD","cspCache","CreateCspsArray","scaleWeight","GetWeightScalingFn","Float32Array","from","csp","unscaledWt","Float64Array","Uint16Array","i","RESET_NUM_HITS","sorter","cspsIndex","push","_hits","Infinity","sort","a","b","sortI","avoid","filter","seq","next","prev","some","avoidSeq","EitherPrefixesOther","newPrev","Error","visited","hits","_i","flag","allSeqs","n","leafSeqs","reverse","leaf","startsWith","rootSeqs","rootLeaves","values","slice","reduce","sum","langId","nsps","weightScaling","avgUnscaledWeight","UNIFORM","IDENTITY","originalWeight","pow","forwardDict","char","weight","BuildUtils","Import","ogWeight","seq2Weight","accumulator","WORD_FOR_WORD","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","code","ids","t","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","m","getter","__esModule","d","value","mode","ns","create","r","def","current","indexOf","definition","f","chunkId","all","promises","u","prop","Symbol","toStringTag","826","require","chunk","moreModules","modules","chunkIds","runtime","installChunk","defineProperties","Array","globalThis","configurable","process","on","err","ROOT","__dirname","console","error","stack","frame","fn","max","stderr","fd","exit","SOCKET_ID","socket","_socketIds","WeakMap","JoinerEv","GroupEv","GameEv","Name","Passphrase","MaxLength","GameServerReconnectionAttempts","DEFAULT_TTL","Group","Create","Exist","TryJoin","NAME","Status","UserInfo","CREATE_GAME","Game","K","_REQUEST_BUFFER_LENGTH","_ROBOT_PRIORITY_MAX_REUSES","RequestBuffer","size","coord","predictedCoord","moveDest","lastRejectId","rejectId","realCoord","Team","members","elimOrder","ElimOrder","STANDING","game","prevCoord","playerId","familyId","teamId","username","avatar","reqBuffer","teams","boosts","other","team","includes","grid","moveEntity","reset","dest","isFull","requestStateChange","signRequest","author","moveType","newHealth","oldIsDowned","isDowned","every","player","numNonStandingTeams","statusBecomeOver","CtorArgs","MoveType","NORMAL","BOOST","finalize","gameDesc","teamIdCleaner","Set","players","p","originalId","squashedId","index","ScoreInfo","playerIds","Entry","entry","moveCounts","static","Grid","dimensions","area","getArea","tile","write","origin","dests","tileSourcesTo","flatMap","srcToOrigin","tileDestsFrom","getRandomCoord","teamSizes","avoidSet","numMembers","teamSpawnCoords","_Constructors","getImplementation","coordSys","args","impl","operatorIds","langDesc","gridClass","gridClassLookup","system","gridDimensions","langCharFontScaling","onGameBecomeOver","_createPlayers","operators","teammateArray","_onTeamsBootstrapped","setCurrentOperator","PAUSED","implArgs","pDesc","OperatorPlayer","RobotPlayer","ser","playerCoords","nextOperatorIndex","nextOperator","currentOperator","status","PLAYING","onGamePlaying","info","OVER","onGamePaused","onGameOver","changes","sources","op","src","seqBufferAcceptKey","authorSock","acceptOldest","tiles","commitTileMods","parseInt","pid","_setCoord","reject","GameMirror","WrappedEuclid2","Beehive","IAC","x","y","width","dim","i1","i2","dx","abs","dy","height","distX","distY","to","_i1","_i2","sub","scalar","Uint8Array","_grid","iacCache","fill","entityId","consumer","indices","intendedDest","sourceCoord","options","isOccupied","tileIac","destIac","iac","infNorm","oneNorm","ta","tb","best","splice","axialAlignment","shift","_avoidCoord","_sourceCoord","iSub","mod","toCoord","originCoord","_origin","radius","trunc","source","wrapX","wrapY","W","H","l","_t","b1","sliceLength","begin","sqrt","bad","arr","getAllAltDestsThan","ambiguityThreshold","sizeLimits","min","dash","bash","floorDash","floorBash","row","shorterSide","fslash","bslash","longerSide","RangeError","_nextMovementTimerMultiplier","_scheduledMovementCallbackId","_delayedMovementContinue","cancelTimeout","desiredDest","computeDesiredDest","tileAt","makeMovementRequest","getUntToward","getNextMoveType","setTimeout","_movementContinue","computeNextMovementTimer","of","playerDesc","which","reuses","target","c","_behaviours","Decisive","Chaser","pred","prey","params","Behaviour","DEFAULT","familyArgs","cachedPred","getUntAwayFrom","pa","pb","dist","fearDistance","cachedPrey","bloodThirstDistance","healthReserve","cachedHealthCoord","wanderingAimlessness","getRandomCoordAround","awayFn","keyPressesPerSecond","Robot","lang","scoreInfo","LangConstructor","langWeightExaggeration","resetSer","forEachShuffled","dryRunShuffleLangCspAt","spawnPoints","getSpawnCoords","teamIndex","member","memberIndex","getNonConflictingChar","commitStateChange","getNextRejectId","moveIsBoost","authorNewBoosts","PORTION_OF_MOVES_THAT_ARE_BOOST","GameManager","CHECK_VALID_CTOR_ARGS","requiredFields","missingFields","fieldName","field","parseFloat","gameOnSocketMessage","evName","data","IN_GAME","PAUSE","statusBecomePaused","UNPAUSE","statusBecomePlaying","RETURN_TO_LOBBY","groupHostSocket","sockets","s","readyState","OPEN","send","_terminate","ServerGame","deleteExternalRefs","once","_greetGameSockets","humans","RESET","callback","millis","unref","handle","clearTimeout","removeEventListener","wssBroadcast","name","passphrase","terminate","_wsOnUserInfoChange","_wsOnHostCreateGame","delete","ws","userInfo","EVENT_NAME","res","IN_LOBBY","ctorArgs","failureReasons","_createGameInstance","isCurrentlyPlayingAGame","DELETE","groups","eraseGroup","groupName","_data","wss","wsMessageCb","_res","_isReqValid","group","kickSocket","admitSocket","CLIENT_ROOT","app","use","brotli","format","setHeaders","stats","removeHeader","setHeader","maxAge","immutable","server","build","Date","now","toString","listen","port","host","address","family","chooseIPAddress","flat","internal"],"mappings":"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","file":"index.js","sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t826: 1\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","\nconst NO_ENUM  = Object.freeze(<const>{ enumerable: false });\nconst NO_WRITE = Object.freeze(<const>{ writable: false });\nfunction _onclickNoButtonRepeat(ev: Event): void {\n\tif ((ev as KeyboardEvent).repeat) { ev.preventDefault(); }\n}\n\nexport namespace JsUtils {\n\n\t/** @requires obj must not contain cycles (circular references). */\n\texport function deepFreeze<T>(obj: T): TU.DeepRo<T> {\n\t\t_deepFreeze(obj);\n\t\treturn obj as TU.DeepRo<T>;\n\t}\n\tfunction _deepFreeze(obj: any): void {\n\t\tfor (const key of Object.getOwnPropertyNames(obj)) {\n\t\t\tconst val = obj[key];\n\t\t\tif (val !== null && typeof val === \"object\") {\n\t\t\t\t_deepFreeze(val);\n\t\t\t}\n\t\t}\n\t\tObject.freeze(obj);\n\t}\n\n\t/** */\n\texport function hasProp<T, K extends keyof T>(obj: T, key: K): boolean {\n\t\treturn Object.prototype.hasOwnProperty.call(obj, key);\n\t}\n\n\t/** */\n\texport function protoNoEnum<T>(\n\t\tctor: { new (...args: any[]): T } | Function, // <- allow abstract classes\n\t\t// TODO.wait use abstract new signature when typescript 4.3 comes out.\n\t\t...propNames: readonly (keyof T & string)[] | readonly string[]\n\t): void {\n\t\tconst hasProps = Object.getOwnPropertyNames(ctor.prototype).freeze();\n\t\tpropNames.forEach((propName) => {\n\t\t\tif (DEF.DevAssert) {\n\t\t\t\tif (!hasProps.includes(propName as string)) {\n\t\t\t\t\tconst msg = `\\`${ctor.name}\\` prototype has no property named \"${propName}\"`;\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject.defineProperty(ctor.prototype, propName, NO_ENUM);\n\t\t});\n\t}\n\n\texport const instNoEnum  = _configProp.bind(null, NO_ENUM) as _configProp;\n\texport const propNoWrite = _configProp.bind(null, NO_WRITE) as _configProp;\n\n\ttype _configProp = <T>(inst: T, ...propNames: readonly (keyof T & string)[] | readonly string[]) => void;\n\tfunction _configProp<T>(\n\t\tdescriptor: PropertyDescriptor,\n\t\tinst: T, ...propNames: readonly string[]\n\t): void {\n\t\tfor (const propName of propNames) {\n\t\t\tif (DEF.DevAssert) {\n\t\t\t\tconst hasProps = Object.getOwnPropertyNames(inst).freeze();\n\t\t\t\tif (!hasProps.includes(propName as string)) {\n\t\t\t\t\tconst msg = `\\`${Object.getPrototypeOf(inst).constructor.name}\\``\n\t\t\t\t\t+` instance has no property named \"${propName}\"`;\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject.defineProperty(inst, propName, descriptor);\n\t\t}\n\t}\n\n\texport type CamelCaseNameTransforms = Readonly<{\n\t\tspaceyLowercase: string;\n\t\tspaceyUppercase: string;\n\t\tspaceyCapitalized: string;\n\t}>;\n\t/**\n\t * Nothing ultra fancy. Does not handle Acronyms.\n\t */\n\texport function camelCaseTransforms(camelCaseName: string): CamelCaseNameTransforms {\n\t\tconst spaceyLowercase = camelCaseName.replace(/[A-Z]/g, (letter) => \" \" + letter.toLowerCase());\n\t\treturn Object.freeze(<CamelCaseNameTransforms>{\n\t\t\tspaceyLowercase,\n\t\t\tspaceyUppercase: spaceyLowercase.toUpperCase(),\n\t\t\tspaceyCapitalized: spaceyLowercase.split(' ').map((word) =>\n\t\t\t\tword.charAt(0).toUpperCase() + word.substring(1)\n\t\t\t).join(' '),\n\t\t});\n\t}\n\n\texport namespace Web {\n\n\t\t/** A non-user-facing markup utility. */\n\t\texport function prependComment(node: HTMLElement, commentStr: string): void {\n\t\t\tnode.parentNode!.insertBefore(document.createComment(\" \" + commentStr + \" \"), node);\n\t\t}\n\n\t\t/**\n\t\t * This is dependant on the HtmlWebpackPlugin config.\n\t\t */\n\t\texport function adoptStyleSheet(root: Document | ShadowRoot, href: string): void {\n\t\t\t// if (\"adoptedStyleSheets\" in root) {\n\t\t\t// \tconst sheet = Array.from(document.styleSheets).find((sheet) => sheet.href?.endsWith(href));\n\t\t\t// \tif (sheet !== undefined) {\n\t\t\t// \t\t// TODO.build remove this any-casting when adoptedStyleSheets\n\t\t\t// \t\t// stops being experimental and makes it into the DOM spec.\n\t\t\t// \t\t(root as any).adoptedStyleSheets = [sheet];\n\t\t\t// \t\treturn;\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// The client's browser does not support adoptedStyleSheets :(\n\t\t\troot.appendChild(JsUtils.html(\"link\", [], {\n\t\t\t\trel: \"stylesheet\",\n\t\t\t\thref: href,\n\t\t\t}));\n\t\t}\n\n\t\t/**\n\t\t * @param localPrefix\n\t\t * Prefixes the storage keys on non-production builds. This is\n\t\t * to prevent key collisions on null origins such as `file://`.\n\t\t */\n\t\texport function _makeSmartStorage<\n\t\t\tT extends { [key : string]: string | number | boolean },\n\t\t>(\n\t\t\tlocalPrefix: string,\n\t\t\tstorage: Storage,\n\t\t\texample: T,\n\t\t): T {\n\t\t\tconst smart: T = {} as T;\n\t\t\t(Object.keys(example)).forEach((key) => {\n\t\t\t\tconst storageKey = (DEF.PRODUCTION ? \"\" : localPrefix + \".\") + key;\n\t\t\t\tconst defaultValue = example[key];\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\t\t\t\tObject.defineProperty(smart, key, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tconst val = storage.getItem(storageKey);\n\t\t\t\t\t\treturn (val === null) ? defaultValue : JSON.parse(val);\n\t\t\t\t\t},\n\t\t\t\t\tset: (val: boolean): void => {\n\t\t\t\t\t\tstorage.setItem(storageKey, JSON.stringify(val));\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Sealing the object causes an error. Not sure why.\n\t\t\treturn smart;\n\t\t}\n\t}\n\n\t/**\n\t * A combiner for common operations surrounding `document.createElement`\n\t * with some custom HTML attribute defaults.\n\t *\n\t * - Calls `Object.seal` immediately on the created HTMLElement.\n\t * - If making a button, defaults the `type` to `button` instead of `submit`\n\t *   and prevents the click callback from being spammed by holding down space\n\t *   or enter.\n\t * - If making an anchor, defaults the rel to `noopener`.\n\t */\n\texport function html<K extends keyof HTMLElementTagNameMap>(\n\t\ttagName: K,\n\t\tclassNames?: string[],\n\t\tdomProps?: Readonly<Partial<HTMLElementTagNameMap[K]>>,\n\t): HTMLElementTagNameMap[K] {\n\t\tconst el = document.createElement(tagName);\n\t\ttry { Object.seal(el); } catch (e) { void e; }\n\t\tif (classNames?.length) {\n\t\t\tel.classList.add(...classNames);\n\t\t}\n\n\t\tif (tagName === \"button\") {\n\t\t\t(el as HTMLButtonElement).type = \"button\"; // instead of \"submit\".\n\t\t\tel.addEventListener(\"keydown\", _onclickNoButtonRepeat, { capture: true });\n\t\t} else if (tagName === \"a\") {\n\t\t\t(el as HTMLAnchorElement).draggable = false;\n\t\t\t(el as HTMLAnchorElement).rel = \"noopener\";\n\t\t\t// ^ Should already be the default on modern browsers when\n\t\t\t// `target === \"_blank\"`, but it doesn't hurt to set it\n\t\t\t// anyway. We're going stricter too.\n\t\t}\n\n\t\tif (domProps !== undefined) {\n\t\t\tObject.assign(el, domProps);\n\t\t}\n\t\treturn el;\n\t}\n\n\t/** */\n\texport function svg<K extends keyof SVGElementTagNameMap>(\n\t\ttagName: K,\n\t\tclassNames?: string[],\n\t\tdomProps?: Readonly<Partial<SVGElementTagNameMap[K]>>,\n\t): SVGElementTagNameMap[K] {\n\t\tconst el = document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\n\t\tObject.seal(el);\n\t\tif (classNames?.length) {\n\t\t\tel.classList.add(...classNames);\n\t\t}\n\t\tif (domProps !== undefined) {\n\t\t\tObject.assign(el, domProps);\n\t\t}\n\t\treturn el;\n\t}\n}\nObject.freeze(JsUtils);","import AvatarValues from \"./Avatars.json5\";\n\nexport const SCROLL_INTO_CENTER = Object.freeze(<const>{\n\tbehavior: \"smooth\",\n\tblock:    \"center\",\n\tinline:   \"center\",\n});\nSCROLL_INTO_CENTER as ScrollIntoViewOptions;\n\n\n/** */\nexport abstract class Player { }\nexport namespace Player {\n\n\t/**\n\t * @enum\n\t * Each implementation of the {@link RobotPlayer} class must\n\t * have an entry here.\n\t */\n\texport type Family = keyof typeof Family;\n\texport const Family = Object.freeze(<const>{\n\t\tHUMAN:  \"HUMAN\",\n\t\tCHASER: \"CHASER\",\n\t});\n\tFamily as {\n\t\t[ key in Family ]: key;\n\t};\n\n\t/** See the main documentation in game/player/Player. */\n\texport type Id = number;\n\texport namespace Id {\n\t\texport const NULL = (-1);\n\t}\n\n\texport type Username = string;\n\texport namespace Username {\n\t\texport const REGEXP = /[ a-zA-Z0-9:-]+/;\n\t\texport const MAX_LENGTH = 15; // rather arbitrary choice.\n\t}\n\n\texport type Avatar = string;\n\texport namespace Avatar {\n\t\texport const Values = (AvatarValues as string[])\n\t\t\t// https://emojipedia.org/variation-selector-16/\n\t\t\t.map((emoji) => emoji + \"\\uFE0F\")\n\t\t\t.freeze();\n\n\t\t/** */\n\t\texport function GET_RANDOM(): Avatar {\n\t\t\treturn Values[Math.floor(Math.random() * Values.length)]!;\n\t\t}\n\t}\n\n\texport interface UserInfo {\n\t\treadonly username: Username;\n\t\treadonly teamId:   number;\n\t\treadonly avatar:   Avatar;\n\t}\n}\nObject.freeze(Player);\n\n\n/** */\nexport abstract class Lang {}\nexport namespace Lang {\n\texport namespace Seq {\n\t\t/**\n\t\t * The choice of this pattern is not out of necessity, but following\n\t\t * the mindset of spec designers when they mark something as reserved:\n\t\t * For the language implementations I have in mind, I don't see the\n\t\t * need to include characters other than these.\n\t\t *\n\t\t * Characters that must never be unmarked as reserved (state reason):\n\t\t * (currently none. update as needed)\n\t\t */\n\t\texport const REGEXP = new RegExp(\"^[a-zA-Z0-9!@#$%^&*()-_=+;:'\\\"\\\\|,.<>/?]+$\");\n\t}\n\t/** See the main documentation in game/lang/Lang */\n\texport type WeightExaggeration = number;\n\texport namespace WeightExaggeration {\n\t\t/**\n\t\t * The choice of this value is somewhat up to taste.\n\t\t * It must be greater than one.\n\t\t */\n\t\texport const MAX = 4;\n\t}\n\t/**\n\t * The choice of the upper bound on the number of times\n\t * is rather arbitrary, but it should not be too small.\n\t */\n\texport const CHAR_HIT_COUNT_SEED_CEILING = 5;\n\n\t/** */\n\texport type Desc = Readonly<{\n\t\tid: string;\n\t\t/** Pretty much a file name. */\n\t\tmodule: string;\n\t\t/** A property-access chain. */\n\t\texport: string;\n\t\t/** The output must match against `Lang.Seq.REGEXP`. */\n\t\tremapFunc: {(input: string): string};\n\t\t/** Scale the font in the game grid */\n\t\tfontScaling: number;\n\t\t/**\n\t\t * The total number of leaf nodes of all root nodes except the\n\t\t * root node with the most leaf nodes.\n\t\t */\n\t\tisolatedMinOpts: number;\n\t\tavgWeight: number;\n\t\tdisplayName:string;\n\t\tblurb: string;\n\t}>;\n}\nObject.freeze(Lang);\nObject.freeze(Lang.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Lang } from \":defs/TypeDefs\";\n\nconst REMAP = Object.freeze(<const>{\n\tIDENT: (input: string): string => input,\n\tLOWER: (input: string): string => input.toLowerCase(),\n});\nREMAP as Readonly<Record<string, {(input: string): string}>>;\n\n\n/** */\nexport const LangDescs: Record<string, Lang.Desc> = {\n\t\"engl-low\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Lowercase\",\n\t\tisolatedMinOpts: 25, avgWeight: 3.8639230769230766,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 1.0,\n\t\tdisplayName: \"English Lowercase (qwerty)\",\n\t\tblurb: \"\",\n\t},\n\t\"engl-mix\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"MixedCase\",\n\t\tisolatedMinOpts: 51, avgWeight: 3.8639230769230775,\n\t\tremapFunc: REMAP.IDENT, fontScaling: 1.0,\n\t\tdisplayName: \"English Mixed-Case (Qwerty)\",\n\t\tblurb: \"\",\n\t},\n\t\"japn-hir\": {\n\t\tid: undefined!,\n\t\tmodule: \"Japanese\", export: \"Hiragana\",\n\t\tisolatedMinOpts: 70, avgWeight: 275509.7083333333,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 1.0,\n\t\tdisplayName: \"Japanese Hiragana\",\n\t\tblurb: \"\",\n\t},\n\t\"japn-kat\": {\n\t\tid: undefined!,\n\t\tmodule: \"Japanese\", export: \"Katakana\",\n\t\tisolatedMinOpts: 68, avgWeight: 45577.26666666667,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 1.0,\n\t\tdisplayName: \"Japanese Katakana\",\n\t\tblurb: \"\",\n\t},\n\t\"kore-dub\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Dubeolsik\",\n\t\tisolatedMinOpts: 9085, avgWeight: 0.9974982117852247,\n\t\tremapFunc: REMAP.IDENT, fontScaling: 1.0,\n\t\tdisplayName: \"Korean Dubeolsik (두벌식 키보드)\",\n\t\tblurb: \"The most common keyboard layout, and South Korea's only Hangul\"\n\t\t+\" standard since 1969. Consonants are on the left, and vowels on\"\n\t\t+\" the right.\",\n\t},\n\t\"kore-sub\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Sebeolsik\",\n\t\tisolatedMinOpts: 10098, avgWeight: 0.9974982117852336,\n\t\tremapFunc: REMAP.IDENT, fontScaling: 1.0,\n\t\tdisplayName: \"Korean Sebeolsik (세벌식 최종 키보드)\",\n\t\tblurb: \"Another Hangul keyboard layout used in South Korea, and the\"\n\t\t+\" final Sebeolsik layout designed by Dr. Kong Byung Woo, hence\"\n\t\t+\" the name. Syllable-initial consonants are on the right, final\"\n\t\t+\" consonants on the left, and vowels in the middle. It is more\"\n\t\t+\" ergonomic than the dubeolsik, but not widely used.\",\n\t},\n\t\"kore-rom\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Romanization\",\n\t\tisolatedMinOpts: 4764, avgWeight: 0.9974982117852286,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 1.0,\n\t\tdisplayName: \"Korean Revised Romanization\",\n\t\tblurb: \"The Revised Romanization of Korean (국어의 로마자 표기법; 國語의 로마字\"\n\t\t+\" 表記法) is the official South Korean language romanization system. It\"\n\t\t+\" was developed by the National Academy of the Korean Language from 1995,\"\n\t\t+\" and was released on 7 July 2000 by South Korea's Ministry of Culture\"\n\t\t+\" and Tourism\",\n\t},\n\t\"engl-cell-enc\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"OldCellphone.Encode\",\n\t\tisolatedMinOpts: 7, avgWeight: 3.8639230769230766,\n\t\tremapFunc: REMAP.IDENT, fontScaling: 1.0,\n\t\tdisplayName: \"Old Cellphone Keyboard\",\n\t\tblurb: \"\",\n\t},\n\t\"mors-enc\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Morse.Encode\",\n\t\tisolatedMinOpts: 11, avgWeight: 2.6089716238018403,\n\t\tremapFunc: (input) => { return input;/* TODO.impl */ }, fontScaling: 1.0,\n\t\tdisplayName: \"Morse Encoder\",\n\t\tblurb: \"\",\n\t},\n\t\"mors-dec\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Morse.Decode\",\n\t\tisolatedMinOpts: 40, avgWeight: 2.6089716238018408,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 0.4,\n\t\tdisplayName: \"Morse Decoder\",\n\t\tblurb: \"\",\n\t},\n\t\"ngram2\": {\n\t\tid: undefined!,\n\t\tmodule: \"Ngrams\", export: \"Ngram2\",\n\t\tisolatedMinOpts: 199, avgWeight: 5.000010000000002,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 0.9,\n\t\tdisplayName: \"English Bigrams\",\n\t\tblurb: \"\",\n\t},\n\t\"ngram3\": {\n\t\tid: undefined!,\n\t\tmodule: \"Ngrams\", export: \"Ngram3\",\n\t\tisolatedMinOpts: 399, avgWeight: 2.5000100000000023,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 0.6,\n\t\tdisplayName: \"English Trigrams\",\n\t\tblurb: \"\",\n\t},\n\t\"numpad\": {\n\t\tid: undefined!,\n\t\tmodule: \"Numpad\", export: \"Numpad\",\n\t\tisolatedMinOpts: 99, avgWeight: 1,\n\t\tremapFunc: REMAP.LOWER, fontScaling: 0.95,\n\t\tdisplayName: \"Number Pad\",\n\t\tblurb: \"\",\n\t},\n};\nObject.entries(LangDescs).freeze().forEach(([id,desc]) => {\n\t// @ts-expect-error : RO=\n\tdesc.id = id;\n});\nJsUtils.deepFreeze(LangDescs);","import { JsUtils } from \":defs/JsUtils\";\nimport { Lang as _Lang } from \":defs/TypeDefs\";\nimport { LangDescs } from \"./LangDescs\";\nexport { LangDescs } from \"./LangDescs\";\n\n/** */\nconst CSP_CACHE = new Map<Lang.Desc[\"id\"], readonly Lang.Csp.Weighted[]>();\n\n/**\n * Conceptually, a language is a map from unique written characters\n * to corresponding key-sequences. the key-sequences may be non-unique.\n *\n * Operationally, the reverse map is more useful: A a map from typeable\n * key-sequences to sets of language-unique written characters. Support\n * is not needed for retrieving the sequence corresponding to a written\n * character.\n */\nexport abstract class Lang extends _Lang {\n\n\tpublic readonly desc: Lang.Desc;\n\n\tpublic readonly csps: readonly Lang.Csp.Weighted[];\n\treadonly #size: number;\n\n\treadonly #weights: Float32Array;\n\treadonly #hits: Float64Array;\n\t/**\n\t * A linked-list indexing lookup. The last entry's value is the\n\t * starting index.\n\t */\n\treadonly #next: Uint16Array;\n\n\t/** */\n\tprotected constructor(\n\t\tid: Lang.Desc[\"id\"],\n\t\tweightExaggeration: Lang.WeightExaggeration,\n\t) {\n\t\tsuper();\n\t\tthis.desc = Lang.GetDesc(id);\n\t\tthis.csps = CSP_CACHE.has(id)\n\t\t\t? CSP_CACHE.get(id)!\n\t\t\t: ((): readonly Lang.Csp.Weighted[] => {\n\t\t\t\tconst buildDict = (Object.getPrototypeOf(this).constructor as Lang.ClassIf).BUILD();\n\t\t\t\tconst cspCache = Lang.CreateCspsArray(buildDict);\n\t\t\t\tCSP_CACHE.set(id, cspCache);\n\t\t\t\treturn cspCache;\n\t\t\t})();\n\t\tthis.#size = this.csps.length;\n\t\tJsUtils.propNoWrite(this as Lang, \"desc\", \"csps\");\n\t\t{\n\t\t\tconst scaleWeight = Lang.GetWeightScalingFn(weightExaggeration, this.desc.avgWeight);\n\t\t\tthis.#weights = Float32Array.from(this.csps.map((csp) => scaleWeight(csp.unscaledWt)));\n\t\t}\n\t\tthis.#hits = new Float64Array(this.#size);\n\t\tthis.#next = new Uint16Array(this.#size + 1);\n\t\tObject.seal(this); //🧊\n\t}\n\n\t/** */\n\tpublic reset(): void {\n\t\tfor (let i = 0; i < this.#hits.length; i++) {\n\t\t\tthis.#hits[i] = Math.random() * Lang.RESET_NUM_HITS / this.desc.avgWeight;\n\t\t}\n\t\tconst sorter: { _hits: number, cspsIndex: number }[] = [];\n\t\tthis.#hits.forEach((_hits, cspsIndex) => {\n\t\t\tsorter.push(Object.freeze({ _hits, cspsIndex }));\n\t\t});\n\t\tsorter.push({ _hits: Infinity, cspsIndex: this.#size });\n\t\tsorter.seal().sort((a,b) => a._hits - b._hits).freeze();\n\t\t{\n\t\t\tlet i = this.#next[this.#size] = sorter[0]!.cspsIndex;\n\t\t\tfor (let sortI = 1; sortI < sorter.length; sortI++) {\n\t\t\t\ti = this.#next[i] = sorter[sortI]!.cspsIndex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns\n\t * A random char whose sequence is not a prefix of anything in\n\t * `avoid` and vice versa. Ie. They may share a common prefix as\n\t * long as they are both longer than the shared prefix.\n\t *\n\t * @description\n\t * This method is called to shuffle the char-seq pair at some tile\n\t * A. `avoid` should contain the lang-sequences from all tiles\n\t * reachable by a player occupying any tile B from which they can\n\t * also reach A (except for A itself).\n\t *\n\t * @param avoid\n\t * A collection of sequences to avoid conflicts with when choosing\n\t * a character to return. Empty-string entries are ignored. Freezing\n\t * may result in better performance.\n\t *\n\t * @requires\n\t * The number of leaves in an implementation's tree-structure must\n\t * be greater than the number of non-empty entries in `avoid` for\n\t * all expected combinations of internal state and passed-arguments\n\t * under which it could be called.\n\t */\n\tpublic getNonConflictingChar(\n\t\tavoid: readonly Lang.Seq[],\n\t): Lang.Csp {\n\t\tavoid = avoid.filter((seq) => seq).freeze();\n\t\tconst next = this.#next;\n\n\t\tfor (\n\t\t\tlet i = next[this.#size]!, prev = this.#size;\n\t\t\ti !== this.#size;\n\t\t\tprev = i, i = next[i]!\n\t\t) {\n\t\t\tconst csp = this.csps[i]!;\n\t\t\tif (!avoid.some((avoidSeq) => /*#__INLINE__*/Lang.EitherPrefixesOther(avoidSeq, csp.seq))) {\n\t\t\t\tthis.#hits[i] += 1.0 / this.#weights[i]!;\n\t\t\t\tlet newPrev = i;\n\t\t\t\twhile (\n\t\t\t\t\tnext[newPrev] !== this.#size\n\t\t\t\t\t&& this.#hits[i]! > this.#hits[next[newPrev]!]!\n\t\t\t\t) { newPrev = next[newPrev]!; }\n\n\t\t\t\tif (newPrev !== i) {\n\t\t\t\t\tif (DEF.DevAssert && prev === -1) throw new Error(\"never\");\n\t\t\t\t\tnext[prev] = next[i]!; next[i] = next[newPrev]!; next[newPrev] = i;\n\t\t\t\t}\n\t\t\t\t//if (DEF.DevAssert) { this._assertInvariants(); }\n\t\t\t\treturn csp;\n\t\t\t}\n\t\t}\n\t\t// Enforced by UI and server:\n\t\tthrow new Error(\"never\");\n\t}\n\n\t/** @internal For development testing purposes. */\n\tpublic _assertInvariants(): void {\n\t\tconst visited: boolean[] = [];\n\t\tfor (let i = 0; i < this.#size; i++) {\n\t\t\tvisited[i] = false;\n\t\t}\n\t\tvisited.seal();\n\t\tlet i: number = this.#next[this.#size]!;\n\t\tlet hits = 0;\n\t\tfor (let _i = 0; _i < this.#size; _i++) {\n\t\t\tif (this.#hits[i]! < hits) {\n\t\t\t\tthrow new Error(\"lang hits should be ascending\");\n\t\t\t}\n\t\t\thits = this.#hits[i]!;\n\t\t\tvisited[i] = true;\n\t\t\ti = this.#next[i]!;\n\t\t}\n\t\tif (i !== this.#size) {\n\t\t\tthrow new Error(\"lang next should end by looping back\");\n\t\t}\n\t\tif (visited.some((flag) => flag === false)) {\n\t\t\tthrow new Error(\"lang next should be an exhaustive loop\");\n\t\t}\n\t}\n\n\t/**\n\t * These are calculated after changes to the implementation and the\n\t * result is cached via hardcoding into LangDescs.ts.\n\t */\n\tpublic _calcIsolatedMinOpts(): number {\n\t\t/** ALl unique sequences sorted in lexical order. */\n\t\tconst allSeqs: string[] = [];\n\t\tthis.csps.forEach((n) => {\n\t\t\tif (allSeqs[allSeqs.length-1] !== n.seq) { allSeqs.push(n.seq); }\n\t\t});\n\t\tallSeqs.freeze();\n\n\t\t/** Every other seq is a prefix of one or several of these. */\n\t\tconst leafSeqs: string[] = [];\n\t\tfor (const seq of [...allSeqs].seal().reverse().freeze()) {\n\t\t\tif (!leafSeqs.some((leaf) => leaf.startsWith(seq))) {\n\t\t\t\tleafSeqs.push(seq);\n\t\t\t}\n\t\t}\n\t\tleafSeqs.freeze();\n\n\t\t/** Every leaf starts with one and only one of these. */\n\t\tconst rootSeqs: string[] = [];\n\t\tfor (const seq of allSeqs) {\n\t\t\tif (!rootSeqs.some((root) => root.startsWith(seq))) {\n\t\t\t\trootSeqs.push(seq);\n\t\t\t}\n\t\t}\n\t\trootSeqs.freeze();\n\n\t\t/** A partition of the leaves according to their roots. */\n\t\tconst rootLeaves = new Map<string, number>();\n\t\trootSeqs.forEach((root) => rootLeaves.set(root, 0));\n\t\tleafSeqs.forEach((leaf) => {\n\t\t\tfor (const root of rootSeqs) {\n\t\t\t\tif (leaf.startsWith(root)) {\n\t\t\t\t\trootLeaves.set(root, rootLeaves.get(root)! + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// The number of leaves except those of the root with the most leaves:\n\t\treturn [...rootLeaves.values()].sort((a,b) => a-b).slice(0,-1).reduce((sum,n) => sum+n, 0);\n\t}\n}\nexport namespace Lang {\n\t/**\n\t * Every constructor function (class literal) implementing the\n\t * `Lang` class must implement this interface.\n\t */\n\texport interface ClassIf {\n\t\tnew (weightScaling: Lang.WeightExaggeration): Lang;\n\t\t/** Note: Does not need to handle caching */\n\t\tBUILD(): ForwardDict;\n\t}\n\n\t/**\n\t * @returns `undefined` if no such language descriptor is found.\n\t */\n\texport function GetDesc(langId: Lang.Desc[\"id\"]): Lang.Desc {\n\t\treturn LangDescs[langId]!;\n\t}\n\tObject.freeze(GetDesc);\n\n\t/** */\n\texport async function Import(langId: Lang.Desc[\"id\"]): Promise<Lang.ClassIf> {\n\t\tconst desc = LangDescs[langId]!;\n\t\tconst module = await import(\n\t\t\t/* webpackChunkName: \"lang/[request]\" */\n\t\t\t`./impl/${desc.module}.ts`\n\t\t);\n\t\treturn desc.export.split(\".\").reduce(\n\t\t\t(nsps, propName) => nsps[propName],\n\t\t\tmodule[desc.module],\n\t\t);\n\t}\n\tObject.freeze(Import);\n\n\t/** */\n\texport function GetWeightScalingFn(\n\t\tweightScaling: Lang.WeightExaggeration,\n\t\tavgUnscaledWeight: number,\n\t): (ogWeight: number) => number {\n\t\tif (weightScaling === 0) return GetWeightScalingFn.UNIFORM;\n\t\tif (weightScaling === 1) return GetWeightScalingFn.IDENTITY;\n\t\treturn (originalWeight: number) => Math.pow(originalWeight / avgUnscaledWeight, weightScaling);\n\t}\n\texport namespace GetWeightScalingFn {\n\t\t// Cache the compiled code by extracting the declaration.\n\t\texport function UNIFORM(): 1 { return 1; }\n\t\texport function IDENTITY(ogWeight: number): number { return ogWeight; }\n\t}\n\tObject.freeze(GetWeightScalingFn);\n\n\t/**\n\t * Does not handle caching.\n\t */\n\texport function CreateCspsArray(forwardDict: Lang.ForwardDict): readonly Lang.Csp.Weighted[] {\n\t\treturn Object.entries(forwardDict).freeze().map(([char, {seq, weight: unscaledWt}]) => {\n\t\t\treturn Object.freeze({\n\t\t\t\tchar, seq, unscaledWt,\n\t\t\t});\n\t\t})\n\t\t.seal()\n\t\t//.sort((a,b) => (a.seq < b.seq) ? -1 : (a.seq > b.seq) ? 1 : (a.char < b.char) ? -1 : (a.char > b.char) ? 1 : 0)\n\t\t.sort((a,b) => b.unscaledWt - a.unscaledWt)\n\t\t// ^Note: Enforcing sort order here is not technically required\n\t\t// as long as forwardDict is deterministic in insertion order.\n\t\t.freeze();\n\t}\n\tObject.freeze(CreateCspsArray);\n\n\t/** Somewhat arbitrary. Greater than one. */\n\texport const RESET_NUM_HITS = 10;\n\n\texport function EitherPrefixesOther(a: string, b: string): boolean {\n\t\treturn (a.length > b.length) ? a.startsWith(b) : b.startsWith(a);\n\t}\n\n\t/**\n\t * Utility functions for implementations to use in their static\n\t * `.BUILD` function.\n\t */\n\texport namespace BuildUtils {\n\t\texport function WORD_FOR_WORD(seq2Weight: Record<Lang.Seq,number>): Lang.ForwardDict {\n\t\t\treturn Object.entries(seq2Weight).freeze().reduce<Lang.ForwardDict>(\n\t\t\t\t(accumulator, [char,weight]) => {\n\t\t\t\t\taccumulator[char] = { seq: char, weight };\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}, {},\n\t\t\t);\n\t\t}\n\t\tObject.freeze(WORD_FOR_WORD);\n\t}\n\n\t/**\n\t * An atomic unit in a written language that constitutes a single\n\t * character. It is completely unique in its language, and has a\n\t * single corresponding sequence (string) typeable on a keyboard.\n\t */\n\texport type Char = string;\n\n\t/**\n\t * A sequence of characters each matching {@link SEQ_REGEXP}\n\t * that represent the intermediate interface between an Operator\n\t * and a `LangChar`. The immediate interface is through the `Lang`\n\t * implementation's {@link Lang#remapKey} method.\n\t */\n\texport type Seq = string;\n\n\t/**\n\t * A key-value pair containing a `LangChar` and its corresponding\n\t * `LangSeq`.\n\t */\n\texport interface Csp {\n\t\treadonly char: Lang.Char,\n\t\treadonly seq:  Lang.Seq,\n\t}\n\texport namespace Csp {\n\t\texport interface Weighted extends Csp {\n\t\t\t/** Unscaled weight. */\n\t\t\treadonly unscaledWt: number;\n\t\t}\n\t}\n\n\t/**\n\t * A map from written characters to their corresponding typeable\n\t * keyboard sequence and relative spawn weight.\n\t *\n\t * Shape that must be passed in to the static tree producer. The\n\t * `Record` type enforces the invariant that {@link Lang.Char}s are\n\t * unique in a {@link Lang}. \"CSP\" is short for {@link Lang.CharSeqPair}.\n\t */\n\texport type ForwardDict = Record<\n\t\tLang.Char,\n\t\tReadonly<{seq: Lang.Seq, weight: number,}>\n\t>;\n\n\t/**\n\t * A value used to scale the variance in weights. Passing zero will\n\t * cause all weights to be adjusted to equal the average weight.\n\t * Passing `1` will cause no adjustment to be made to the weights.\n\t * Passing a value greater than one will cause an exaggeration of\n\t * the weight distribution.\n\t */\n\texport type WeightExaggeration = _Lang.WeightExaggeration;\n\n\texport type Desc = _Lang.Desc;\n}\nObject.freeze(Lang);\nObject.freeze(Lang.prototype);","var map = {\n\t\"./Chinese.ts\": [\n\t\t603,\n\t\t7,\n\t\t330\n\t],\n\t\"./Emote.ts\": [\n\t\t896,\n\t\t9,\n\t\t858\n\t],\n\t\"./English.ts\": [\n\t\t536,\n\t\t9,\n\t\t184\n\t],\n\t\"./Japanese.ts\": [\n\t\t544,\n\t\t9,\n\t\t410\n\t],\n\t\"./Korean.ts\": [\n\t\t242,\n\t\t9,\n\t\t227\n\t],\n\t\"./Ngrams.ts\": [\n\t\t414,\n\t\t9,\n\t\t273\n\t],\n\t\"./Numpad.ts\": [\n\t\t373,\n\t\t9,\n\t\t683\n\t],\n\t\"./Shell.ts\": [\n\t\t716,\n\t\t9,\n\t\t159\n\t],\n\t\"./defs/Chinese.ts\": [\n\t\t720,\n\t\t7,\n\t\t704\n\t],\n\t\"./defs/English100.ts\": [\n\t\t45,\n\t\t9,\n\t\t885\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 59;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"chunk/\" + {\"159\":\"lang/Shell-ts\",\"184\":\"lang/English-ts\",\"227\":\"lang/Korean-ts\",\"273\":\"lang/Ngrams-ts\",\"330\":\"lang/Chinese-ts\",\"410\":\"lang/Japanese-ts\",\"683\":\"lang/Numpad-ts\",\"704\":\"lang/defs-Chinese-ts\",\"858\":\"lang/Emote-ts\",\"885\":\"lang/defs-English100-ts\"}[chunkId] + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");;","/// <reference types=\"node\" />\nimport fs from \"fs\";\nimport path from \"path\";\n\nObject.defineProperties(Array.prototype, {\n\tfreeze: { value: function freeze() { return Object.freeze(this); }, enumerable: true, },\n\tseal: { value: function seal() { return Object.seal(this); }, enumerable: true },\n});\n// In-House `--frozen-intrinsics`:\n(<(keyof typeof globalThis)[]>[\n\t\"Object\", \"String\", \"Number\", \"RegExp\", \"Date\",\n\t\"Array\", \"Map\", \"Set\", \"WeakMap\", \"WeakSet\",\n])\n.forEach((key) => {\n\tObject.defineProperty(globalThis, key, {\n\t\tenumerable: true,\n\t\twritable: false,\n\t\tconfigurable: false,\n\t});\n\tObject.freeze((globalThis as any)[key]);\n\tif (key === \"Object\") {\n\t\t// Handle Object.toString specially.\n\t\tObject.seal((globalThis as any)[key].prototype);\n\t\tfor (const prop of Object.getOwnPropertyNames(Object.prototype)) {\n\t\t\tObject.defineProperty(Object.prototype, prop, {\n\t\t\t\tconfigurable: false, enumerable: false, writable: (prop === \"toString\"),\n\t\t\t});\n\t\t}\n\t} else {\n\t\tObject.freeze((globalThis as any)[key].prototype);\n\t}\n});\n\n// Override stack trace to shorten file paths:\nprocess.on(\"uncaughtException\", function processOnUncaughtException(err) {\n\tconst ROOT = path.resolve(__dirname, \"../..\");\n\tconsole.error(\"\\n\\n\");\n\tif (err.stack !== undefined) {\n\t\terr.stack = err.stack.replace(new RegExp(ROOT.replace(/\\\\/g, \"\\\\\\\\\"), \"g\"), \":\")\n\t\t\t.split(\"\\n\").map(frame => {\n\t\t\t\tconst fn = frame.indexOf(\"(\");\n\t\t\t\treturn fn < 0 ? frame : frame.substring(0, fn) + \" \".repeat(Math.max(0, 35-fn)) + frame.substring(fn);\n\t\t\t}).join(\"\\n\");\n\t\tfs.writeSync(process.stderr.fd, err.stack);\n\t}\n\tconsole.error(\"\\n\\n\");\n\tprocess.exit(1);\n});\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"koa\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"koa-static\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ws\");;","import type { Player } from \":defs/TypeDefs\";\nimport type NodeWebSocket from \"ws\";\n\n/** Serverside-only. */\nexport function SOCKET_ID(socket: NodeWebSocket): string | never {\n\t// What has it got it its socketses?\n\t// STRING!? or NOTHING!\n\tif (_socketIds.has(socket)) {\n\t\treturn _socketIds.get(socket)!;\n\t} else {\n\t\tthrow new Error(\"never\");\n\t}\n}\nexport function SET_SOCKET_ID(socket: NodeWebSocket, id: string): void {\n\t_socketIds.set(socket, id);\n}\nconst _socketIds = new WeakMap<NodeWebSocket, string>();\n\n\n/** */\nexport abstract class Group { }\nexport namespace Group {\n\texport type Name = string;\n\texport namespace Name {\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]+)$/;\n\t\texport const MaxLength = 30;\n\t}\n\texport type Passphrase = string;\n\texport namespace Passphrase {\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]*)$/;\n\t\texport const MaxLength = 30;\n\t}\n\texport const GameServerReconnectionAttempts = 2;\n\texport const DEFAULT_TTL = 20; // seconds\n}\nObject.freeze(Group);\nObject.freeze(Group.prototype);\n\n\n/** */\nexport namespace JoinerEv {\n\t/** */\n\texport namespace Create {\n\t\texport const NAME = \"joiner/create\";\n\t\texport interface Req {\n\t\t\treadonly groupName: Group.Name,\n\t\t\treadonly passphrase: Group.Passphrase,\n\t\t}\n\t\texport type Res = boolean;\n\t}\n\t/** */\n\texport namespace Exist {\n\t\texport const NAME = \"joiner/exist\";\n\t\t/** Downstream only. */\n\t\texport type Sse = {\n\t\t\treadonly [groupName : string]: Status;\n\t\t};\n\t\texport const enum Status {\n\t\t\tIN_LOBBY = \"in-lobby\",\n\t\t\tIN_GAME  = \"in-game\",\n\t\t\tDELETE   = \"delete\",\n\t\t}\n\t}\n\t/** */\n\texport namespace TryJoin {\n\t\texport const NAME = \"joiner/try-join\";\n\t\texport interface Req {\n\t\t\treadonly groupName: Group.Name;\n\t\t\treadonly passphrase: Group.Passphrase;\n\t\t\treadonly userInfo: Player.UserInfo;\n\t\t}\n\t\texport type Res = boolean;\n\t}\n}\nObject.freeze(JoinerEv);\n\n\n/** */\nexport namespace GroupEv {\n\t/** */\n\texport namespace UserInfo {\n\t\texport const NAME = \"group/user-info-change\";\n\t\texport type Req = Player.UserInfo;\n\t\texport type Res = Record<string, Player.UserInfo | null>;\n\t}\n\n\t/** A broadcast originating from the group host. */\n\texport const CREATE_GAME = \"group/create-game\";\n}\nObject.freeze(GroupEv);\n\n\n/** */\nexport const enum GameEv {\n\t/**\n\t * Upon constructing a _new_ game, the server waits for all clients\n\t * to send this event to indicate that they have finished building\n\t * any necessary HTML, and are now ready to receive the serialized\n\t * reset-state.\n\t */\n\tRESET = \"game/reset\",\n\n\t/**\n\t * Client uses this event during reset procedure after receiving\n\t * the serialized reset-state to indicate that it is ready for\n\t * the game to be un-paused.\n\t */\n\tUNPAUSE = \"game/unpause\",\n\n\t/** */\n\tPAUSE = \"game/pause\",\n\n\t/** */\n\tIN_GAME = \"game/ingame\",\n\n\t/**\n\t * The server will send this event with no arguments to indicate\n\t * that everyone must now return to the lobby, or with a socket\n\t * ID as an argument to indicate that all players operated by\n\t * a client with that socket ID are out of the game.\n\t */\n\tRETURN_TO_LOBBY = \"game/return-to-lobby\",\n}","import type { Lang } from \":lang/Lang\";\nimport type { Coord } from \":floor/Tile\";\nimport type { Grid } from \":floor/Grid\";\nimport type { Player } from \"./player/Player\";\nimport type { OperatorPlayer } from \"./player/OperatorPlayer\";\nimport type { GameMirror } from \"./gameparts/GameMirror\";\n\n/**\n * **Important** To be properly disposed of, a game must first have\n * either naturally ended, or be paused- both operations of which will\n * properly cancel all internal scheduled callbacks (the callbacks\n * refer to players, which refer to their game, which refers to a\n * whole lot of other things such as the language dictionary, which\n * in some cases may be quite large.)\n *\n * Players can only join a game before it starts. Reconfiguration\n * requires creating a completely new game.\n *\n * There are overlaps between what each implementation needs to do:\n * - Offline and Server games maintain and control the master-game-state.\n * - Offline and Client games display the game-state to an operator via browser and HTML.\n * - Client  and Server games use network operations to communicate.\n */\nexport namespace Game {\n\n\t/**\n\t * Unlike CtorArgs, these are not passed as no-prototype objects\n\t * (possibly over the network) from the game manager to clients.\n\t * These are abstract handles to game-implementation-dependant\n\t * components.\n\t */\n\texport type ImplArgs = {\n\t\tgridClassLookup<S extends Coord.System>(coordSys: S): Grid.ClassIf<S>;\n\t\tOperatorPlayer: typeof OperatorPlayer | undefined;\n\t\tRobotPlayer: (_this: GameMirror, desc: Player._CtorArgs[Player.RobotFamily]) => Player;\n\t\tonGameBecomeOver: () => void;\n\t};\n\n\tinterface _CtorArgsBase<S extends Coord.System> {\n\t\treadonly coordSys: S;\n\t\treadonly gridDimensions: Grid.Dimensions[S];\n\t\treadonly langId: Lang.Desc[\"id\"];\n\t\treadonly langWeightExaggeration: Lang.WeightExaggeration;\n\t}\n\n\t/**\n\t * Game Constructor Arguments\n\t *\n\t * Important internal note: Upon modification, make appropriate\n\t * changes to GameManager's function for verifying validity of\n\t * client input on the server side.\n\t *\n\t * @template S\n\t * The coordinate system to use. The literal value must also be\n\t * passed as the field `coordSys`.\n\t */\n\texport interface CtorArgs<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\n\t\treadonly players: readonly Player.CtorArgs[];\n\t}\n\texport namespace CtorArgs {\n\t\texport interface UnFin<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\n\t\t\treadonly players: readonly Player.CtorArgs.UnFin[];\n\t\t}\n\t\t/** */\n\t\texport type FailureReasons = {\n\t\t\tmissingFields: Array<keyof CtorArgs<Coord.System>>;\n\t\t};\n\t}\n\n\t/**\n\t * Serialization of the Game State after a reset.\n\t *\n\t * Only contains state information that would not be known by a\n\t * non-Game Manager.\n\t */\n\texport interface ResetSer {\n\t\t/**\n\t\t * Indexed by index according to `Grid.forEach` - not by the\n\t\t * `Tile.coord`s of `Grid.forEach` (they may differ).\n\t\t */\n\t\treadonly csps: readonly Lang.Csp[];\n\t\t/**\n\t\t * A map from player ID's to their starting coordinates.\n\t\t */\n\t\treadonly playerCoords: readonly Coord[];\n\t}\n\n\t/**\n\t * - **`PLAYING`** can go to:\n\t *   - `PAUSED`: when a pause request initiated by a player is accepted.\n\t *   - `OVER`:  when certain conditions of players being downed are met.\n\t * - **`PAUSED`** can go to:\n\t *   - `PLAYING`: similar to PLAYING->PAUSED.\n\t * - **`OVER`** can go to:\n\t *   - `PLAYING`: via resetting the game.\n\t */\n\texport enum Status {\n\t\tPLAYING = \"PLAYING\",\n\t\tPAUSED  = \"PAUSED\",\n\t\tOVER    = \"OVER\",\n\t}\n\tObject.freeze(Status);\n\n\t/**\n\t * Global, Game-Setup-Agnostic constants for tuning game behaviour.\n\t *\n\t * Keys beginning with an underscore are probably of no interest to\n\t * people playing the game.\n\t */\n\texport const K = Object.freeze(<const>{\n\t\t/**\n\t\t * A value in `(0,1]`. If `1`, then players can (on average),\n\t\t * boost indefinitely. If close to zero, then players virtually\n\t\t * cannot boost, no matter how much health they have. If `0.3`,\n\t\t * players can boost for roughly 30% of the movements they make.\n\t\t *\n\t\t * This value assumes that the player moves around aimlessly\n\t\t * and randomly. Adjustments for more rational assumptions are\n\t\t * not to be made _here_.\n\t\t */\n\t\t\"PORTION_OF_MOVES_THAT_ARE_BOOST\": 0.4,\n\n\t\t/**\n\t\t * A strictly-positive integer. Indicates the maximum number\n\t\t * of requests which a clientside player can buffer.\n\t\t */\n\t\t_REQUEST_BUFFER_LENGTH: 5,\n\n\t\t/**\n\t\t * How many times a Decisive RobotPlayer can reuse its cached\n\t\t * target before it will do another cold analysis of its\n\t\t * surroundings.\n\t\t */\n\t\t_ROBOT_PRIORITY_MAX_REUSES: 4,\n\t});\n}\nObject.freeze(Game);","import { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\n\nimport type { Coord }        from \":floor/Tile\";\nimport type { StateChange }  from \":game/StateChange\";\nimport { Player as _Player } from \":defs/TypeDefs\";\n\n/**\n * Used on the clientside to buffer requests when there is network\n * delay. If a request gets rejected, the whole buffer is invalidated.\n */\nexport class RequestBuffer {\n\n\t#lastRejectId = 0; public get lastRejectId(): number { return this.#lastRejectId; }\n\tprivate size = 0;\n\tpublic predictedCoord: Coord;\n\n\tpublic reset(coord: Coord): void {\n\t\tthis.#lastRejectId = 0;\n\t\tthis.size = 0;\n\t\tthis.predictedCoord = coord;\n\t}\n\n\tpublic get isFull(): boolean {\n\t\treturn this.size === Game.K._REQUEST_BUFFER_LENGTH;\n\t}\n\n\t/** @requires `!this.isFull` */\n\tpublic signRequest(req: StateChange.Req): StateChange.Req {\n\t\tif (DEF.DevAssert && this.isFull) {\n\t\t\tthrow new Error(\"never\");\n\t\t}\n\t\tthis.size++;\n\t\tthis.predictedCoord = req.moveDest;\n\t\treturn req;\n\t}\n\n\tpublic getNextRejectId(): number {\n\t\t// return (this.lastRejectId === 0) ? 1 : 0;\n\t\t// Above option returns an \"elegant\" value.\n\t\t// Below returns a hard-to-guess value.\n\t\treturn (this.lastRejectId + Math.floor(99 * Math.random())) % 100;\n\t}\n\t/**\n\t * Every request signed with the previous rejectId will be\n\t * silently dropped by the game manager.\n\t */\n\tpublic reject(rejectId: number, realCoord: number): void {\n\t\tthis.#lastRejectId = rejectId;\n\t\tthis.size = 0;\n\t\tthis.predictedCoord = realCoord;\n\t}\n\tpublic acceptOldest(): void {\n\t\tthis.size--;\n\t}\n}\nObject.freeze(RequestBuffer);\nObject.freeze(RequestBuffer.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Player } from \"./Player\";\n\n/**\n * @final\n */\nexport class Team {\n\n\t/**\n\t * @returns\n\t * Indicates the order (relative to other teams) in which this\n\t * team was to have all its members downed at the same time at\n\t * least once. Once a team is soft-eliminated, they can continue\n\t * playing as normal, but there is no going back. The game ends\n\t * when all teams but one have been eliminated.\n\t *\n\t * ### Semantics\n\t *\n\t * A comparatively smaller value denotes having been\n\t * eliminated at an earlier point in the game. **The value zero\n\t * denotes _not-having-been-eliminated-yet_**.\n\t */\n\tpublic elimOrder: number = Team.ElimOrder.STANDING;\n\n\tpublic constructor(\n\t\tpublic readonly id: Team.Id,\n\t\tpublic readonly members: readonly Player[],\n\t) {\n\t\tJsUtils.propNoWrite(this as Team, \"id\", \"members\");\n\t\tObject.seal(this); //🧊\n\t\tif (members.length === 0) {\n\t\t\tthrow new Error(\"Teams must have at least one member.\");\n\t\t}\n\n\t}\n\n\tpublic reset(): void {\n\t\tthis.elimOrder = Team.ElimOrder.STANDING;\n\t}\n}\nexport namespace Team {\n\n\texport type Id = number;\n\n\texport type ElimOrder = number;\n\n\t// Special values:\n\texport namespace ElimOrder {\n\t\t/**\n\t\t * A team that is not invincible starts off with such a value.\n\t\t */\n\t\texport const STANDING = 0;\n\t}\n}\nObject.freeze(Team);\nObject.freeze(Team.prototype);","import type * as WebSocket from \"ws\";\nimport { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\n\nimport type { Coord }       from \":floor/Tile\";\nimport type { RobotPlayer } from \"./RobotPlayer\";\nimport type { GameMirror }  from \":game/gameparts/GameMirror\";\n\nimport { RequestBuffer } from \"./RequestBuffer\";\nimport { Player as _Player } from \":defs/TypeDefs\";\nimport { Team } from \"./Team\";\n\n/** */\nexport class Player extends _Player implements _Player.UserInfo {\n\n\tpublic readonly playerId: Player.Id;\n\tpublic readonly familyId: Player.Family;\n\tpublic readonly teamId:   Team.Id;\n\tpublic readonly username: Player.Username;\n\tpublic readonly avatar:   Player.Avatar;\n\n\tprotected readonly game: GameMirror<any>;\n\tpublic readonly reqBuffer: RequestBuffer;\n\t#coord: Coord;\n\t#boosts = 0.0;\n\n\tpublic prevCoord: Coord = undefined!;\n\n\tpublic get team(): Team        { return this.game.teams[this.teamId]!; }\n\tpublic get coord(): Coord      { return this.#coord; }\n\tpublic get boosts(): number    { return this.#boosts; }\n\tpublic get isDowned(): boolean { return this.boosts < 0.0; } // TODO.design decouple from boost.\n\n\tpublic isTeamedWith(other: Player): boolean {\n\t\treturn this.team.members.includes(other);\n\t}\n\n\t/** */\n\tpublic constructor(game: GameMirror<any>, desc: Player.CtorArgs) {\n\t\tsuper();\n\n\t\tthis.playerId = desc.playerId;\n\t\tthis.familyId = desc.familyId;\n\t\tthis.teamId   = desc.teamId;\n\t\tthis.username = desc.username;\n\t\tthis.avatar   = desc.avatar;\n\n\t\tthis.game = game;\n\t\tthis.reqBuffer = new RequestBuffer();\n\n\t\tJsUtils.instNoEnum (this as Player, \"game\");\n\t\tJsUtils.propNoWrite(this as Player, \"game\",\n\t\t\t\"playerId\", \"familyId\", \"teamId\",\n\t\t\t\"username\", \"avatar\", \"reqBuffer\",\n\t\t);\n\t\tif (new.target === Player) {\n\t\t\tObject.seal(this); //🧊\n\t\t}\n\t}\n\n\t/** @virtual */\n\tpublic _onTeamsBootstrapped(): void { void 0; }\n\n\t/** Must be called _after_ the grid has been reset. */\n\tpublic reset(coord: Coord): void {\n\t\tthis.#coord = coord;\n\t\tthis.prevCoord = coord;\n\t\tthis.game.grid.moveEntity(this.playerId, coord, coord);\n\t\tthis.#boosts = 0.0;\n\t\tthis.reqBuffer.reset(coord);\n\t}\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGamePlaying(): void { void 0; }\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGamePaused(): void { void 0; }\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGameOver(): void { void 0; }\n\n\t/** @final */\n\tprotected makeMovementRequest(dest: Coord, type: Player.MoveType): void {\n\t\tif (DEF.DevAssert) {\n\t\t\tif (this.game.status !== Game.Status.PLAYING) {\n\t\t\t\t// This is not a necessary precondition, but we're doing it anyway.\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t}\n\t\tif (this.reqBuffer.isFull) return; //⚡\n\n\t\tthis.game.requestStateChange(this.reqBuffer.signRequest({\n\t\t\tauthor: this.playerId,\n\t\t\tlastRejectId: this.reqBuffer.lastRejectId,\n\t\t\tmoveType: type,\n\t\t\tmoveDest: dest,\n\t\t}));\n\t}\n\n\t/**\n\t * Notify this Player.\n\t *\n\t * Causes this Player to update its internal state.\n\t * @virtual\n\t */\n\tpublic _setCoord(dest: Coord): void {\n\t\tthis.prevCoord = this.coord;\n\t\tthis.#coord = dest;\n\t}\n\n\tpublic set boosts(newHealth: number) {\n\t\tconst oldIsDowned = this.isDowned;\n\t\tthis.#boosts = newHealth;\n\n\t\tif (oldIsDowned || !this.isDowned) return;\n\t\tconst team  = this.team;\n\t\tconst teams = this.game.teams;\n\t\tif (team.elimOrder !== Team.ElimOrder.STANDING) {\n\t\t\treturn;\n\t\t}\n\t\t// Right before this downing event, the team has not been\n\t\t// soft-eliminated yet, but it might be now. Check it:\n\t\tif (team.members.every((player) => player.isDowned)) {\n\t\t\t// All players are downed! The team is now eliminated:\n\t\t\tconst numNonStandingTeams\n\t\t\t\t= 1 + teams.filter((team) => {\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\n\t\t\t}).length;\n\n\t\t\tteam.elimOrder = 1 + teams.filter((team) => {\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\n\t\t\t}).length;\n\t\t\t// Now that a team is newly-eliminated, check if the\n\t\t\t// game should end:\n\t\t\tif (numNonStandingTeams === teams.length) {\n\t\t\t\tthis.game.statusBecomeOver();\n\t\t\t}\n\t\t}\n\t}\n}\nexport namespace Player {\n\n\texport type Family = _Player.Family;\n\texport type RobotFamily = TU.Xcld<Player.Family, \"HUMAN\">;\n\n\texport type Id = _Player.Id;\n\n\texport type Username = _Player.Username;\n\texport type Avatar   = _Player.Avatar;\n\texport type UserInfo = _Player.UserInfo;\n\n\t/** @enum */\n\texport type MoveType = keyof typeof MoveType;\n\texport const MoveType = Object.freeze(<const>{\n\t\tNORMAL: \"NORMAL\",\n\t\tBOOST:  \"BOOST\",\n\t});\n\tMoveType as { [ key in MoveType ]: key };\n\n\t/** */\n\texport type Changes = {\n\t\treadonly coord?: Coord,\n\t\treadonly boosts: number,\n\t};\n\n\t/**\n\t * Player Constructor Arguments\n\t */\n\texport type CtorArgs = _CtorArgs[Player.Family];\n\texport type _CtorArgs = {\n\t\t[F in Player.Family]: _PreIdAssignmentDict[F] & Readonly<{\n\t\t\tplayerId: Player.Id;\n\t\t}>;\n\t};\n\n\ttype _PreIdAssignmentDict = {\n\t\t[F in Player.Family]: UserInfo & ({\n\t\t\treadonly familyId: F;\n\t\t}) & (\n\t\t\tF extends typeof Player.Family.HUMAN\n\t\t\t\t? { readonly socket: WebSocket | undefined; }\n\t\t\t\t: { readonly familyArgs: RobotPlayer.FamilySpecificPart[Exclude<F, \"HUMAN\">]; }\n\t\t);\n\t};\n\n\texport namespace CtorArgs {\n\n\t\texport type UnFin = _PreIdAssignmentDict[Player.Family];\n\n\t\t/**\n\t\t * Mutates the game descriptor to finalize the players field.\n\t\t *\n\t\t * Squashes teamId fields to be suitable for array indices.\n\t\t */\n\t\texport function finalize<S extends Coord.System>(\n\t\t\tgameDesc: Game.CtorArgs.UnFin<S>,\n\t\t): asserts gameDesc is Game.CtorArgs<S>\n\t\t{\n\t\t\t// Map team ID's to consecutive numbers\n\t\t\t// (to play nice with array representations):\n\t\t\tconst teamIdCleaner: readonly Team.Id[]\n\t\t\t\t= Array.from(new Set(gameDesc.players.map((p) => p.teamId)))\n\t\t\t\t.seal().sort((a, b) => a - b) // This is not a representation requirement.\n\t\t\t\t.freeze().reduce((prev, originalId, squashedId) => {\n\t\t\t\t\tprev[originalId] = squashedId;\n\t\t\t\t\treturn prev;\n\t\t\t\t}, [] as Array<Team.Id>);\n\n\t\t\t// @ts-expect-error : RO=\n\t\t\tgameDesc.players\n\t\t\t\t= gameDesc.players.slice()\n\t\t\t\t.seal().sort((a,b) => teamIdCleaner[a.teamId]! - teamIdCleaner[b.teamId]!)\n\t\t\t\t.freeze().map<CtorArgs>((p, index) => { return { ...p,\n\t\t\t\t\tplayerId: index,\n\t\t\t\t\tteamId:   teamIdCleaner[p.teamId]!,\n\t\t\t\t\tavatar:   p.avatar ?? Player.Avatar.GET_RANDOM(),\n\t\t\t\t};})\n\t\t\t\t.freeze();\n\t\t}\n\t}\n\tObject.freeze(CtorArgs);\n}\nJsUtils.protoNoEnum(Player,\n\t\"onGamePlaying\", \"onGamePaused\", \"onGameOver\",\n\t\"_onTeamsBootstrapped\",\n);\nObject.freeze(Player);\nObject.freeze(Player.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport { Player } from \"../player/Player\";\n\n\n/**\n * Information about each Player's scores and statistics since the\n * last Game reset. This is separated from Player instances since\n * non-GameManagers have no need to maintain such records throughout\n * the game.\n *\n * @final\n */\nexport class ScoreInfo {\n\n\t/**\n\t * A map from player ID's to information about their scores.\n\t */\n\tpublic readonly entries: readonly ScoreInfo.Entry[];\n\n\tpublic constructor(playerIds: readonly Player.Id[]) {\n\t\tconst entries: Array<ScoreInfo.Entry> = [];\n\t\tfor (const id of playerIds) {\n\t\t\tentries[id] = new ScoreInfo.Entry();\n\t\t}\n\t\tthis.entries = entries;\n\t\tJsUtils.propNoWrite(this as ScoreInfo, \"entries\");\n\t\tObject.seal(this); //🧊\n\t}\n\n\tpublic reset(): void {\n\t\tfor (const entry of this.entries) {\n\t\t\tentry.reset();\n\t\t}\n\t}\n}\nexport namespace ScoreInfo {\n\t/**\n\t */\n\texport class Entry {\n\n\t\tpublic readonly moveCounts: {[M in Player.MoveType]: number};\n\n\t\t// TODO.design how to send this info to the game manager?\n\t\t// It is currently checked on the client side.\n\t\t//public invalidKeyPresses\n\n\t\tpublic constructor() {\n\t\t\tthis.moveCounts = {} as any; // This will be initialized during reset.\n\t\t}\n\n\t\tpublic reset(): void {\n\t\t\t(Object.getOwnPropertyNames(Player.MoveType) as\n\t\t\t\tArray<Player.MoveType>).forEach((key) => {\n\t\t\t\tthis.moveCounts[key] = 0;\n\t\t\t});\n\t\t}\n\t}\n\tObject.freeze(Entry);\n\tObject.freeze(Entry.prototype);\n}\nObject.freeze(ScoreInfo);\nObject.freeze(ScoreInfo.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord, Tile } from \"./Tile\";\nimport type { Player } from \":defs/TypeDefs\";\n\nimport type { WrappedEuclid2 } from \"./impl/Euclid2/System\";\nimport type { Beehive } from \"./impl/Beehive/System\";\n\n/**\n * A Collection of Tiles.\n */\nexport abstract class Grid<S extends Coord.System> {\n\n\t// A type-annotated alias to this.constructor.\n\tpublic readonly static: Grid.ClassIf<S>;\n\n\tpublic readonly dimensions: Grid.Dimensions[S];\n\n\tpublic readonly area: number;\n\n\t/**\n\t * Protected. See `Grid.getImplementation` for how to access class\n\t * literals for construction.\n\t */\n\tprotected constructor(desc: Grid.CtorArgs<S>) {\n\t\tObject.freeze(desc);\n\t\tthis.static = desc.Grid;\n\t\tthis.dimensions = desc.dimensions;\n\t\tthis.area = desc.Grid.getArea(desc.dimensions);\n\t\tJsUtils.propNoWrite(this as Grid<S>, \"static\", \"dimensions\");\n\t}\n\n\t/** @virtual */\n\tpublic reset(): void {\n\t\tthis.forEach((tile) => {\n\t\t\tthis.write(tile.coord, {\n\t\t\t\tchar: \"\", seq: \"\",\n\t\t\t});\n\t\t});\n\t}\n\n\t/** */\n\tpublic abstract write(coord: Coord, changes: Tile.Changes): void;\n\n\t/** */\n\tpublic abstract moveEntity(entityId: Player.Id, from: Coord, to: Coord): void;\n\n\t/**\n\t * For BaseGame's implementation of SER/DES to work, the traversal\n\t * order taken by an implementation of this method must depend\n\t * only on the dimensions of the instance. The index is not required\n\t * to equal the tile's coord.\n\t */\n\tpublic abstract forEach(callback: (tile: Tile, index: number) => void): void;\n\n\tpublic abstract forEachShuffled(callback: (tile: Tile, index: number) => void): void;\n\n\t/**\n\t * @returns\n\t * One of the closest unoccupied neighbouring tiles toward the\n\t * direction of `intendedDest`. When possible, ties are encouraged\n\t * to be broken in such a way that imitates movement in a straight\n\t * path (visually speaking).\n\t *\n\t * **Important:** If All destinations from sourceCoord are occupied\n\t * (which includes `sourceCoord` itself), the implementation must\n\t * return `sourceCoord`.\n\t *\n\t * @param intendedDest\n\t *\n\t * @param sourceCoord\n\t * The coordinate from which to find the next hop.\n\t */\n\tpublic abstract getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord;\n\n\t/**\n\t * The opposite of `getUntToward`.\n\t *\n\t * Behaviour is undefined when both arguments are the same.\n\t */\n\tpublic abstract getUntAwayFrom(avoidCoord: Coord, sourceCoord: Coord): Coord;\n\n\t/**\n\t * The returned array should be assumed to contain shallow copies\n\t * of the corresponding Tile objects.\n\t *\n\t * This action is commonly performed by the GameManager when\n\t * shuffling in new CSP's to its grid.\n\t *\n\t * Implementations with wrapping edges must make sure that the\n\t * return value does not contain duplicate tile entries.\n\t *\n\t * @virtual\n\t * Grid implementations are encouraged to override this if they\n\t * have a more efficient way to produce the same result.\n\t */\n\tpublic getAllAltDestsThan(origin: Coord): readonly Tile[] {\n\t\tconst dests = new Map<Coord,Tile>();\n\t\tthis.tileSourcesTo(origin)\n\t\t.flatMap((srcToOrigin) => this.tileDestsFrom(srcToOrigin.coord))\n\t\t.forEach((dest) => {\n\t\t\tif (!dests.has(dest.coord)) { dests.set(dest.coord, dest); }\n\t\t});\n\t\treturn Array.from(dests.values()).freeze();\n\t}\n\n\tpublic getRandomCoord(): Coord {\n\t\treturn this.static.getRandomCoord(this.dimensions);\n\t}\n\n\t/**\n\t * A coord that is at most `radius` movements away from `origin`.\n\t * The returned value does not necessarily need to be within this\n\t * grid's dimensions as long as the returned coordinate can be\n\t * meaningfully truncated by `getUntToward` when passing `origin`\n\t * as the `sourceCoord` argument.\n\t *\n\t * The returned value should follow a uniform distribution.\n\t */\n\tpublic abstract getRandomCoordAround(origin: Coord, radius: number): Coord;\n\n\t/** */\n\tpublic abstract isOccupied(coord: Coord): boolean;\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileAt(coord: Coord): Tile;\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileDestsFrom(coord: Coord): readonly Tile[];\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileSourcesTo(coord: Coord): readonly Tile[];\n\n\t/**\n\t * The returned value must be consistent with results from the\n\t * methods `_getTileDestsFrom` and `_getTileSourcesTo`.\n\t */\n\tpublic abstract dist(source: Coord, dest: Coord): number;\n\n\t/**\n\t * @virtual\n\t * Implementations are free to override this to spawn players in\n\t * pretty patterns.\n\t */\n\tpublic static getSpawnCoords(\n\t\tteamSizes: readonly number[],\n\t\tdimensions: Grid.Dimensions[Coord.System],\n\t): readonly (readonly Coord[])[] {\n\t\tconst avoidSet = new Set<Coord>();\n\t\treturn teamSizes.map((numMembers: number) => {\n\t\t\tconst teamSpawnCoords: Array<Coord> = [];\n\t\t\twhile (numMembers > 0) {\n\t\t\t\tlet coord: Coord;\n\t\t\t\tdo {\n\t\t\t\t\tcoord = (this as unknown as Grid.ClassIf<any>).getRandomCoord(dimensions);\n\t\t\t\t} while (avoidSet.has(coord));\n\t\t\t\tteamSpawnCoords.push(coord);\n\t\t\t\tavoidSet.add(coord);\n\t\t\t\tnumMembers--;\n\t\t\t}\n\t\t\treturn teamSpawnCoords.freeze();\n\t\t}).freeze();\n\t}\n}\nexport namespace Grid {\n\n\t/** */\n\texport interface Dimensions {\n\t\t[Coord.System.W_EUCLID2]: WrappedEuclid2.Grid.Dimensions;\n\t\t[Coord.System.BEEHIVE]: Beehive.Grid.Dimensions;\n\t}\n\n\t// ==============================================================\n\t// Note: The below exports do not require any modifications with\n\t// the additions of new coordinate systems.\n\t// ==============================================================\n\n\texport type CtorArgs<S extends Coord.System> = Readonly<{\n\t\tGrid: Grid.ClassIf<S>;\n\t\tsystem: S;\n\t\tdimensions: Dimensions[S];\n\t\tlangCharFontScaling: number;\n\t\tplayers: readonly Player.UserInfo[];\n\t}>;\n\n\t/** Used to simulate abstract static methods. */\n\texport interface ClassIf<S extends Coord.System> {\n\n\t\t/** Constructor */\n\t\tnew(desc: CtorArgs<S>): Grid<S>;\n\n\t\t/**\n\t\t * @returns\n\t\t * The minimum number of leaf nodes a language must have to be\n\t\t * playable with this coordinate system's grid.\n\t\t *\n\t\t * Definition: The maximum possible number- for any tile in the\n\t\t * grid- of all destinations from sources to itself, excluding\n\t\t * itself.\n\t\t */\n\t\tambiguityThreshold: number;\n\n\t\t/** @see Grid.DimensionBounds */\n\t\tsizeLimits: Grid.DimensionBounds<S>;\n\n\t\t/**\n\t\t * @returns\n\t\t * The number of Tiles that could fit in a Grid of such bounds.\n\t\t */\n\t\tgetArea(bounds: Dimensions[S]): number;\n\n\t\t/**\n\t\t * \\*Assuming the grid is lattice-like and is partitioned into\n\t\t * highly similar patches where each patch has a center, and\n\t\t * all tiles in the patch are closer to that center tile than\n\t\t * to any other patch's center tile. Returns the minimum number\n\t\t * of tiles that must be visited to get from the center of one\n\t\t * patch to any neighbouring patch.\n\t\t */\n\t\tgetLatticePatchDiameter(area: number): number;\n\n\t\t/**\n\t\t * @returns\n\t\t * A coordinate with random, integer-valued fields within the\n\t\t * specified upper limits\n\t\t */\n\t\tgetRandomCoord(bounds: Dimensions[S]): Coord;\n\n\t\t/**\n\t\t * Return values do not need to be the same for repeated calls\n\t\t * with identical arguments. None of the returned coordinates\n\t\t * should be the same.\n\t\t */\n\t\tgetSpawnCoords(\n\t\t\tteamSizes: readonly number[],\n\t\t\tdimensions: Dimensions[S],\n\t\t): readonly (readonly Coord[])[];\n\t}\n\n\t// Each implementation must register itself into this dictionary.\n\t// See CmapManager.ts.\n\texport const _Constructors: { readonly [S in Coord.System]: Grid.ClassIf<S> } = {\n\t\t// These are initialized later to avoid bootstrapping issues.\n\t\t[\"W_EUCLID2\"]: undefined!,\n\t\t[\"BEEHIVE\"]: undefined!,\n\t};\n\n\t/**\n\t * @returns\n\t * A Grid class for the specified coordinate system.\n\t */\n\texport const getImplementation = <S extends Coord.System>(coordSys: S): ClassIf<S> => {\n\t\t// Note: At the time of writing this, separating this into\n\t\t// two lines is necessary (otherwise Typescript will feel\n\t\t// overwhelmed)\n\t\tconst ctor = _Constructors[coordSys];\n\t\treturn ctor as unknown as ClassIf<S>;\n\t};\n\n\t/**\n\t * Bounds are inclusive. Ie. the specified values are _just_ allowed.\n\t *\n\t * Upper and lower bounds must be strictly positive integer values.\n\t */\n\texport type DimensionBounds<S extends Coord.System> = {\n\t\t[P in keyof Dimensions[S]]: {\n\t\t\treadonly min: number;\n\t\t\treadonly max: number;\n\t\t};\n\t};\n}\n// Grid gets frozen in PostInit after _Constructors get initialized.\nObject.freeze(Grid);\nObject.freeze(Grid.prototype);","import { JsUtils} from \":defs/JsUtils\";\nimport { Game } from \"../Game\";\nimport { Lang } from \":lang/Lang\";\n\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { StateChange } from \"../StateChange\";\nimport type { Grid } from \":floor/Grid\";\nimport type { OperatorPlayer } from \"../player/OperatorPlayer\";\n\nimport { Player } from \"../player/Player\";\nimport { Team } from \"../player/Team\";\n\n/** */\nexport abstract class GameMirror<S extends Coord.System = Coord.System> {\n\n\tpublic readonly grid: Grid<S>;\n\treadonly #onGameBecomeOver: () => void;\n\n\tpublic readonly players: readonly Player[];\n\tpublic readonly operators: readonly OperatorPlayer[];\n\t#currentOperator: OperatorPlayer;\n\t/** Indexable by team ID's. */\n\tpublic readonly teams: readonly Team[];\n\n\t#status: Game.Status;\n\n\t/** */\n\tpublic constructor(args: {\n\t\treadonly impl: Game.ImplArgs,\n\t\treadonly desc: Game.CtorArgs<S>,\n\t\treadonly operatorIds: readonly Player.Id[],\n\t}) {\n\t\tconst { impl, desc, operatorIds } = args;\n\t\tObject.freeze(desc);\n\t\tObject.freeze(desc.players);\n\t\tdesc.players.forEach((desc) => Object.freeze(desc));\n\t\tObject.freeze(operatorIds);\n\n\t\tconst langDesc = Lang.GetDesc(args.desc.langId);\n\t\tconst gridClass = impl.gridClassLookup(desc.coordSys);\n\t\tthis.grid = new (gridClass)({\n\t\t\tGrid: gridClass,\n\t\t\tsystem: desc.coordSys,\n\t\t\tdimensions: desc.gridDimensions,\n\t\t\tlangCharFontScaling: langDesc.fontScaling,\n\t\t\tplayers: desc.players,\n\t\t}) as GameMirror<S>[\"grid\"];\n\n\t\tthis.#onGameBecomeOver = impl.onGameBecomeOver;\n\n\t\t// Construct players:\n\t\tconst players  = this._createPlayers(desc, impl, operatorIds, langDesc);\n\t\tthis.players   = players.players;\n\t\tthis.operators = players.operators;\n\t\t{\n\t\t\tconst teams: Player[][] = [];\n\t\t\tthis.players.forEach((player) => {\n\t\t\t\tif (!teams[player.teamId]) {\n\t\t\t\t\tteams[player.teamId] = [];\n\t\t\t\t}\n\t\t\t\tteams[player.teamId]!.push(player);\n\t\t\t});\n\t\t\tthis.teams = teams.map((teammateArray, teamId) => {\n\t\t\t\treturn new Team(teamId, teammateArray);\n\t\t\t});\n\t\t}\n\t\tJsUtils.propNoWrite(this as GameMirror<S>,\n\t\t\t\"grid\", \"players\", \"operators\", \"teams\",\n\t\t);\n\t\tthis.players.forEach((player) => player._onTeamsBootstrapped());\n\t\tthis.setCurrentOperator(0);\n\t}\n\n\t/** */\n\tpublic reset(): void {\n\t\tthis.grid.reset();\n\n\t\t// We must reset status to PAUSED to pass a state-transition\n\t\t// assertion when changing status later to PLAYING.\n\t\tthis.#status = Game.Status.PAUSED;\n\t}\n\n\n\t/** Helper for the constructor. */\n\tprivate _createPlayers(\n\t\tgameDesc: Game.CtorArgs<S>,\n\t\timplArgs: Game.ImplArgs,\n\t\toperatorIds: readonly Player.Id[],\n\t\tlangDesc: Lang.Desc,\n\t): {\n\t\tplayers: readonly Player[],\n\t\toperators: readonly OperatorPlayer[],\n\t} {\n\t\tconst players = gameDesc.players.map((pDesc) => {\n\t\t\tif (pDesc.familyId === Player.Family.HUMAN) {\n\t\t\t\treturn (operatorIds.includes(pDesc.playerId))\n\t\t\t\t\t? new implArgs.OperatorPlayer!(this, pDesc, langDesc)\n\t\t\t\t\t: new Player(this, pDesc);\n\t\t\t} else {\n\t\t\t\treturn implArgs.RobotPlayer(\n\t\t\t\t\tthis as GameMirror<any>,\n\t\t\t\t\tpDesc,\n\t\t\t\t);\n\t\t\t}\n\t\t}).freeze();\n\t\treturn Object.freeze({\n\t\t\tplayers,\n\t\t\toperators: operatorIds.map((playerId) => players[playerId] as OperatorPlayer).freeze(),\n\t\t});\n\t}\n\n\t/** @final */\n\tpublic deserializeResetState(ser: Game.ResetSer): void {\n\t\tJsUtils.deepFreeze(ser);\n\n\t\tthis.grid.forEach((tile, index) => {\n\t\t\tthis.grid.write(tile.coord, ser.csps[index]!);\n\t\t});\n\t\tser.playerCoords.forEach((coord, playerId) => {\n\t\t\tthis.players[playerId]!.reset(coord);\n\t\t});\n\t}\n\n\tpublic get currentOperator(): OperatorPlayer {\n\t\treturn this.#currentOperator;\n\t}\n\tpublic setCurrentOperator(nextOperatorIndex: number): void {\n\t\tconst nextOperator = this.operators[nextOperatorIndex]!;\n\t\tif (!DEF.DevAssert && nextOperator === undefined) { throw new Error(\"never\"); }\n\t\tif (this.currentOperator !== nextOperator) {\n\t\t\tthis.#currentOperator = nextOperator;\n\t\t}\n\t}\n\n\n\tpublic get status(): Game.Status {\n\t\treturn this.#status;\n\t}\n\n\t/**\n\t * On the client side, this should only be accessed through a\n\t * wrapper function that also makes UI-related changes.\n\t *\n\t * If the game is already playing, this does nothing.\n\t */\n\tpublic statusBecomePlaying(): void {\n\t\tif (this.status === Game.Status.PLAYING) {\n\t\t\tconsole.info(\"[statusBecomePlaying]: Game is already playing\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.status !== Game.Status.PAUSED) {\n\t\t\tthrow new Error(\"Can only resume a game that is currently paused.\");\n\t\t}\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGamePlaying();\n\t\t});\n\t\tthis.#status = Game.Status.PLAYING;\n\t}\n\n\t/**\n\t * On the client side, this should only be accessed through a\n\t * wrapper function that also makes UI-related changes.\n\t *\n\t * If the game is already paused, this does nothing.\n\t */\n\tpublic statusBecomePaused(): void {\n\t\tif (this.status === Game.Status.PAUSED) {\n\t\t\tconsole.info(\"[statusBecomePaused]: Game is already paused\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.status === Game.Status.OVER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGamePaused();\n\t\t});\n\t\tthis.#status = Game.Status.PAUSED;\n\t}\n\n\t/**\n\t * This should be called when all teams have been eliminated.\n\t * A team becomes (and subsequently and unconditionally stays)\n\t * eliminated when all their members are in a downed state at\n\t * the same time.\n\t *\n\t * This should not be controllable by UI input elements. Instead,\n\t * The UI layer can pass a callback to the constructor.\n\t */\n\tpublic statusBecomeOver(): void {\n\t\tif (this.status === Game.Status.OVER) return;\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGameOver();\n\t\t});\n\t\tthis.#status = Game.Status.OVER;\n\t\tthis.#onGameBecomeOver();\n\t\tconsole.info(\"game is over!\");\n\t}\n\n\t/**\n\t * Must eventually result in a call to commitStateChange.\n\t * Crosses the network boundary for online games.\n\t */\n\tpublic abstract requestStateChange(desc: StateChange.Req, authorSock?: any): void;\n\n\t/** @virtual */\n\tprotected commitTileMods(coord: Coord, changes: Tile.Changes): void {\n\t\t// JsUtils.deepFreeze(changes); // <- already done by caller.\n\t\tif (changes.seq !== undefined) {\n\t\t\tconst sources = this.grid.tileSourcesTo(coord);\n\t\t\tthis.operators.forEach((op) => {\n\t\t\t\t// Refresh the operator's `seqBuffer` (maintain invariant) for new CSP:\n\t\t\t\tif (sources.some((src) => src.coord === op.coord)) {\n\t\t\t\t\top.seqBufferAcceptKey(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.grid.write(coord, changes);\n\t}\n\n\t/** @virtual */\n\tprotected commitStateChange(desc: StateChange.Res, authorSock?: WebSocket): void {\n\t\tJsUtils.deepFreeze(desc);\n\t\tconst author = this.players[desc.author]!;\n\n\t\tif (desc.rejectId !== undefined) {\n\t\t\tauthor.reqBuffer.reject(desc.rejectId, author.coord);\n\t\t\treturn; //⚡\n\t\t}\n\t\tauthor.reqBuffer.acceptOldest();\n\n\t\tfor (const [coord, changes] of Object.entries(desc.tiles).freeze()) {\n\t\t\tthis.commitTileMods(parseInt(coord), changes);\n\t\t}\n\t\tfor (const [pid, changes] of Object.entries(desc.players).freeze()) {\n\t\t\tconst p = this.players[parseInt(pid)]!;\n\t\t\tp.boosts = changes.boosts;\n\n\t\t\tif (changes.coord !== undefined) {\n\t\t\t\tconst prevCoord = p.coord;\n\t\t\t\t// note: the order of the below lines does not matter.\n\t\t\t\tthis.grid.moveEntity(p.playerId, prevCoord, changes.coord);\n\t\t\t\tp._setCoord(changes.coord);\n\t\t\t}\n\t\t}\n\t}\n}\nJsUtils.protoNoEnum(GameMirror, \"_createPlayers\");\nObject.freeze(GameMirror);\nObject.freeze(GameMirror.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord as BaseCoord, Coord, Tile } from \":floor/Tile\";\nimport type { Player } from \":defs/TypeDefs\";\nimport { Grid as AbstractGrid } from \":floor/Grid\";\ntype S = BaseCoord.System.W_EUCLID2;\n\nexport type Dim = {\n\treadonly height: number,\n\treadonly width:  number,\n};\n\n/**\n * Euclid2 Internal Augmented Coord\n *\n * Immutable.\n */\nexport class IAC {\n\tpublic constructor(\n\t\tpublic readonly x: number,\n\t\tpublic readonly y: number,\n\t) {\n\t\tObject.freeze(this);\n\t}\n\tpublic static from(dimensions: Dim, coord: Coord): IAC {\n\t\treturn new IAC(coord % dimensions.width, Math.floor(coord / dimensions.width));\n\t}\n\tpublic toCoord(dimensions: Dim): Coord {\n\t\treturn (this.y * dimensions.width) + this.x;\n\t}\n\n\tpublic static distX(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = Math.abs(i1.x - i2.x);\n\t\treturn (dx < dim.width / 2) ? dx : (dim.width - dx);\n\t}\n\tpublic static distY(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dy = Math.abs(i1.y - i2.y);\n\t\treturn (dy < dim.height / 2) ? dy : (dim.height - dy);\n\t}\n\tpublic static oneNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn dx + dy;\n\t}\n\tpublic static infNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn Math.max(dx, dy);\n\t}\n\t/** Returns wrapping information as signums. */\n\tpublic static wrapInfo(dim: Dim, from: IAC.Bare, to: IAC.Bare): IAC.Bare {\n\t\treturn Object.freeze({\n\t\t\tx: (Math.abs(to.x - from.x) < dim.width  / 2) ? 0 : (to.x < from.x) ? -1 : 1,\n\t\t\ty: (Math.abs(to.y - from.y) < dim.height / 2) ? 0 : (to.y < from.y) ? -1 : 1,\n\t\t});\n\t}\n\t/**\n\t * @returns\n\t * A number in the range (0, 1). `One` means the x and y\n\t * coordinates align to the x or y axis, and `Zero` means they\n\t * are 45 degrees from the x or y axis.\n\t *\n\t * ```latex\n\t * \\frac{\\left|\\left|x\\right|-\\left|y\\right|\\right|}{\\left|x\\right|+\\left|y\\right|}=a\n\t * ```\n\t */\n\tpublic static axialAlignment(dim: Dim, _i1: Coord, _i2: Coord): number {\n\t\tconst i1 = IAC.from(dim, _i1), i2 = IAC.from(dim, _i2);\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn (Math.abs(dx - dy)) / (dx + dy);\n\t}\n\n\tpublic add(other: IAC.Bare): IAC {\n\t\treturn new IAC(\n\t\t\tthis.x + other.x,\n\t\t\tthis.y + other.y,\n\t\t);\n\t}\n\tpublic sub(other: IAC.Bare): IAC {\n\t\treturn new IAC(\n\t\t\tthis.x - other.x,\n\t\t\tthis.y - other.y,\n\t\t);\n\t}\n\tpublic iSub(other: IAC.Bare): IAC {\n\t\treturn this.add(this.sub(other));\n\t}\n\tpublic mul(scalar: number): IAC {\n\t\treturn new IAC(\n\t\t\tscalar * this.x,\n\t\t\tscalar * this.y,\n\t\t);\n\t}\n\tpublic mod(dim: Dim): IAC {\n\t\tlet {x,y} = this;\n\t\twhile (x < 0) x += dim.width;\n\t\twhile (y < 0) y += dim.height;\n\t\tx %= dim.width;\n\t\ty %= dim.height;\n\t\treturn new IAC(x,y);\n\t}\n}\nexport namespace IAC {\n\texport type Bare = {\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t};\n}\nObject.freeze(IAC);\nObject.freeze(IAC.prototype);\n\n\n/**\n * Edges are wrapped.\n */\nexport namespace WrappedEuclid2 {\n\n\t/**\n\t * Euclid2 Grid\n\t */\n\texport class Grid extends AbstractGrid<S> {\n\n\t\tpublic static ambiguityThreshold = 24;\n\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = JsUtils.deepFreeze({\n\t\t\theight: { min: 5, max: 51 },\n\t\t\twidth:  { min: 5, max: 51 },\n\t\t});\n\n\t\tprivate readonly _grid: SealedArray<Tile>;\n\t\treadonly #occ: Uint8Array;\n\n\t\tprotected readonly iacCache: readonly IAC[];\n\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\n\t\t\tsuper(desc);\n\n\t\t\tthis.#occ = new Uint8Array(this.area);\n\t\t\tconst grid: Tile[] = [];\n\t\t\tfor (let y = 0; y < this.dimensions.height; y++) {\n\t\t\t\tfor (let x = 0; x < this.dimensions.width; x++) {\n\t\t\t\t\tgrid.push({ coord: (y * this.dimensions.width) + x, seq: \"\" });\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._grid = grid.seal();\n\n\t\t\tconst iacCache = [];\n\t\t\tfor (let y = 0; y < desc.dimensions.height; y++) {\n\t\t\t\tfor (let x = 0; x < desc.dimensions.width; x++) {\n\t\t\t\t\tiacCache.push(new IAC(x,y));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.iacCache = iacCache.freeze();\n\t\t\tJsUtils.instNoEnum(this as Grid, \"iacCache\");\n\t\t\tJsUtils.propNoWrite(this as Grid, \"_grid\", \"iacCache\");\n\t\t\tif (new.target === Grid) {\n\t\t\t\tObject.seal(this); //🧊\n\t\t\t}\n\t\t}\n\n\t\tpublic reset(): void {\n\t\t\tsuper.reset();\n\t\t\tthis.#occ.fill(0);\n\t\t}\n\n\t\tpublic write(coord: Coord, changes: Tile.Changes): void {\n\t\t\tthis._grid[coord] = Object.freeze(Object.assign(\n\t\t\t\t{}, this._grid[coord], changes,\n\t\t\t));\n\t\t}\n\n\t\tpublic moveEntity(entityId: Player.Id, from: Coord, to: Coord): void {\n\t\t\tthis.#occ[from] = 0;\n\t\t\tthis.#occ[to] = 1;\n\t\t}\n\n\t\tpublic forEach(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tfor (let i = 0; i < this.area; i++) {\n\t\t\t\tconsumer(this._grid[i]!, i);\n\t\t\t}\n\t\t}\n\t\tpublic forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tconst indices = new Uint16Array(this.area);\n\t\t\tfor (let i = 0; i < this.area; i++) {\n\t\t\t\tindices[i] = i;\n\t\t\t}\n\t\t\tindices.sort(() => Math.random() - 0.5);\n\t\t\tfor (const index of indices) {\n\t\t\t\tconsumer(this._grid[index]!, index);\n\t\t\t}\n\t\t}\n\n\t\tpublic getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord {\n\t\t\tconst options = this.tileDestsFrom(sourceCoord)\n\t\t\t.filter((tile) => !this.isOccupied(tile.coord))\n\t\t\t.map((tile) => {\n\t\t\t\tconst tileIac = this.iacCache[tile.coord]!;\n\t\t\t\tconst destIac = this.iacCache[intendedDest]!;\n\t\t\t\treturn {\n\t\t\t\t\ttile, iac: tileIac,\n\t\t\t\t\tinfNorm: IAC.infNorm(this.dimensions, tileIac, destIac),\n\t\t\t\t\toneNorm: IAC.oneNorm(this.dimensions, tileIac, destIac),\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (options.length === 0) {\n\t\t\t\treturn sourceCoord;\n\t\t\t}\n\t\t\toptions.sort((ta, tb) =>  ta.infNorm - tb.infNorm);\n\t\t\toptions.length = 3;\n\t\t\toptions.sort((ta, tb) => ta.oneNorm - tb.oneNorm);\n\t\t\tconst best = options[0]!;\n\t\t\t// Filter out non-optimal options:\n\t\t\tfor (let i = 1; i < options.length; i++) {\n\t\t\t\tif (options[i]!.infNorm > best.infNorm) {\n\t\t\t\t\toptions.splice(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (options.length === 1) {\n\t\t\t\t// Minor optimization:\n\t\t\t\treturn best.tile.coord;\n\t\t\t}\n\t\t\t// Choose one of the most favourable using some randomness\n\t\t\t// weighted to follow a straight-looking path of movement.\n\t\t\tif (best.infNorm === best.oneNorm) {\n\t\t\t\t// (the axial option (if it exists) should be the first\n\t\t\t\t// due to the previous sort's tie-breaker.\n\t\t\t\tif (IAC.axialAlignment(this.dimensions, sourceCoord, intendedDest) > 0.5) {\n\t\t\t\t\t// The path is aligned more with the x or y axis than\n\t\t\t\t\t// it is with those axes rotated 45 degrees.\n\t\t\t\t\treturn best.tile.coord;\n\t\t\t\t} else {\n\t\t\t\t\t// Ignore the axial option in further computations:\n\t\t\t\t\toptions.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Choose a random non-axial option:\n\t\t\treturn options[Math.floor(options.length * Math.random())]!.tile.coord;\n\t\t}\n\t\tpublic getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Coord {\n\t\t\tconst avoid = this.iacCache[_avoidCoord]!;\n\t\t\tconst src = this.iacCache[_sourceCoord]!;\n\t\t\tconst dest = src.iSub(avoid).mod(this.dimensions);\n\t\t\treturn dest.toCoord(this.dimensions);\n\t\t}\n\n\t\tpublic getAllAltDestsThan(originCoord: Coord): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\n\t\t}\n\n\t\tpublic getRandomCoordAround(_origin: Coord, radius: number): Coord {\n\t\t\tconst origin = this.iacCache[_origin]!;\n\t\t\treturn new IAC(\n\t\t\t\torigin.x + Math.trunc(2 * radius * (Math.random() - 0.5)),\n\t\t\t\torigin.y + Math.trunc(2 * radius * (Math.random() - 0.5)),\n\t\t\t).mod(this.dimensions).toCoord(this.dimensions);\n\t\t}\n\n\t\tpublic dist(source: Coord, dest: Coord): number {\n\t\t\treturn IAC.infNorm(this.dimensions,\n\t\t\t\tthis.iacCache[source]!,\n\t\t\t\tthis.iacCache[dest]!,\n\t\t\t);\n\t\t}\n\n\t\tpublic isOccupied(coord: Coord): boolean {\n\t\t\treturn this.#occ[coord]! !== 0;\n\t\t}\n\t\tpublic tileAt(coord: Coord): Tile {\n\t\t\treturn this._grid[coord]!;\n\t\t}\n\t\tpublic tileDestsFrom(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\tconst iac = this.iacCache[coord]!;\n\t\t\tlet wrapX = false, wrapY = false;\n\t\t\tconst W = this.dimensions.width, H = this.dimensions.height;\n\t\t\tlet t = (iac.y - radius);    if (t < 0) { t += H; wrapY = true; }\n\t\t\tlet l = (iac.x - radius);    if (l < 0) { l += W; wrapX = true; }\n\t\t\tlet b = (iac.y + radius +1); if (b > H) { b -= H; wrapY = true; }\n\t\t\tlet r = (iac.x + radius +1); if (r > W) { r -= W; wrapX = true; }\n\t\t\t// ^Adjusted so that t and l can be treated as non-wrapped.\n\t\t\tconst dests: Array<Tile> = [];\n\t\t\tif (wrapX) {\n\t\t\t\tconst _t = t * W;\n\t\t\t\tdests.push(...this._grid.slice(_t, _t+r).freeze());\n\t\t\t\tif (wrapY) {\n\t\t\t\t\tdests.push(...this._grid.slice(0, r).freeze());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst b1 = wrapY ? H : b;\n\t\t\tconst sliceLength = (radius * 2) + 1;\n\t\t\tfor (let y = t; y < b1; y++) {\n\t\t\t\tconst begin = (y * W) + l;\n\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength).freeze());\n\t\t\t}\n\t\t\tif (wrapX && !wrapY && (b !== H)) { dests.length -= r; }\n\t\t\tif (wrapY) {\n\t\t\t\tfor (let y = 0; y < b; y++) {\n\t\t\t\t\tconst begin = (y * W) + l;\n\t\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength).freeze());\n\t\t\t\t}\n\t\t\t\tif (wrapX) { dests.length -= r; }\n\t\t\t}\n\t\t\t// TODO.impl use a set when radius > 2 to prevent duplicate entries?\n\t\t\treturn dests.freeze();\n\t\t}\n\t\tpublic tileSourcesTo(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(coord, radius);\n\t\t}\n\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\n\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\n\t\t\treturn dim.height * dim.width;\n\t\t}\n\n\t\tpublic static getLatticePatchDiameter(area: number): number {\n\t\t\treturn Math.sqrt(area);\n\t\t}\n\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\n\t\t\tconst x = Math.floor(dimensions.width  * Math.random());\n\t\t\tconst y = Math.floor(dimensions.height * Math.random());\n\t\t\treturn (y * dimensions.width) + x;\n\t\t}\n\n\t\t/** @internal */\n\t\tpublic _assertSomeInvariants(): void {\n\t\t\tconst bad = this._grid.map((t,i) => {\n\t\t\t\tconst arr = this.getAllAltDestsThan(t.coord).map(t => t.coord).sort().freeze();\n\t\t\t\treturn { i, arr };\n\t\t\t}).filter(o => o.arr.length !== 25).freeze();\n\t\t\tif (bad.length) {\n\t\t\t\tconsole.error(bad);\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t}\n\t}\n\texport namespace Grid {\n\t\t/**\n\t\t * If `width` is not specified, `height` is taken as its default value.\n\t\t */\n\t\texport type Dimensions = Dim;\n\t}\n\tGrid.prototype.tileSourcesTo = Grid.prototype.tileDestsFrom;\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\n\tObject.freeze(Grid);\n\tObject.freeze(Grid.prototype);\n}\nObject.freeze(WrappedEuclid2);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { Player } from \":defs/TypeDefs\";\nimport { Grid as AbstractGrid } from \":floor/Grid\";\ntype S = Coord.System.BEEHIVE;\n\n/**\n * Beehive Internal Augmented Coord\n */\nexport class IAC {\n\n\t/** 🕒 3'o'clock direction */\n\tpublic readonly dash: number;\n\n\t/** 🕔 5'o'clock direction */\n\tpublic readonly bash: number;\n\n\tpublic constructor(desc: IAC.Bare) {\n\t\tthis.dash = desc.dash;\n\t\tthis.bash = desc.bash;\n\t\tObject.freeze(this); //🧊\n\t}\n\tpublic toCoord(): Coord {\n\t\t// TODO.impl\n\t\treturn undefined!;\n\t}\n\n\tpublic round(): IAC {\n\t\t// I'm pretty proud of this despite the fact that I don't\n\t\t// think there's anything very impressive about it.\n\t\tconst floorDash = Math.floor(this.dash);\n\t\tconst floorBash = Math.floor(this.bash);\n\t\tconst d = floorDash - this.dash;\n\t\tconst b = floorBash - this.bash;\n\t\tif (d > 2 * b) {\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash   });\n\t\t} else if (d < 0.5 * b) {\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash+1 });\n\t\t} else if (Math.min(d, b) > 0.5) {\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash+1 });\n\t\t} else {\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash   });\n\t\t}\n\t}\n\tpublic add(other: IAC.Bare): IAC {\n\t\treturn new IAC({\n\t\t\tdash: this.dash + other.dash,\n\t\t\tbash: this.bash + other.bash,\n\t\t});\n\t}\n\tpublic sub(other: IAC.Bare): IAC {\n\t\treturn new IAC({\n\t\t\tdash: this.dash - other.dash,\n\t\t\tbash: this.bash - other.bash,\n\t\t});\n\t}\n\tpublic mul(scalar: number): IAC {\n\t\treturn new IAC({\n\t\t\tdash: scalar * this.dash,\n\t\t\tbash: scalar * this.bash,\n\t\t});\n\t}\n}\nexport namespace IAC {\n\texport type Bare = Readonly<{\n\t\tdash: number;\n\t\tbash: number;\n\t}>;\n}\nObject.freeze(IAC);\nObject.freeze(IAC.prototype);\n\n\n/**\n * ### 🐝 BEES !\n *\n * ## 🐝 BEES !\n *\n * # 🐝 BEES !\n *\n * ```text\n *   ___   ___\n *  //  \\_//  \\__\n *  \\\\__/  \\__/  \\\n *     \\\\__/ \\\\__/\n * ```\n *\n * [(bees)](https://giphy.com/gifs/oprah-bees-VhFps32TlNgsg)\n * [(Hexagons)](https://www.youtube.com/watch?v=thOifuHs6eY)\n */\nexport namespace Beehive {\n\t/**\n\t * Beehive Grid\n\t */\n\texport class Grid extends AbstractGrid<S> {\n\n\t\tpublic static ambiguityThreshold = 18;\n\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = JsUtils.deepFreeze({\n\t\t\tdash:    { min: 10, max: 50 },\n\t\t\tbslash:  { min: 10, max: 50 },\n\t\t\tfslash:  { min: 10, max: 50 },\n\t\t});\n\n\t\t/**\n\t\t */\n\t\t// TODO.design determine spec for indexing\n\t\t// Then initialize the field in the constructor\n\t\t// Also design HTML representation and initialize in Grid.Visible\n\t\tprivate readonly grid: readonly (readonly Tile[])[];\n\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\n\t\t\tsuper(desc);\n\n\t\t\t// Initialize `grid`:\n\t\t\tconst grid: any[] = undefined!;\n\t\t\tthis.grid = grid.freeze();\n\t\t\tif (new.target === Grid) {\n\t\t\t\tObject.seal(this); //🧊\n\t\t\t}\n\t\t}\n\n\t\tpublic write(coord: Coord, changes: Tile.Changes): void {\n\t\t\t// TODO.impl\n\t\t}\n\n\t\tpublic moveEntity(entityId: Player.Id, from: Coord, to: Coord): void {\n\n\t\t}\n\n\t\tpublic forEach(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tlet i = 0;\n\t\t\tfor (const row of this.grid) {\n\t\t\t\tfor (const tile of row) {\n\t\t\t\t\tconsumer(tile, i++);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\n\t\t\t// const indices: Array<number> = new Array(this.area);\n\t\t\t// for (let i = 0; i < this.area; i++) {\n\t\t\t// \tindices[i] = i;\n\t\t\t// }\n\t\t\t// indices.sort((a,b) => Math.random() - 0.5);\n\t\t\t// Object.freeze(indices);\n\t\t\t// for (const index of indices) {\n\t\t\t// \tconsumer(this.grid[index]!, index);\n\t\t\t// }\n\t\t}\n\n\t\tpublic getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord {\n\t\t\treturn undefined!;\n\t\t}\n\t\tpublic getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Coord {\n\t\t\t// return this.getUntToward(\n\t\t\t// \tsourceCoord.add(sourceCoord.sub(avoidCoord)),\n\t\t\t// \tsourceCoord,\n\t\t\t// );\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic getAllAltDestsThan(originCoord: Coord): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\n\t\t}\n\n\t\tpublic getRandomCoordAround(origin: Coord, radius: number): Coord {\n\t\t\t// Note to self when I implement this:\n\t\t\t// Be careful about getting proper uniform random distribution!\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic dist(source: Coord, dest: Coord): number {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic isOccupied(coord: Coord): boolean {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic tileAt(coord: Coord): Tile {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic tileDestsFrom(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\tconst result: Array<Tile> = [];\n\t\t\treturn result.freeze();\n\t\t}\n\n\t\tpublic tileSourcesTo(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\n\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\n\t\t\tconst shorterSide = Math.min(dim.fslash, dim.bslash);\n\t\t\tconst longerSide  = Math.max(dim.fslash, dim.bslash);\n\t\t\tconst width = (-1) + dim.dash + shorterSide;\n\t\t\tlet area = 2 * shorterSide * (dim.dash + width);\n\t\t\tarea += (longerSide - shorterSide - 1) * width;\n\t\t\treturn area;\n\t\t}\n\n\t\tpublic static getLatticePatchDiameter(area: number): number {\n\t\t\tif (area < 0.25) {\n\t\t\t\tthrow new RangeError(\"determinant of a radical will be strictly negative.\");\n\t\t\t}\n\t\t\t// Given radius `r` and diameter = `1 + 2*r`, the area is\n\t\t\t// `1 + 6*r*(1+r)/2`. Rearrange to solve for `d` given the\n\t\t\t// area: `0 = 3r^2 + 3r + (1-a)`. Use quadratic formula.\n\t\t\tconst radius = ((-3) + Math.sqrt(9 - (12 * (1 - area)))) / 6;\n\t\t\treturn 1 + (2 * radius);\n\t\t}\n\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\n\t\t\treturn new IAC(undefined!).toCoord();\n\t\t}\n\t}\n\texport namespace Grid {\n\t\texport type Dimensions = {\n\t\t\tdash: number;\n\t\t\tbslash: number;\n\t\t\tfslash: number;\n\t\t};\n\t}\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\n\tObject.freeze(Grid);\n\tObject.freeze(Grid.prototype);\n}\nObject.freeze(Beehive);","import { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { GameManager } from \":game/gameparts/GameManager\";\n\nexport { JsUtils };\nexport type { Coord, Tile };\nexport type { GameManager };\n\n// Implementations:\nimport type { Chaser } from \"./robots/Chaser\";\n\nimport { Player } from \"./Player\";\nexport { Player };\n\n\n/**\n * Unlike {@link OperatorPlayer}s, these are not guided by human input.\n * Instead, they are essentially defined by how often they move, and\n * where they decide to move toward each time they move.\n *\n * Can be paused and un-paused by the Game Manager.\n */\nexport abstract class RobotPlayer extends Player {\n\n\t/** @override */\n\tdeclare public readonly game: GameManager<any>;\n\n\tprivate _nextMovementTimerMultiplier: number = undefined!;\n\n\tprivate _scheduledMovementCallbackId: number = undefined!;\n\n\t/**\n\t * @see RobotPlayer.of for the public, non-abstract interface.\n\t */\n\tprotected constructor(game: GameManager<any>, desc: Player.CtorArgs) {\n\t\tsuper(game, desc);\n\t}\n\n\t/**\n\t * Returns a {@link Pos} representing an absolute coordinate (ie.\n\t * one that is relative to the {@link Game}'s origin position')\n\t * that this `RobotPlayer` intends to move toward in its next\n\t * movement request. Pos may contain non-integer coordinate values,\n\t * and it does not have to be inside the bounds of the {@link Grid}.\n\t */\n\tprotected abstract computeDesiredDest(): Coord;\n\n\tprotected abstract getNextMoveType(): Player.MoveType;\n\n\t/**\n\t * Units are in milliseconds.\n\t */\n\tprotected abstract computeNextMovementTimer(): number;\n\n\t/** @override */\n\tpublic onGamePlaying(): void {\n\t\tthis._delayedMovementContinue();\n\t}\n\t/** @override */\n\tpublic onGamePaused(): void {\n\t\tthis.game.cancelTimeout(this._scheduledMovementCallbackId);\n\t\tthis._scheduledMovementCallbackId = undefined!;\n\t}\n\t/** @override */\n\tpublic onGameOver(): void {\n\t\tthis.game.cancelTimeout(this._scheduledMovementCallbackId);\n\t\tthis._scheduledMovementCallbackId = undefined!;\n\t}\n\n\t/**\n\t * Executes a single movement and then calls `delayedMovementContinue`.\n\t */\n\tprivate _movementContinue(): void {\n\t\tconst desiredDest = this.computeDesiredDest();\n\t\t// This is a little different than how human players experience\n\t\t// \"penalties\" when moving to tiles with long language-sequences-\n\t\t// humans must pay the penalty before landing on the tile, but\n\t\t// in the implementation here, it's much easier to simulate such\n\t\t// a penalty if it applies _after_ landing on the tile.\n\t\tthis._nextMovementTimerMultiplier = this.game.grid.tileAt(desiredDest).seq.length;\n\n\t\tthis.makeMovementRequest(\n\t\t\tthis.game.grid.getUntToward(desiredDest, this.coord),\n\t\t\tthis.getNextMoveType(),\n\t\t);\n\t\t// Schedule a task to do this again:\n\t\tthis._delayedMovementContinue();\n\t}\n\n\t/** Schedules a call to `movementContinue`. */\n\tprivate _delayedMovementContinue(): void {\n\t\t// Schedule the next movement.\n\t\tthis._scheduledMovementCallbackId = this.game.setTimeout(\n\t\t\tthis._movementContinue.bind(this),\n\t\t\tthis.computeNextMovementTimer() * this._nextMovementTimerMultiplier,\n\t\t\t// * Callback function arguments go here.\n\t\t);\n\t}\n}\nexport namespace RobotPlayer {\n\n\texport const _Constructors: {\n\t\treadonly [ F in Player.RobotFamily ]: {\n\t\t\tnew(\n\t\t\t\tgame: GameManager,\n\t\t\t\tdesc: Player._CtorArgs[F]\n\t\t\t): RobotPlayer;\n\t\t};\n\t} = {\n\t\t// These are initialized later to avoid bootstrapping issues.\n\t\t[\"CHASER\"]: undefined!,\n\t};\n\n\texport interface FamilySpecificPart {\n\t\t[Player.Family.CHASER]: Partial<Chaser.Behaviour>;\n\t}\n\n\texport const of = (\n\t\tgame: GameManager,\n\t\tplayerDesc: Player._CtorArgs[Player.RobotFamily],\n\t): RobotPlayer => {\n\t\tconst familyId = playerDesc.familyId as Player.RobotFamily;\n\t\tif (DEF.DevAssert) {\n\t\t\t// Enforced By: Caller adherence to contract.\n\t\t\tif (!Object.getOwnPropertyNames(_Constructors).includes(familyId)) {\n\t\t\t\tthrow new RangeError(familyId + \" is not a valid robot player family id.\");\n\t\t\t}\n\t\t}\n\t\treturn new (_Constructors[familyId])(game, playerDesc);\n\t};\n\n\t/**\n\t * Provides slightly higher level abstractions for computing the\n\t * desired destination for the next movement.\n\t */\n\texport abstract class Decisive extends RobotPlayer {\n\n\t\t/**\n\t\t * Entries may return undefined to indicate that the condition\n\t\t * for using that behaviour was not met, and the next behaviour\n\t\t * should be tried.\n\t\t *\n\t\t * @requires\n\t\t * The last behaviour must never return `undefined`.\n\t\t */\n\t\tprotected abstract get _behaviours(): readonly Decisive.Behaviour[];\n\n\t\treadonly #cache = {\n\t\t\twhich:  0,\n\t\t\treuses: 0,\n\t\t\ttarget: undefined as number | undefined,\n\t\t};\n\n\t\t/** @override */\n\t\tpublic reset(coord: Coord): void {\n\t\t\tsuper.reset(coord);\n\t\t\tthis.#cache.which  = 0;\n\t\t\tthis.#cache.reuses = 0;\n\t\t\tthis.#cache.target = undefined;\n\t\t}\n\n\t\t/** @final */\n\t\tprotected computeDesiredDest(): Coord {\n\t\t\tconst c = this.#cache;\n\t\t\tif (c.target !== undefined && c.reuses <= Game.K._ROBOT_PRIORITY_MAX_REUSES) {\n\t\t\t\tconst next = this._behaviours[c.which]!.call(this, c.target);\n\t\t\t\tif (next !== undefined) {\n\t\t\t\t\tc.reuses++;\n\t\t\t\t\treturn next.dest; //⚡\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.reuses = 0;\n\t\t\tfor (let i = 0; i < this._behaviours.length; i++) {\n\t\t\t\tconst next = this._behaviours[i]!.call(this);\n\t\t\t\tif (next !== undefined) {\n\t\t\t\t\tc.which = i;\n\t\t\t\t\tc.target = next.target;\n\t\t\t\t\treturn next.dest;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new Error(\"never\");\n\t\t}\n\t}\n\texport namespace Decisive {\n\t\texport type Next = undefined | {\n\t\t\tdest: Coord;\n\t\t\t/**\n\t\t\t * This could be anything a behaviour wants. Ex. A player\n\t\t\t * ID, a coord, etc.\n\t\t\t *\n\t\t\t * It is assumed to be unchanged when successfully reusing\n\t\t\t * a behaviour.\n\t\t\t * */\n\t\t\ttarget?: number;\n\t\t};\n\t\texport type Behaviour = (target?: number) => Next;\n\t}\n\tObject.freeze(Decisive);\n\tObject.freeze(Decisive.prototype);\n}\nJsUtils.protoNoEnum(RobotPlayer, \"_movementContinue\");\n// RobotPlayer is frozen in PostInit after _Constructors get initialized.\nObject.seal(RobotPlayer);\nObject.freeze(RobotPlayer.prototype);","import {\n\tJsUtils, Coord, Tile,\n\tGameManager, Player, RobotPlayer,\n} from \"../RobotPlayer\";\n\n/**\n * @final\n */\nexport class Chaser extends RobotPlayer.Decisive {\n\n\tprivate readonly pred: SealedArray<Player> = [];\n\tprivate readonly prey: Array<Player> = [];\n\n\tprivate readonly params: Readonly<Chaser.Behaviour>;\n\tdeclare protected readonly _behaviours: readonly RobotPlayer.Decisive.Behaviour[];\n\n\tprivate readonly grid: Chaser[\"game\"][\"grid\"];\n\n\tpublic constructor(game: GameManager<any>, desc: Player._CtorArgs[\"CHASER\"]) {\n\t\tsuper(game, desc);\n\t\tthis.params = Object.freeze({\n\t\t\t...Chaser.Behaviour.DEFAULT,\n\t\t\t...desc.familyArgs,\n\t\t});\n\t\tthis.grid = this.game.grid;\n\t\tObject.seal(this); //🧊\n\t\tJsUtils.propNoWrite(this as Chaser,\n\t\t\t\"params\", \"grid\",\n\t\t);\n\t}\n\n\tpublic _onTeamsBootstrapped(): void {\n\t\tsuper._onTeamsBootstrapped();\n\t\t// We need to cast off read-only-ness below.\n\t\t// @ts-expect-error : RO=\n\t\tthis.pred = this.game.teams\n\t\t\t.filter((team) => team.id !== this.teamId)\n\t\t\t.flatMap((team) => team.members)\n\t\t\t.seal();\n\n\t\t// @ts-expect-error : RO=\n\t\tthis.prey = [...this.pred].seal();\n\n\t\tJsUtils.propNoWrite(this as Chaser,\n\t\t\t\"pred\", \"prey\",\n\t\t);\n\t}\n\n\tprivate _bhvrEvadePred(cachedPred?: Player.Id): RobotPlayer.Decisive.Next {\n\t\tif (cachedPred !== undefined) { return {\n\t\t\tdest: this.grid.getUntAwayFrom(this.game.players[cachedPred]!.coord, this.coord),\n\t\t};}\n\t\t// Check if there is anyone to run away from:\n\t\tthis.pred.sort((pa,pb) => {\n\t\t\treturn this.grid.dist(pa.coord, this.coord)\n\t\t\t\t - this.grid.dist(pb.coord, this.coord);\n\t\t});\n\t\tfor (const pred of this.pred) {\n\t\t\tif (this.grid.dist(pred.coord, this.coord)\n\t\t\t\t> this.params.fearDistance) break;\n\t\t\tif (pred.isDowned) continue;\n\t\t\tif (pred.boosts > this.boosts) {\n\t\t\t\t// TODO.design Something that avoids getting cornered.\n\t\t\t\treturn {\n\t\t\t\t\tdest: this.grid.getUntAwayFrom(pred.coord, this.coord),\n\t\t\t\t\ttarget: pred.playerId,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\tprivate _bhvrChasePrey(cachedPrey?: Player.Id): RobotPlayer.Decisive.Next {\n\t\tif (cachedPrey !== undefined) { return {\n\t\t\tdest: this.game.players[cachedPrey]!.coord,\n\t\t};}\n\t\t// If there is nobody to run away from,\n\t\t// Check if there is anyone we want to attack:\n\t\tthis.prey.sort((pa,pb) => {\n\t\t\treturn this.grid.dist(this.coord, pa.coord)\n\t\t\t\t-  this.grid.dist(this.coord, pb.coord);\n\t\t});\n\t\tif (this.isDowned) { // TODO.design <-- what's this? I think I meant to check that the prey is not downed.\n\t\t\tfor (const prey of this.prey) {\n\t\t\t\tif (this.grid.dist(this.coord, prey.coord)\n\t\t\t\t\t> this.params.bloodThirstDistance) break;\n\t\t\t\tif (prey.boosts < this.boosts - this.params.healthReserve) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdest: prey.coord,\n\t\t\t\t\t\ttarget: prey.playerId,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\tprivate _bhvrGotoHealthElseWander(cachedHealthCoord?: Coord): RobotPlayer.Decisive.Next {\n\t\t/* if (cachedHealthCoord !== undefined && this.game.health.tiles.has(cachedHealthCoord)) {\n\t\t\treturn { dest: cachedHealthCoord };\n\t\t} */\n\t\t// If there is nobody we want to chase after to attack,\n\t\t// Head toward the nearest free health if it exists.\n\t\t//if (true) {\n\t\t\t// No tiles close by. Wander around:\n\t\t\tif (Math.random() < this.params.wanderingAimlessness) {\n\t\t\t\t// Big direction change:\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(this.coord, 3) };\n\t\t\t} else {\n\t\t\t\t// Continue wandering with a subtle, random direction:\n\t\t\t\tconst awayFn = this.grid.getUntAwayFrom.bind(this.grid, this.prevCoord);\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(\n\t\t\t\t\tawayFn(awayFn(this.coord)), 1,\n\t\t\t\t)};\n\t\t\t}\n\t\t//}\n\t\t/* let closestFht: Tile = undefined!;\n\t\tlet closestFhtDistance = Infinity;\n\t\tfor (const fht of this.game.health.tiles.values()) {\n\t\t\tconst distance = this.grid.dist(this.coord, fht.coord);\n\t\t\tif (distance < closestFhtDistance) {\n\t\t\t\tclosestFht = fht;\n\t\t\t\tclosestFhtDistance = distance;\n\t\t\t}\n\t\t}\n\t\treturn { dest: closestFht.coord, target: closestFht.coord }; */\n\t}\n\n\tprotected getNextMoveType(): Player.MoveType {\n\t\treturn Player.MoveType.NORMAL;\n\t}\n\n\tprotected computeNextMovementTimer(): number {\n\t\treturn 1000 / this.params.keyPressesPerSecond;\n\t}\n}\nexport namespace Chaser {\n\t/**\n\t */\n\texport type Behaviour = {\n\t\t/**\n\t\t * If the number of moves it would take for an opponent with\n\t\t * more health than this player to reach this player is less\n\t\t * than or equal to this value, then this player will try to\n\t\t * run away to safety.\n\t\t */\n\t\tfearDistance: number;\n\t\t/**\n\t\t * If the number of moves it would take for this player to reach\n\t\t * an opponent with less health is greater than this value,\n\t\t * this player will not even consider pursuing them in attack.\n\t\t */\n\t\tbloodThirstDistance: number;\n\t\t/**\n\t\t * The minimum amount of leftover health this player would try\n\t\t * to ensure having before going after an opponent. Negative\n\t\t * values are allowed, in which case, the player will go after\n\t\t * opponents even if they would end up being downed as a result.\n\t\t */\n\t\thealthReserve: number;\n\t\t/**\n\t\t * How often this player moves in units of moves-per-second.\n\t\t */\n\t\tkeyPressesPerSecond: number;\n\t\t/**\n\t\t * A value between zero and one. How often this player will\n\t\t * make a drastic random change in direction when wandering.\n\t\t */\n\t\twanderingAimlessness: number;\n\t};\n\texport namespace Behaviour {\n\t\texport const DEFAULT: Readonly<Behaviour> = Object.freeze({\n\t\t\tfearDistance: 5,\n\t\t\tbloodThirstDistance: 7,\n\t\t\thealthReserve: 3.0,\n\t\t\tkeyPressesPerSecond: 2.0,\n\t\t\twanderingAimlessness: 0.2,\n\t\t});\n\t}\n}\n// @ts-expect-error : RO=\nChaser.prototype._behaviours\n= Object.freeze([\n\tChaser.prototype[\"_bhvrEvadePred\"],\n\tChaser.prototype[\"_bhvrChasePrey\"],\n\tChaser.prototype[\"_bhvrGotoHealthElseWander\"],\n]);\nJsUtils.protoNoEnum(Chaser, \"_onTeamsBootstrapped\");\nObject.freeze(Chaser);\nObject.freeze(Chaser.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport { Lang, LangDescs } from \":lang/Lang\";\nimport { Game } from \"../Game\";\n\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { StateChange } from \"../StateChange\";\nimport { Player } from \"../player/Player\";\nimport { ScoreInfo } from \"./ScoreInfo\";\nimport { Grid } from \":floor/Grid\";\n\nimport { GameMirror } from \"./GameMirror\";\n\nimport InitGameManagerCtorMaps from \"../ctormaps/CmapManager\";\nInitGameManagerCtorMaps();\n\n/** */\nexport abstract class GameManager<\n\tS extends Coord.System = Coord.System,\n> extends GameMirror<S> {\n\n\tpublic readonly lang: Lang = undefined!;\n\treadonly #langImportPromise: Promise<Lang>;\n\n\tprivate readonly scoreInfo: ScoreInfo;\n\n\t/** */\n\tpublic constructor(args: {\n\t\treadonly impl: Game.ImplArgs,\n\t\treadonly desc: Game.CtorArgs<S>,\n\t\treadonly operatorIds: readonly Player.Id[],\n\t}) {\n\t\tsuper(args);\n\n\t\tthis.scoreInfo = new ScoreInfo(this.players.map((player) => player.playerId));\n\t\tJsUtils.propNoWrite(this as GameManager<S>, \"scoreInfo\");\n\n\t\t// https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import\n\t\tthis.#langImportPromise = Lang.Import(args.desc.langId).then((LangConstructor) => {\n\t\t\t// @ts-expect-error : RO=\n\t\t\tthis.lang = new LangConstructor(args.desc.langWeightExaggeration);\n\t\t\tJsUtils.propNoWrite(this as GameManager<S>, \"lang\");\n\n\t\t\tif (DEF.DevAssert && (LangDescs[args.desc.langId]!.isolatedMinOpts < this.grid.static.ambiguityThreshold)) {\n\t\t\t\t// Enforced By: clientside UI and `CHECK_VALID_CTOR_ARGS`.\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t\treturn this.lang;\n\t\t});\n\t}\n\n\t/** */\n\tpublic async reset(): Promise<Game.ResetSer> {\n\t\t// Reset the grid and event record:\n\t\tsuper.reset();\n\t\tconst resetSer = Object.freeze({\n\t\t\tplayerCoords: [] as Coord[],\n\t\t\tcsps: [] as Lang.Csp[],\n\t\t});\n\n\t\t// Reset hit-counters in the current language:\n\t\t// This must be done before shuffling so that the previous\n\t\t// history of shuffle-ins has no effects on the new pairs.\n\t\tawait this.#langImportPromise;\n\t\tthis.lang.reset();\n\t\tthis.grid.forEachShuffled((tile, index) => {\n\t\t\tconst csp = this.dryRunShuffleLangCspAt(tile.coord);\n\t\t\tthis.grid.write(tile.coord, csp);\n\t\t\tresetSer.csps[index] = csp;\n\t\t});\n\n\t\t// Reset and spawn players:\n\t\tthis.teams.forEach((team) => team.reset());\n\t\tconst spawnPoints = this.grid.static.getSpawnCoords(\n\t\t\tthis.teams.map((team) => team.members.length),\n\t\t\tthis.grid.dimensions,\n\t\t);\n\t\tthis.teams.forEach((team, teamIndex) => {\n\t\t\tteam.members.forEach((member, memberIndex) => {\n\t\t\t\tconst coord = spawnPoints[teamIndex]![memberIndex]!;\n\t\t\t\tmember.reset(coord);\n\t\t\t\tresetSer.playerCoords[member.playerId] = coord;\n\t\t\t});\n\t\t});\n\t\tthis.scoreInfo.reset();\n\n\t\treturn resetSer;\n\t}\n\n\n\t/**\n\t * **Important:** Nullifies the existing values at `tile` and does\n\t * not consume the returned values, which must be done externally.\n\t *\n\t * @param coord\n\t *\n\t * @returns\n\t * A {@link Lang.Csp} that can be used as a replacement for that\n\t * currently in `tile`.\n\t */\n\tprivate dryRunShuffleLangCspAt(coord: Coord): Lang.Csp {\n\t\t// First, clear values for the target tile so its current\n\t\t// (to-be-previous) values don't get unnecessarily avoided.\n\t\tthis.grid.write(coord, { seq: \"\" });\n\n\t\tconst avoid = this.grid\n\t\t\t.getAllAltDestsThan(coord)\n\t\t\t.map((tile) => tile.seq)\n\t\t\t.freeze();\n\t\treturn this.lang.getNonConflictingChar(avoid);\n\t}\n\n\t/**\n\t * @override\n\t * @param authorSock - Only passed on the server.\n\t */\n\tpublic requestStateChange(req: StateChange.Req, authorSock?: WebSocket): void {\n\t\tconst author = this.players[req.author]!;\n\t\tif (req.lastRejectId !== author.reqBuffer.lastRejectId) {\n\t\t\t// client hasn't received previously sent reject ID yet.\n\t\t\treturn; //⚡\n\t\t}\n\t\tif (this.status !== Game.Status.PLAYING || this.grid.isOccupied(req.moveDest)) {\n\t\t\tthis.commitStateChange({\n\t\t\t\trejectId: author.reqBuffer.getNextRejectId(),\n\t\t\t\tauthor: req.author,\n\t\t\t}, authorSock);\n\t\t\treturn; //⚡\n\t\t}\n\t\tconst moveIsBoost = (req.moveType === Player.MoveType.BOOST);\n\t\tconst authorNewBoosts = author.boosts + (moveIsBoost ? -1 : Game.K.PORTION_OF_MOVES_THAT_ARE_BOOST);\n\t\tif (moveIsBoost && authorNewBoosts < 0) {\n\t\t\tthis.commitStateChange({\n\t\t\t\trejectId: author.reqBuffer.getNextRejectId(),\n\t\t\t\tauthor: req.author,\n\t\t\t}, authorSock);\n\t\t\treturn; //⚡\n\t\t}\n\n\t\t// Update stats records:\n\t\tconst scoreInfo = this.scoreInfo.entries[author.playerId]!;\n\t\tscoreInfo.moveCounts[req.moveType] += 1;\n\n\t\t// Set response fields according to spec in `PlayerMovementEvent`:\n\t\tthis.commitStateChange(<StateChange.Res.Accepted>{\n\t\t\tauthor: req.author,\n\t\t\tmoveType: req.moveType,\n\t\t\tplayers: {\n\t\t\t\t[author.playerId]: {\n\t\t\t\t\tboosts: authorNewBoosts,\n\t\t\t\t\tcoord: req.moveDest,\n\t\t\t\t},\n\t\t\t},\n\t\t\ttiles: {\n\t\t\t\t[req.moveDest]: this.dryRunShuffleLangCspAt(req.moveDest),\n\t\t\t},\n\t\t}, authorSock);\n\t}\n\n\tpublic abstract setTimeout(callback: Function, millis: number, ...args: any[]): number;\n\tpublic abstract cancelTimeout(handle: number): void;\n}\nexport namespace GameManager {\n\t/**\n\t * If cleaning can be appropriately performed, this function will\n\t * do so. If not, it will indicate invalidities in its return value.\n\t */\n\texport function CHECK_VALID_CTOR_ARGS(\n\t\targs: TU.NoRo<Game.CtorArgs.UnFin>,\n\t): string[] {\n\t\t//#region\n\t\tconst bad: string[] = [];\n\t\ttype Key = keyof Game.CtorArgs.UnFin;\n\t\tconst requiredFields = Object.freeze(<{[K in Key]: any}>{\n\t\t\tcoordSys: 0, gridDimensions: 0,\n\t\t\tlangId: 0, langWeightExaggeration: 0, players: 0,\n\t\t});\n\t\tconst missingFields: Key[] = [];\n\t\tfor (const fieldName in requiredFields) {\n\t\t\tconst field = args[fieldName as Key];\n\t\t\tif (field === undefined || field === null) {\n\t\t\t\tmissingFields.push(fieldName as Key);\n\t\t\t}\n\t\t}\n\t\tif (missingFields.length) {\n\t\t\tbad.push(\"Missing the following arguments: \" + missingFields);\n\t\t}\n\n\t\tconst langDesc = Lang.GetDesc(args.langId);\n\t\tconst gridClass = Grid._Constructors[args.coordSys];\n\t\tif (langDesc === undefined) {\n\t\t\tbad.push(`No language with the ID \\`${args.langId}\\` exists.`);\n\t\t} else if (gridClass === undefined) {\n\t\t\tbad.push(`No grid with the system ID \\`${args.coordSys}\\` exists.`);\n\t\t} else {\n\t\t\tif (langDesc.isolatedMinOpts < gridClass.ambiguityThreshold) {\n\t\t\t\tbad.push(\"The provided language does not have enough sequences\"\n\t\t\t\t+\"\\nto ensure that a shuffling operation will always succeed when\"\n\t\t\t\t+\"\\npaired with the provided grid system.\");\n\t\t\t}\n\t\t}\n\n\t\tif (typeof args.langWeightExaggeration !== \"number\") {\n\t\t\tbad.push(`Language Weight Exaggeration expected a number, but`\n\t\t\t+` \\`${args.langWeightExaggeration}\\` is not a number.`);\n\t\t} else {\n\t\t\targs.langWeightExaggeration = Math.max(0, parseFloat(\n\t\t\t\targs.langWeightExaggeration as any\n\t\t\t));\n\t\t}\n\t\t// TODO.impl check all the rest of the things.\n\t\t// if (!(Player.Username.REGEXP.test(desc.username))) {\n\t\t//     throw new RangeError(`Username \\\"${desc.username}\\\"`\n\t\t//     + ` does not match the required regular expression,`\n\t\t//     + ` \\\"${Player.Username.REGEXP.source}\\\".`\n\t\t//     );\n\t\t// }\n\t\treturn bad;\n\t\t//#endregion\n\t}\n}\nObject.freeze(GameManager);\nObject.freeze(GameManager.prototype);","import { Grid } from \":floor/Grid\";\nimport { WrappedEuclid2 } from \":floor/impl/Euclid2/System\";\nimport { Beehive } from \":floor/impl/Beehive/System\";\n\nimport { RobotPlayer } from \":game/player/RobotPlayer\";\nimport { Chaser } from \":game/player/robots/Chaser\";\n\nexport default (): void => {{\n\t// Non-Visible Grid Implementation Registry:\n\tObject.freeze(Object.assign(Grid._Constructors, <typeof Grid._Constructors>{\n\t\t[\"W_EUCLID2\"]: WrappedEuclid2.Grid,\n\t\t[\"BEEHIVE\"]: Beehive.Grid,\n\t}));\n\tObject.freeze(Grid);\n}{\n\tconst Robot = RobotPlayer;\n\tObject.freeze(Object.assign(Robot._Constructors, <typeof Robot._Constructors>{\n\t\t[\"CHASER\"]: Chaser,\n\t}));\n\tObject.freeze(Robot);\n}};","import type WebSocket from \"ws\";\n\nimport { JsUtils } from \":defs/JsUtils\";\nimport { SOCKET_ID, GroupEv, GameEv } from \":defs/OnlineDefs\";\nimport type { Game } from \":game/Game\";\nimport type { Coord } from \":floor/Tile\";\nimport type { StateChange } from \":game/StateChange\";\nimport { Player } from \":game/player/Player\";\nimport { RobotPlayer } from \":game/player/RobotPlayer\";\nimport { Grid } from \":floor/Grid\";\n\nimport { GameManager } from \":game/gameparts/GameManager\";\n\n/** @this ServerGame */\nfunction gameOnSocketMessage<S extends Coord.System>(this: ServerGame<S>, ev: WebSocket.MessageEvent): void {\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\tconst socket = ev.target;\n\tswitch (evName) {\n\t\tcase GameEv.IN_GAME: this.requestStateChange(args[0], socket); break;\n\t\tcase GameEv.PAUSE:   this.statusBecomePaused(); break;\n\t\tcase GameEv.UNPAUSE: this.statusBecomePlaying(); break;\n\t\tcase GameEv.RETURN_TO_LOBBY:\n\t\t\tif (socket === this.groupHostSocket) {\n\t\t\t\tthis.statusBecomeOver();\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY]);\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket && s.readyState === s.OPEN) { s.send(data); }});\n\t\t\t\tthis._terminate();\n\t\t\t} else {\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY, SOCKET_ID(socket)]);\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket && s.readyState === s.OPEN) s.send(data); });\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: break;\n\t}\n}\n\n/**\n * Handles game-related events and attaches listeners to each client\n * socket.\n * @final\n */\nexport class ServerGame<S extends Coord.System = Coord.System> extends GameManager<S> {\n\n\treadonly #deleteExternalRefs: () => void;\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\n\n\tprotected readonly sockets: Set<WebSocket>;\n\tprotected readonly groupHostSocket: WebSocket;\n\n\t/** @override */\n\tpublic get currentOperator(): never {\n\t\tthrow new Error(\"never\");\n\t}\n\n\t/** */\n\tpublic constructor(args: Readonly<{\n\t\tsockets: IterableIterator<WebSocket>,\n\t\tgroupHostSocket: WebSocket,\n\t\tdeleteExternalRefs: () => void,\n\t\tgameDesc: Game.CtorArgs.UnFin<S>,\n\t}>) {\n\t\tsuper({\n\t\t\timpl: {\n\t\t\t\tgridClassLookup: Grid.getImplementation,\n\t\t\t\tOperatorPlayer: undefined,\n\t\t\t\tRobotPlayer: (game, desc) => RobotPlayer.of(game as GameManager<any>, desc),\n\t\t\t\tonGameBecomeOver: () => {},\n\t\t\t},\n\t\t\tdesc: (() => {\n\t\t\t\tPlayer.CtorArgs.finalize(args.gameDesc); // <- mutation\n\t\t\t\treturn args.gameDesc;\n\t\t\t})(),\n\t\t\toperatorIds: [],\n\t\t});\n\t\tthis.sockets = new Set(args.sockets); // shallow copy\n\t\tthis.groupHostSocket = args.groupHostSocket;\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\n\t\tJsUtils.instNoEnum (this as ServerGame<S>, \"operators\");\n\t\tJsUtils.propNoWrite(this as ServerGame<S>, \"sockets\", \"groupHostSocket\");\n\t\tthis.#wsMessageCb = gameOnSocketMessage.bind(this as ServerGame<any>);\n\t\tObject.seal(this); //🧊\n\n\t\tthis.sockets.forEach((s) => {\n\t\t\ts.addEventListener(\"message\", this.#wsMessageCb);\n\t\t\ts.addEventListener(\"close\", () => {\n\t\t\t\tif (this.sockets.size === 1) {\n\t\t\t\t\tthis._terminate();\n\t\t\t\t}\n\t\t\t}, { once: true });\n\t\t});\n\t\tthis._greetGameSockets(args.gameDesc);\n\t}\n\n\t/** Helper for the constructor */\n\tprivate _greetGameSockets(gameDesc: Game.CtorArgs<S>): void {\n\t\t// The below cast is safe because GamepartBase reassigns\n\t\t// `gameDesc.playerDescs` the result of `Player.finalize`.\n\t\tconst humans = (\n\t\t\t(gameDesc.players).filter((player) => player.familyId === \"HUMAN\") as Player._CtorArgs[\"HUMAN\"][]\n\t\t).freeze();\n\t\t// Pass on Game constructor arguments to each client:\n\t\tPromise.all(Array.from(this.sockets, (s) =>\n\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t// TODO.impl timeouts to handle edge-cases of users leaving. Also in reset().\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.RESET) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, { once: true });\n\t\t\t})\n\t\t).freeze()).then(() =>\n\t\t\tthis.reset() //👂 \"reset time!\"\n\t\t);\n\t\tthis.sockets.forEach((s) => {\n\t\t\tconst operatorIds = humans\n\t\t\t\t.filter((desc) => desc.socket === s)\n\t\t\t\t.map((desc) => desc.playerId).freeze();\n\t\t\tconst data = JSON.stringify([GroupEv.CREATE_GAME, gameDesc, operatorIds]);\n\t\t\tif (s.readyState === s.OPEN) { s.send(data); } //📢 \"get ready for reset\"\n\t\t});\n\t}\n\n\t/** @override */\n\tpublic async reset(): Promise<Game.ResetSer> {\n\t\t// Be ready for clients to indicate readiness to unpause.\n\t\tPromise.all(Array.from(this.sockets, (s) =>\n\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.UNPAUSE) { // <- clients send this upon receiving resetSer\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, { once: true });\n\t\t\t})\n\t\t).freeze()).then(() => {\n\t\t\tthis.statusBecomePlaying(); //👂 \"play time!\"\n\t\t});\n\n\t\tconst resetSer = await super.reset();\n\t\tconst data = JSON.stringify([GameEv.RESET, resetSer]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }}); //📢 \"get ready for playing!\"\n\t\treturn resetSer;\n\t}\n\n\t/** @override */\n\tpublic setCurrentOperator(nextOperatorIndex: number): void {\n\t\t// no-op\n\t}\n\n\n\t/** @override */\n\tpublic setTimeout(callback: () => void, millis: number, ...args: any[]): number {\n\t\treturn setTimeout(callback, millis, args).unref() as unknown as number;\n\t}\n\n\t/** @override */\n\tpublic cancelTimeout(handle: number): void {\n\t\tclearTimeout(handle as unknown as NodeJS.Timer);\n\t}\n\n\t/** @override */\n\tpublic statusBecomePlaying(): void {\n\t\tsuper.statusBecomePlaying();\n\t\tconst data = JSON.stringify([GameEv.UNPAUSE]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\t/** @override */\n\tpublic statusBecomePaused(): void {\n\t\tsuper.statusBecomePaused();\n\t\tconst data = JSON.stringify([GameEv.PAUSE]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\t/** @override */\n\tpublic commitStateChange(desc: StateChange.Res, authorSock?: WebSocket): void {\n\t\tsuper.commitStateChange(desc, authorSock);\n\n\t\tif (desc.rejectId) {\n\t\t\t// The request was rejected- Notify the requester.\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\n\t\t\tauthorSock?.send(data);\n\t\t} else {\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\n\t\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t}\n\t}\n\n\tprotected _terminate(): void {\n\t\tthis.sockets.forEach((s) => {\n\t\t\ts.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t});\n\t\tthis.#deleteExternalRefs();\n\t}\n}\nJsUtils.protoNoEnum(ServerGame,\n\t\"_greetGameSockets\",\n\t\"setCurrentOperator\", \"_terminate\",\n);\nObject.freeze(ServerGame);\nObject.freeze(ServerGame.prototype);","import type WebSocket from \"ws\";\nimport { JsUtils } from \":defs/JsUtils\";\nimport { SOCKET_ID, JoinerEv, GroupEv } from \":defs/OnlineDefs\";\n\nimport type { Game } from \":game/Game\";\nimport type { Coord } from \":floor/Tile\";\nimport type { Player } from \":game/player/Player\";\nimport { GameManager } from \":game/gameparts/GameManager\";\nimport { ServerGame } from \"./ServerGame\";\n\nimport { Group as _Group } from \":defs/OnlineDefs\";\n\n/**\n * Manages communication between the server, and clients who play in\n * the same game together.\n */\nexport class Group extends _Group {\n\n\tpublic readonly name: _Group.Name;\n\tpublic readonly passphrase: _Group.Passphrase;\n\n\t#currentGame: ServerGame<any> | undefined;\n\tpublic get isCurrentlyPlayingAGame(): boolean {\n\t\treturn this.#currentGame !== undefined;\n\t}\n\n\tdeclare private readonly wssBroadcast: (evName: string, ...data: any[]) => void;\n\tprivate readonly sockets = new Map<WebSocket, Player.UserInfo>();\n\tprivate groupHostSocket: WebSocket;\n\n\treadonly #initialTtlTimeout: NodeJS.Timeout;\n\treadonly #deleteExternalRefs: () => void;\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\n\treadonly #wsLeaveCb: (ev: WebSocket.CloseEvent) => void;\n\n\t/** */\n\tpublic constructor(args: Readonly<{\n\t\twssBroadcast: (evName: string, ...data: any[]) => void,\n\t\tname: _Group.Name,\n\t\tpassphrase: _Group.Passphrase,\n\t\tdeleteExternalRefs: () => void,\n\t}>) {\n\t\tsuper();\n\t\tObject.defineProperty(this, \"wssBroadcast\", { value: args.wssBroadcast });\n\t\tthis.name = args.name;\n\t\tthis.passphrase = args.passphrase;\n\t\tJsUtils.propNoWrite(this as Group, \"name\", \"passphrase\");\n\t\tthis.#currentGame = undefined;\n\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\n\t\tthis.#initialTtlTimeout = setTimeout(() => {\n\t\t\tif (this.sockets.size === 0) {\n\t\t\t\tthis.terminate();\n\t\t\t}\n\t\t}, (Group.DEFAULT_TTL * 1000)).unref();\n\n\t\tthis.#wsMessageCb = (ev: WebSocket.MessageEvent): void => {\n\t\t\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\t\t\tswitch (evName) {\n\t\t\t\tcase GroupEv.UserInfo.NAME: this._wsOnUserInfoChange(ev.target, args[0]); break;\n\t\t\t\tcase GroupEv.CREATE_GAME: if (ev.target === this.groupHostSocket) this._wsOnHostCreateGame(args[0]); break;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t};\n\t\tthis.#wsLeaveCb = (ev: WebSocket.CloseEvent): void => {\n\t\t\tif (ev.target === this.groupHostSocket || this.sockets.size === 1) {\n\t\t\t\t// If the host disconnects, end the session.\n\t\t\t\tthis.terminate(); // TODO.design\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.sockets.delete(ev.target);\n\t\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\n\t\t\t\t[SOCKET_ID(ev.target)]: null,\n\t\t\t}]);\n\t\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t};\n\t}\n\n\t/** Let someone into this group */\n\tpublic admitSocket(ws: WebSocket, userInfo: Player.UserInfo): void {\n\t\tif (this.sockets.has(ws)) {\n\t\t\treturn; //⚡\n\t\t}\n\t\tconsole.info(`socket connect (group):  ${SOCKET_ID(ws)}`);\n\t\tif (this.#currentGame) {\n\t\t\t// no-op\n\t\t}\n\t\t{\n\t\t\ttype Res = GroupEv.UserInfo.Res;\n\t\t\tconst EVENT_NAME = GroupEv.UserInfo.NAME;\n\t\t\t{\n\t\t\t\t// Notify all other clients in this group of the new player:\n\t\t\t\t// NOTE: broadcast modifier not used since socket is not yet in this.sockets.\n\t\t\t\tconst data = JSON.stringify([EVENT_NAME, <Res>{[SOCKET_ID(ws)]: userInfo}]);\n\t\t\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t\t}\n\t\t\t// Notify the new player of all other players:\n\t\t\tconst res: Res = {};\n\t\t\tthis.sockets.forEach((u,s) => {\n\t\t\t\tres[SOCKET_ID(s)] = u;\n\t\t\t});\n\t\t\tws.send(JSON.stringify([EVENT_NAME, res]));\n\t\t}\n\n\t\t/** The first socket becomes the session host. */\n\t\tif (this.sockets.size === 0) {\n\t\t\tclearTimeout(this.#initialTtlTimeout);\n\t\t\t// @ts-expect-error : RO=\n\t\t\tthis.#initialTtlTimeout = undefined!;\n\t\t\tthis.groupHostSocket = ws;\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_LOBBY,\n\t\t\t});\n\t\t}\n\t\tws.addEventListener(\"close\", this.#wsLeaveCb);\n\t\tws.addEventListener(\"message\", this.#wsMessageCb);\n\t\tthis.sockets.set(ws, userInfo);\n\t}\n\n\t/** Kick someone from this group. */\n\tpublic kickSocket(ws: WebSocket): boolean {\n\t\tif (this.sockets.delete(ws)) {\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** */\n\tprivate _wsOnUserInfoChange(ws: WebSocket, req: GroupEv.UserInfo.Req): void {\n\t\tif (typeof req.username !== \"string\"\n\t\t || typeof req.teamId   !== \"number\"\n\t\t || typeof req.avatar   !== \"string\") {\n\t\t\t// User arguments did not match expected format.\n\t\t\tconsole.info(`bad format: username: \\`${req.username}\\``\n\t\t\t+ `, teamId: \\`${req.teamId}\\`, avatar: \\`${req.avatar}\\`.`);\n\t\t\treturn;\n\t\t}\n\t\tthis.sockets.set(ws, req);\n\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\n\t\t\t[SOCKET_ID(ws)]: req,\n\t\t}]);\n\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\t/** */\n\tprivate _wsOnHostCreateGame<S extends Coord.System>(\n\t\tctorArgs: Game.CtorArgs.UnFin<S>\n\t): void {\n\t\tconst failureReasons = this._createGameInstance(ctorArgs);\n\t\tif (failureReasons.length) {\n\t\t\t// TODO.impl handle failure reasons.\n\t\t\tconsole.info(failureReasons);\n\t\t} else {\n\t\t\t// Broadcast to the joiner namespace of this group's change in state:\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_GAME,\n\t\t\t});\n\t\t\tconsole.info(`group ${this.name} new game`);\n\t\t}\n\t}\n\t/**\n\t * @param ctorArgs\n\t * The `playerDescs` field only contains descriptors for artificial\n\t * players. Those for operated players are included by this method.\n\t *\n\t * @returns\n\t * An array of any failure reasons. Empty if none.\n\t */\n\tprivate _createGameInstance<S extends Coord.System>(\n\t\tctorArgs: Game.CtorArgs.UnFin<S>,\n\t): readonly string[] {\n\t\tconst failureReasons = [];\n\t\tif (this.isCurrentlyPlayingAGame) {\n\t\t\tfailureReasons.push(\"a game is already in session for this group\");\n\t\t\treturn failureReasons;\n\t\t}\n\t\tfailureReasons.push(...GameManager.CHECK_VALID_CTOR_ARGS(ctorArgs));\n\t\tif (failureReasons.length) {\n\t\t\treturn failureReasons;\n\t\t}\n\t\t// Everything needed to create a game exists. Let's do it!\n\t\t// @ts-expect-error : RO=\n\t\tctorArgs.players = [\n\t\t\t...ctorArgs.players,\n\t\t\t...Array.from(this.sockets.keys(), (ws) => {\n\t\t\t\tconst userInfo = this.sockets.get(ws)!;\n\t\t\t\treturn Object.freeze(<Player._CtorArgs[\"HUMAN\"]>{\n\t\t\t\t\tsocket:   ws,\n\t\t\t\t\tfamilyId: \"HUMAN\",\n\t\t\t\t\tusername: userInfo.username,\n\t\t\t\t\tteamId:   userInfo.teamId,\n\t\t\t\t\tavatar:   userInfo.avatar,\n\t\t\t\t});\n\t\t\t}),\n\t\t].freeze();\n\t\tthis.#currentGame = new ServerGame({\n\t\t\tsockets: this.sockets.keys(),\n\t\t\tgroupHostSocket: this.groupHostSocket,\n\t\t\tdeleteExternalRefs: () => { this.#currentGame = undefined; },\n\t\t\tgameDesc: ctorArgs,\n\t\t});\n\t\treturn [];\n\t}\n\n\t/**\n\t * - Deletes its own reference to its game (if it exists).\n\t * - Disconnects each client.\n\t * - Removes all listeners from this namespace.\n\t * - Deletes the enclosed Socket.IO namespace from the Server.\n\t * - Deletes the only external reference so this can be garbage collected.\n\t */\n\tprotected terminate(): void {\n\t\tfor (const ws of this.sockets.keys()) {\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t}\n\t\tif (this.#currentGame !== undefined) {\n\t\t\t// TODO.design need to terminate game?\n\t\t\tthis.#currentGame = undefined;\n\t\t}\n\t\tthis.#deleteExternalRefs();\n\n\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t[this.name]: JoinerEv.Exist.Status.DELETE,\n\t\t});\n\t\tconsole.info(`terminated group: \\`${this.name}\\``);\n\t}\n}\nJsUtils.protoNoEnum(Group, \"_wsOnUserInfoChange\", \"_wsOnHostCreateGame\");\nObject.freeze(Group);\nObject.freeze(Group.prototype);","import type WebSocket from \"ws\";\nimport { GroupEv, JoinerEv } from \":defs/OnlineDefs\";\nimport { Group } from \"./Group\";\nimport { wss } from \"./index\";\n\n/** */\nexport const groups = new Map<string, Group>();\nfunction eraseGroup(groupName: string): void { groups.delete(groupName); }\n\n/** */\nfunction _isReqValid(desc: JoinerEv.Create.Req): boolean {\n\treturn (desc.groupName !== undefined)\n\t&& desc.groupName.length <= Group.Name.MaxLength\n\t&& Group.Name.REGEXP.test(desc.groupName)\n\t&& desc.passphrase.length <= Group.Passphrase.MaxLength\n\t&& Group.Passphrase.REGEXP.test(desc.passphrase);\n}\n/** */\nfunction wssBroadcast(evName: string, _data: any): void {\n\tconst data = JSON.stringify([evName, _data]);\n\twss.clients.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n}\n/** */\nexport function wsMessageCb(ev: WebSocket.MessageEvent): void {\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\tswitch (evName) {\n\t/** */\n\tcase JoinerEv.Create.NAME: {\n\t\tfunction _res(val: JoinerEv.Create.Res): void {\n\t\t\tev.target.send(JSON.stringify([JoinerEv.Create.NAME, val]));\n\t\t}\n\t\tconst desc = args[0] as JoinerEv.Create.Req;\n\t\tif (!_isReqValid(desc) || groups.has(desc.groupName)) {\n\t\t\t_res(false); return; //⚡\n\t\t}\n\t\tgroups.set(\n\t\t\tdesc.groupName,\n\t\t\tnew Group(Object.freeze({\n\t\t\t\twssBroadcast: wssBroadcast,\n\t\t\t\tname: desc.groupName,\n\t\t\t\tpassphrase: desc.passphrase,\n\t\t\t\tdeleteExternalRefs: eraseGroup.bind(null, desc.groupName),\n\t\t\t})),\n\t\t);\n\t\t// Note that existence of the new group is broadcasted only\n\t\t// once the creator of thr group has joined it.\n\t\t_res(true); break;\n\t}\n\t/** */\n\tcase JoinerEv.TryJoin.NAME: {\n\t\tfunction _res(val: JoinerEv.TryJoin.Res): void {\n\t\t\tev.target.send(JSON.stringify([JoinerEv.TryJoin.NAME, val]));\n\t\t}\n\t\tconst req = args[0] as JoinerEv.TryJoin.Req;\n\t\tconst group = groups.get(req.groupName);\n\t\tif (\n\t\t\tgroup === undefined\n\t\t\t|| req.passphrase !== group.passphrase\n\t\t) {\n\t\t\t_res(false); return; //⚡\n\t\t}\n\t\tconst userInfo = req.userInfo;\n\t\tif (userInfo === undefined || userInfo.teamId !== 0) {\n\t\t\tthrow new Error(`a socket attempted to connect to group`\n\t\t\t+` \\`${group.name}\\` without providing userInfo.`);\n\t\t}\n\t\t// NOTE: I could make a WeakMap from sockets to their groups,\n\t\t// but that would be another global state to manage. Checking\n\t\t// every group is kind of stupid, but it's simple and it works.\n\t\tfor (const group of groups.values()) {\n\t\t\tif (group.kickSocket(ev.target)) break;\n\t\t}\n\t\tgroup.admitSocket(ev.target, userInfo);\n\t\t_res(true); break;\n\t}\n\t/** */\n\tdefault: break;\n\t}\n}","import \"my-type-utils/ModNodePlatform\";\n\n// =========================================\nimport os from \"os\";\nimport path from \"path\";\nimport http from \"http\";\nimport Koa from \"koa\";\nimport koaStatic from \"koa-static\";\nimport WebSocket from \"ws\";\nimport type net from \"net\";\nimport { SET_SOCKET_ID, SOCKET_ID, JoinerEv } from \":defs/OnlineDefs\";\n\n/** EXPRESS ROOT */\n// At runtime, __dirname resolves to \":/dist/server/\"\nconst CLIENT_ROOT = path.resolve(__dirname, \"../client\");\n\n\nconst app = new Koa()\n.use(koaStatic(CLIENT_ROOT, {\n\tbrotli: DEF.PRODUCTION, //🚩 This must match the value in the webpack config.\n\tformat: false,\n\tsetHeaders: (res, path, stats) => {\n\t\tres.removeHeader(\"x-powered-by\");\n\t\tres.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n\t},\n\t// TODO.build enable this when lang term caching is configured for webpack.\n\tmaxAge: 0,\n\timmutable: false, // DEF.PRODUCTION\n}));\n\n\nconst server = http.createServer({}, app.callback());\n\n\nexport const wss = new WebSocket.Server({\n\tserver: server,\n});\nimport { groups, wsMessageCb } from \"./joinerCb\";\nwss.on(\"connection\", function onWsConnect(ws, req): void {\n\t//req.socket.remoteAddress // <- how to get the client's IP address.\n\t// Upon connection, immediately send a list of existing groups:\n\tconst data = JSON.stringify([\n\t\tJoinerEv.Exist.NAME,\n\t\t(() => {\n\t\t\t// TODO.design current implementation may suffer when there are many many groups.\n\t\t\tconst build: TU.NoRo<JoinerEv.Exist.Sse> = {};\n\t\t\tfor (const [groupName, group] of groups) {\n\t\t\t\tbuild[groupName] = (group.isCurrentlyPlayingAGame)\n\t\t\t\t? JoinerEv.Exist.Status.IN_GAME\n\t\t\t\t: JoinerEv.Exist.Status.IN_LOBBY;\n\t\t\t}\n\t\t\treturn build;\n\t\t})(),\n\t]);\n\tSET_SOCKET_ID(ws, `${Date.now().toString()}_${(Math.random() * 100) % 100}`);\n\tconsole.info(`socket connect (server): ${SOCKET_ID(ws)}`);\n\tws.send(data);\n\tws.addEventListener(\"message\", wsMessageCb);\n});\n\n\n/** HTTP LISTEN */\nserver.listen(<net.ListenOptions>{\n\tport: DEF.PRODUCTION ? 8080 : 8080, // TODO.impl there must be a smarter way to do this.\n\thost: \"0.0.0.0\",\n}, function onServerListening(): void {\n\tconst info = <net.AddressInfo>server.address();\n\tconsole.info(\n\t\t`\\n\\nServer mounted to: \\`${info.address}:${info.port}\\` using ${info.family}.\\n`\n\t\t+\"This host can be reached at any of the following addresses:\\n\"\n\t);\n\tchooseIPAddress().sort().forEach((address) => {\n\t\tconsole.info(/* ${SkServer.PROTOCOL} */`${address}:${info.port}`);\n\t\t// ^We can exclude the protocol since it will get defaulted by the client side.\n\t});\n\tconsole.info(\"\");\n});\n\n\n/**\n * @returns An array of non-internal IP addresses from any of the\n * local host's network interfaces.\n *\n * https://en.wikipedia.org/wiki/Private_network\n */\n// TODO: change to return a map from each of \"public\" and \"private\" to a list of addresses\nexport const chooseIPAddress = (): Array<string> => {\n\treturn (Object.values(os.networkInterfaces()).flat() as os.NetworkInterfaceInfo[])\n\t.filter((info) => {\n\t\treturn !(info.internal); /* && info.family === \"IPv4\" */\n\t})\n\t.map((info) => {\n\t\tif (info.family === \"IPv6\") {\n\t\t\treturn `[${info.address}]`;\n\t\t} else {\n\t\t\treturn info.address;\n\t\t}\n\t});\n};"],"sourceRoot":""}
{"version":3,"sources":["../webpack/runtime/create fake namespace object?","../webpack/runtime/require chunk loading?",".././src/base/defs/JsUtils.ts?",".././src/base/defs/NodePlatformMods.ts?",".././src/base/defs/LangDefs.ts?",".././src/base/defs/TypeDefs.ts?",".././src/base/lang/LangSeqTreeNode.ts?",".././src/base/lang/Lang.ts?",".././src/base/lang/impl|lazy|/^/.*/.ts$/|chunkName: lang/[request]|groupOptions: {}|namespace object?","../webpack/bootstrap?","../webpack/runtime/compat get default export?","../webpack/runtime/define property getters?","../webpack/runtime/ensure chunk?","../webpack/runtime/get javascript chunk filename?","../webpack/runtime/hasOwnProperty shorthand?","../webpack/runtime/make namespace object?","../external \"os\"?","../external \"fs\"?","../external \"path\"?","../external \"http\"?","../external \"express\"?","../external \"express-static-gzip\"?","../external \"ws\"?",".././src/base/defs/OnlineDefs.ts?",".././src/base/game/Game.ts?",".././src/base/game/player/RequestBuffer.ts?",".././src/base/game/player/Team.ts?",".././src/base/game/player/Player.ts?",".././src/base/game/gameparts/HealthInfo.ts?",".././src/base/floor/Grid.ts?",".././src/base/game/gameparts/ScoreInfo.ts?",".././src/base/game/gameparts/GameMirror.ts?",".././src/base/floor/impl/Euclid2/System.ts?",".././src/base/floor/impl/Beehive/System.ts?",".././src/base/game/player/RobotPlayer.ts?",".././src/base/game/player/robots/Chaser.ts?",".././src/base/game/gameparts/GameManager.ts?",".././src/base/game/ctormaps/CmapManager.ts?",".././src/server/ServerGame.ts?",".././src/server/Group.ts?",".././src/server/joinerCb.ts?",".././src/server/index.ts?"],"names":["leafPrototypes","getProto","installedChunks","NO_ENUM","Object","freeze","enumerable","NO_WRITE","writable","JsUtils","obj","key","getOwnPropertyNames","val","_deepFreeze","descriptor","inst","propNames","propName","defineProperty","Web","deepFreeze","hasProp","prototype","hasOwnProperty","call","protoNoEnum","ctor","forEach","instNoEnum","_configProp","bind","propNoWrite","camelCaseTransforms","camelCaseName","spaceyLowercase","replace","letter","toLowerCase","spaceyUppercase","toUpperCase","spaceyCapitalized","split","map","word","charAt","substring","join","prependComment","node","commentStr","parentNode","insertBefore","document","createComment","adoptStyleSheet","root","href","appendChild","html","rel","_makeSmartStorage","localPrefix","storage","example","smart","keys","internalKey","get","getItem","JSON","parse","set","setItem","stringify","tagName","classNames","domProps","el","createElement","seal","e","length","classList","add","type","assign","svg","createElementNS","defineProperties","Array","value","this","globalThis","configurable","REMAP","IDENT","input","LOWER","Descs","module","export","isolatedMinOpts","remapFunc","displayName","blurb","entries","id","desc","behavior","block","inline","Id","Username","Avatar","Family","HUMAN","CHASER","NULL","REGEXP","MAX_LENGTH","_values","values","filter","GET_RANDOM","Math","floor","random","Player","Seq","CharSeqPair","WeightExaggeration","RegExp","char","seq","MAX","CHAR_HIT_COUNT_SEED_CEILING","FrontendDescs","GET_FRONTEND_DESC_BY_ID","langId","Lang","LangSeqTree","parent","characters","carryHits","child","children","reset","incrHits","leafNodes","_rGetLeaves","push","wgtChar","wc","hits","pair","wCharToHit","numTimes","_incrementNumHits","_rIncrHits","weightInv","forwardDict","weightScaling","scaleWeight","GET_SCALE_WEIGHT_FUNC","reverseDict","Map","weight","weightedChar","WeightedLangChar","chars","roots","from","sort","seqA","seqB","startsWith","newNode","ogWgt","averageWeight","reduce","sum","next","originalWeight","pow","LEAF_CMP","a","b","Node","frontendDescId","weightExaggeration","super","frontendDesc","treeRoots","CREATE_TREE_MAP","getPrototypeOf","constructor","BUILD","leaves","getLeaves","flat","l","slice","s","n","avoid","search_branch","leaf","hitNode","superSeq","find","avoidSeq","ownHits","chooseOnePair","Error","BuildUtils","WORD_FOR_WORD","seq2Weight","accumulator","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","code","ids","t","exports","__webpack_module_cache__","moduleId","__webpack_modules__","m","getter","__esModule","d","mode","ns","create","r","def","current","indexOf","definition","f","chunkId","all","promises","u","prop","Symbol","toStringTag","826","require","chunk","moreModules","modules","chunkIds","runtime","i","installChunk","SOCKET_ID","socket","_socketIds","has","WeakMap","JoinerEv","GroupEv","GameEv","Name","Passphrase","MaxLength","GameServerReconnectionAttempts","DEFAULT_TTL","Group","Create","Exist","TryJoin","NAME","Status","UserInfo","CREATE_GAME","Game","K","_HEALTH_UPDATE_CHANCE","averageHealthPerTile","gridGetDiameter","patchDiameter","AVERAGE_HEALTH_TO_SPAWN_ON_TILE","PORTION_OF_MOVES_THAT_ARE_BOOST","_REQUEST_BUFFER_LENGTH","_ROBOT_PRIORITY_MAX_REUSES","RequestBuffer","coord","predictedCoord","moveDest","lastRejectId","rejectId","realCoord","Team","members","elimOrder","ElimOrder","STANDING","game","prevCoord","playerId","familyId","teamId","username","avatar","reqBuffer","teams","health","other","team","includes","grid","write","occId","dest","isFull","processMoveRequest","signRequest","initiator","moveType","newHealth","oldIsDowned","isDowned","every","player","numNonStandingTeams","statusBecomeOver","CtorArgs","MoveType","NORMAL","BOOST","finalize","gameDesc","playerDescs","players","teamIdCleaner","Set","prev","originalId","squashedId","pda","pdb","playerDesc","index","HealthInfo","gridStatic","tiles","baseCostOfBoost","_HEALTH_COST_OF_BOOST","getLatticePatchDiameter","avg","getArea","gridDimensions","avgPerTile","costOfBoost","clear","amount","ScoreInfo","playerIds","Entry","entry","moveCounts","totalHealthPickedUp","static","Grid","dimensions","area","tile","originCoord","tileSourcesTo","flatMap","sourceToTarget","tileDestsFrom","getRandomCoord","teamSizes","avoidSet","numMembers","teamSpawnCoords","_Constructors","getImplementation","coordSys","WrappedEuclid2","Beehive","args","impl","operatorIds","gridClass","gridClassLookup","system","onGameBecomeOver","langFrontend","_createPlayers","operators","teammateArray","onTeamsBootstrapped","setCurrentOperator","PAUSED","implArgs","pDesc","OperatorPlayer","RobotPlayer","ser","csps","playerCoords","nextOperatorIndex","nextOperator","currentOperator","status","PLAYING","onGamePlaying","console","info","OVER","onGamePaused","onGameOver","changes","doCheckOperatorSeqBuffer","tileAt","op","seqBufferAcceptKey","commitTileMods","parseInt","pid","acceptOldest","setCoord","reject","GameMirror","IAC","x","y","width","dim","i1","i2","dist","abs","wrap","height","dX","distX","dY","distY","norm","wrapX","wrapY","max","_i1","_i2","sub","scalar","_grid","iacCache","consumer","indices","intendedDest","sourceCoord","options","tileIac","destIac","iac","infNorm","oneNorm","ta","tb","best","splice","axialAlignment","shift","_avoidCoord","_sourceCoord","iSub","mod","toCoord","_origin","radius","origin","trunc","source","W","H","dests","_t","b1","sliceLength","begin","sqrt","ambiguityThreshold","SIZE_LIMITS","min","sizeLimits","dash","bash","floorDash","floorBash","row","shorterSide","fslash","bslash","longerSide","RangeError","_nextMovementTimerMultiplier","_scheduledMovementCallbackId","_delayedMovementContinue","cancelTimeout","desiredDest","computeDesiredDest","makeMovementRequest","getUntToward","getNextMoveType","setTimeout","_movementContinue","computeNextMovementTimer","of","which","reuses","target","c","_behaviours","Decisive","Chaser","pred","prey","params","Behaviour","DEFAULT","familyArgs","iterator","cachedPred","getUntAwayFrom","pa","pb","fearDistance","cachedPrey","bloodThirstDistance","healthReserve","cachedHealthCoord","size","wanderingAimlessness","getRandomCoordAround","awayFunc","closestFht","closestFhtDistance","Infinity","fht","distance","keyPressesPerSecond","Robot","lang","scoreInfo","langModule","LangConstructor","nsps","langWeightExaggeration","resetSer","forEachShuffled","csp","dryRunShuffleLangCspAt","spawnPoints","getSpawnCoords","teamIndex","member","memberIndex","doCheckEmptyTiles","getAllAltDestsThan","nullSeq","getNonConflictingChar","healthToSpawn","currentAmount","healthToAdd","otherDesc","reqDest","commitStateChange","getNextRejectId","moveIsBoost","newPlayerHealthValue","HEALTH_EFFECT_FOR_DOWNED_PLAYER","dryRunSpawnHealth","delete","GameManager","CHECK_VALID_CTOR_ARGS","bad","requiredFields","missingFields","fieldName","field","langDesc","NaN","parseFloat","gameOnSocketMessage","ev","evName","data","IN_GAME","PAUSE","statusBecomePaused","UNPAUSE","statusBecomePlaying","RETURN_TO_LOBBY","groupHostSocket","sockets","send","_terminate","ServerGame","deleteExternalRefs","addEventListener","once","_greetGameSockets","humans","RESET","callback","millis","unref","handle","clearTimeout","removeEventListener","wssBroadcast","name","passphrase","terminate","_wsOnUserInfoChange","_wsOnHostCreateGame","ws","userInfo","EVENT_NAME","res","IN_LOBBY","log","ctorArgs","failureReasons","_createGameInstance","isCurrentlyPlayingAGame","DELETE","groups","eraseGroup","groupName","_data","wss","wsMessageCb","_res","_isReqValid","group","kickSocket","admitSocket","process","on","err","ROOT","__dirname","error","stack","frame","fn","repeat","stderr","fd","exit","app","server","CLIENT_ROOT","disable","use","enableBrotli","serveStatic","setHeaders","stat","setHeader","build","Date","now","toString","listen","port","host","address","family","chooseIPAddress","internal"],"mappings":"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","file":"index.js","sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(key => def[key] = () => value[key]);\n\t}\n\tdef['default'] = () => value;\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t826: 1\n};\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = function(chunkId, promises) {\n\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","\r\nconst NO_ENUM  = Object.freeze(<const>{ enumerable: false });\r\nconst NO_WRITE = Object.freeze(<const>{ writable: false });\r\n\r\nexport namespace JsUtils {\r\n\r\n\t/** @requires obj must not contain cycles (circular references). */\r\n\texport function deepFreeze<T>(obj: T): TU.DeepRo<T> {\r\n\t\t_deepFreeze(obj);\r\n\t\treturn obj as TU.DeepRo<T>;\r\n\t}\r\n\tfunction _deepFreeze(obj: any): void {\r\n\t\tfor (const key of Object.getOwnPropertyNames(obj)) {\r\n\t\t\tconst val = obj[key];\r\n\t\t\tif (val !== null && typeof val === \"object\") {\r\n\t\t\t\t_deepFreeze(val);\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject.freeze(obj);\r\n\t}\r\n\r\n\t/** */\r\n\texport function hasProp<T, K extends keyof T>(obj: T, key: K): boolean {\r\n\t\treturn Object.prototype.hasOwnProperty.call(obj, key);\r\n\t}\r\n\r\n\t/** */\r\n\texport function protoNoEnum<T>(\r\n\t\tctor: {new(...args: any[]): T} | Function, // <- allow abstract classes\r\n\t\t...propNames: TU.RoArr<keyof T & string> | TU.RoArr<string>\r\n\t): void {\r\n\t\tconst hasProps = Object.getOwnPropertyNames(ctor.prototype).freeze();\r\n\t\tpropNames.forEach((propName) => {\r\n\t\t\tif (DEF.DevAssert) {\r\n\t\t\t\tif (!hasProps.includes(propName as string)) {\r\n\t\t\t\t\tconst msg = `\\`${ctor.name}\\` prototype has no property named \\\"${propName}\\\"`;\r\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tObject.defineProperty(ctor.prototype, propName, NO_ENUM);\r\n\t\t});\r\n\t}\r\n\r\n\texport const instNoEnum  = _configProp.bind(null, NO_ENUM) as _configProp;\r\n\texport const propNoWrite = _configProp.bind(null, NO_WRITE) as _configProp;\r\n\r\n\ttype _configProp = <T>(inst: T, ...propNames: TU.RoArr<keyof T & string> | TU.RoArr<string>) => void;\r\n\tfunction _configProp<T>(\r\n\t\tdescriptor: PropertyDescriptor,\r\n\t\tinst: T, ...propNames: TU.RoArr<string>\r\n\t): void {\r\n\t\tfor (const propName of propNames) {\r\n\t\t\tif (DEF.DevAssert) {\r\n\t\t\t\tconst hasProps = Object.getOwnPropertyNames(inst).freeze();\r\n\t\t\t\tif (!hasProps.includes(propName as string)) {\r\n\t\t\t\t\tconst msg = `\\`${(inst as any).__proto__.constructor.name}\\``\r\n\t\t\t\t\t+ ` instance has no property named \\\"${propName}\\\"`;\r\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tObject.defineProperty(inst, propName, descriptor);\r\n\t\t}\r\n\t}\r\n\r\n\texport type CamelCaseNameTransforms = Readonly<{\r\n\t\tspaceyLowercase: string;\r\n\t\tspaceyUppercase: string;\r\n\t\tspaceyCapitalized: string;\r\n\t}>;\r\n\t/**\r\n\t * Nothing ultra fancy. Does not handle Acronyms.\r\n\t */\r\n\texport function camelCaseTransforms(camelCaseName: string): CamelCaseNameTransforms {\r\n\t\tconst spaceyLowercase = camelCaseName.replace(/[A-Z]/g, (letter) => \" \" + letter.toLowerCase());\r\n\t\treturn Object.freeze(<CamelCaseNameTransforms>{\r\n\t\t\tspaceyLowercase,\r\n\t\t\tspaceyUppercase: spaceyLowercase.toUpperCase(),\r\n\t\t\tspaceyCapitalized: spaceyLowercase.split(' ').map((word) =>\r\n\t\t\t\tword.charAt(0).toUpperCase() + word.substring(1)\r\n\t\t\t).join(' '),\r\n\t\t});\r\n\t}\r\n\r\n\texport namespace Web {\r\n\r\n\t\t/** A non-user-facing markup utility. */\r\n\t\texport function prependComment(node: HTMLElement, commentStr: string): void {\r\n\t\t\tnode.parentNode!.insertBefore(document.createComment(\" \" + commentStr + \" \"), node);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * This is dependant on the HtmlWebpackPlugin config.\r\n\t\t */\r\n\t\texport function adoptStyleSheet(root: Document | ShadowRoot, href: string): void {\r\n\t\t\t// if (\"adoptedStyleSheets\" in root) {\r\n\t\t\t// \tconst sheet = Array.from(document.styleSheets).find((sheet) => sheet.href?.endsWith(href));\r\n\t\t\t// \tif (sheet !== undefined) {\r\n\t\t\t// \t\t// TODO.build remove this any-casting when adoptedStyleSheets\r\n\t\t\t// \t\t// stops being experimental and makes it into the DOM spec.\r\n\t\t\t// \t\t(root as any).adoptedStyleSheets = [sheet];\r\n\t\t\t// \t\treturn;\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\t\t// The client's browser does not support adoptedStyleSheets :(\r\n\t\t\troot.appendChild(JsUtils.html(\"link\", [], {\r\n\t\t\t\trel: \"stylesheet\",\r\n\t\t\t\thref: href,\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param localPrefix\r\n\t\t * Prefixes the storage keys on non-production builds. This is\r\n\t\t * to prevent key collisions on null origins such as `file://`.\r\n\t\t */\r\n\t\texport function _makeSmartStorage<\r\n\t\t\tT extends {[key : string]: string | number},\r\n\t\t>(\r\n\t\t\tlocalPrefix: string,\r\n\t\t\tstorage: Storage,\r\n\t\t\texample: T,\r\n\t\t): Partial<T> {\r\n\t\t\tconst smart: T = {} as T;\r\n\t\t\t(Object.keys(example)).forEach((key) => {\r\n\t\t\t\tconst internalKey = (DEF.PRODUCTION ? \"\" : localPrefix + \".\") + key;\r\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\r\n\t\t\t\tObject.defineProperty(smart, key, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\tget: () => {\r\n\t\t\t\t\t\tconst val = storage.getItem(internalKey);\r\n\t\t\t\t\t\treturn (val === null) ? undefined : JSON.parse(val);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tset: (val: boolean): void => {\r\n\t\t\t\t\t\tstorage.setItem(internalKey, JSON.stringify(val));\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t// Sealing the object causes an error. Not sure why.\r\n\t\t\treturn smart;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A combiner for common operations surrounding `document.createElement`\r\n\t * with some custom HTML attribute defaults.\r\n\t *\r\n\t * - Calls `Object.seal` immediately on the created HTMLElement.\r\n\t * - If making a button, defaults the `type` to `button` instead of `submit`.\r\n\t * - If making an anchor, defaults the rel to `noopener`.\r\n\t */\r\n\texport function html<K extends keyof HTMLElementTagNameMap>(\r\n\t\ttagName: K,\r\n\t\tclassNames?: string[],\r\n\t\tdomProps?: Readonly<Partial<HTMLElementTagNameMap[K]>>,\r\n\t): HTMLElementTagNameMap[K] {\r\n\t\tconst el = document.createElement(tagName);\r\n\t\ttry { Object.seal(el); } catch (e) {};\r\n\t\tif (classNames?.length) {\r\n\t\t\tel.classList.add(...classNames);\r\n\t\t}\r\n\r\n\t\tif (tagName === \"button\") {\r\n\t\t\t(el as HTMLButtonElement).type = \"button\"; // instead of \"submit\".\r\n\t\t} else if (tagName === \"a\") {\r\n\t\t\t(el as HTMLAnchorElement).rel = \"noopener\";\r\n\t\t\t// ^ Should already be the default on modern browsers when\r\n\t\t\t// `target === \"_blank\"`, but it doesn't hurt to set it\r\n\t\t\t// anyway. We're going stricter too.\r\n\t\t}\r\n\r\n\t\tif (domProps !== undefined) {\r\n\t\t\tObject.assign(el, domProps);\r\n\t\t}\r\n\t\treturn el;\r\n\t}\r\n\r\n\t/** */\r\n\texport function svg<K extends keyof SVGElementTagNameMap>(\r\n\t\ttagName: K,\r\n\t\tclassNames?: string[],\r\n\t\tdomProps?: Readonly<Partial<SVGElementTagNameMap[K]>>,\r\n\t): SVGElementTagNameMap[K] {\r\n\t\tconst el = document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\r\n\t\tObject.seal(el);\r\n\t\tif (classNames?.length) {\r\n\t\t\tel.classList.add(...classNames);\r\n\t\t}\r\n\t\tif (domProps !== undefined) {\r\n\t\t\tObject.assign(el, domProps);\r\n\t\t}\r\n\t\treturn el;\r\n\t}\r\n}\r\nObject.freeze(JsUtils);","Object.defineProperties(Array.prototype, {\r\n\tfreeze: { value: function freeze() { return Object.freeze(this); }, enumerable: true, },\r\n\tseal: { value: function seal() { return Object.seal(this); }, enumerable: true },\r\n});\r\n// In-House `--frozen-intrinsics`:\r\n(<(keyof typeof globalThis)[]>[\r\n\t\"Object\", \"String\", \"Number\", \"RegExp\", \"Date\",\r\n\t\"Array\", \"Map\", \"Set\", \"WeakMap\", \"WeakSet\",\r\n])\r\n.forEach((key) => {\r\n\tObject.defineProperty(globalThis, key, {\r\n\t\tenumerable: true,\r\n\t\twritable: false,\r\n\t\tconfigurable: false,\r\n\t});\r\n\tObject.freeze((globalThis as any)[key]);\r\n\tObject.freeze((globalThis as any)[key].prototype);\r\n});","import { JsUtils } from \"defs/JsUtils\";\r\n\r\n/**\r\n *\r\n * This can be used, for example, for basic practical purposes like\r\n * changing all letters to lowercase for the English language, or for\r\n * more interesting things like mapping halves of the keyboard to a\r\n * binary-like value like the dots and dashes in morse, or zeros and\r\n * ones in binary. It could even be used for some crazy challenges like\r\n * remapping the alphabet by barrel-shifting it so that pressing \"a\"\r\n * produces \"b\", and \"b\" produces \"c\", and so on.\r\n *\r\n * The output should either equal the input (in cases that the input\r\n * is already relevant to the `Lang` at hand and is intended to be\r\n * taken as-is (ex. typing \"a\" produces / corresponds to \"a\" in\r\n * regular English), or in cases where the input is completely\r\n * irrelevant before and after remapping), or be a translation to\r\n * some character that is relevant to the `Lang` and hand, and that\r\n * matches against {@link SEQ_REGEXP}. This behaviour is mandated\r\n * by {@link OperatorPlayer#seqBufferAcceptKey}.\r\n *\r\n * @param input -\r\n * @returns\r\n */\r\nconst REMAP = Object.freeze(<const>{\r\n\tIDENT: (input: string): string => input,\r\n\tLOWER: (input: string): string => input.toLowerCase(),\r\n});\r\nREMAP as Readonly<Record<string, {(input: string): string}>>;\r\n\r\nexport type Info = {\r\n\tid?: string;\r\n\t/** Pretty much a file name. */\r\n\tmodule: string;\r\n\t/** A property-access chain. */\r\n\texport: string;\r\n\tremapFunc: {(input: string): string};\r\n\t/** */\r\n\tisolatedMinOpts: number;\r\n\tdisplayName:string;\r\n\tblurb: string;\r\n};\r\n\r\n/**\r\n *\r\n */\r\nconst Descs = <const>{\r\n\t\"engl-low\": <Info>{\r\n\t\tmodule: \"English\", export: \"Lowercase\", isolatedMinOpts: 25,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"English Lowercase (qwerty)\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"engl-mix\": <Info>{\r\n\t\tmodule: \"English\", export: \"MixedCase\", isolatedMinOpts: 51,\r\n\t\tremapFunc: REMAP.IDENT,\r\n\t\tdisplayName: \"English Mixed-Case (Querty)\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"japn-hir\": <Info>{\r\n\t\tmodule: \"Japanese\", export: \"Hiragana\", isolatedMinOpts: 70,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"Japanese Hiragana\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"japn-kat\": <Info>{\r\n\t\tmodule: \"Japanese\", export: \"Katakana\", isolatedMinOpts: 68,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"Japanese Katakana\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"kore-dub\": <Info>{\r\n\t\tmodule: \"Korean\", export: \"Dubeolsik\", isolatedMinOpts: 8690,\r\n\t\tremapFunc: REMAP.IDENT,\r\n\t\tdisplayName: \"Korean Dubeolsik (두벌식 키보드)\",\r\n\t\tblurb: \"The most common keyboard layout, and South Korea's only Hangul\"\r\n\t\t+ \" standard since 1969. Consonants are on the left, and vowels on\"\r\n\t\t+ \" the right.\",\r\n\t},\r\n\t\"kore-sub\": <Info>{\r\n\t\tmodule: \"Korean\", export: \"Sebeolsik\", isolatedMinOpts: 10179,\r\n\t\tremapFunc: REMAP.IDENT,\r\n\t\tdisplayName: \"Korean Sebeolsik (세벌식 최종 키보드)\",\r\n\t\tblurb: \"Another Hangul keyboard layout used in South Korea, and the\"\r\n\t\t+ \" final Sebeolsik layout designed by Dr. Kong Byung Woo, hence\"\r\n\t\t+ \" the name. Syllable-initial consonants are on the right, final\"\r\n\t\t+ \" consonants on the left, and vowels in the middle. It is more\"\r\n\t\t+ \" ergonomic than the dubeolsik, but not widely used.\",\r\n\t},\r\n\t\"kore-rom\": <Info>{\r\n\t\tmodule: \"Korean\", export: \"Romanization\", isolatedMinOpts: 3960,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"Korean Revised Romanization\",\r\n\t\tblurb: \"The Revised Romanization of Korean (국어의 로마자 표기법; 國語의 로마字\"\r\n\t\t+ \" 表記法) is the official South Korean language romanization system. It\"\r\n\t\t+ \" was developed by the National Academy of the Korean Language from 1995,\"\r\n\t\t+ \" and was released on 7 July 2000 by South Korea's Ministry of Culture\"\r\n\t\t+ \" and Tourism\",\r\n\t},\r\n\t\"engl-cell-enc\": <Info>{\r\n\t\tmodule: \"English\", export: \"OldCellphone.Encode\", isolatedMinOpts: 7,\r\n\t\tremapFunc: REMAP.IDENT,\r\n\t\tdisplayName: \"Old Cellphone Keyboard\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"mors-enc\": <Info>{\r\n\t\tmodule: \"English\", export: \"Morse.Encode\", isolatedMinOpts: 10,\r\n\t\tremapFunc: (input) => { return input; }, // TODO.impl\r\n\t\tdisplayName: \"Morse Encoder\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"mors-dec\": <Info>{\r\n\t\tmodule: \"English\", export: \"Morse.Decode\", isolatedMinOpts: 40,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"Morse Decoder\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"ngram2\": <Info>{\r\n\t\tmodule: \"Ngrams\", export: \"Ngram2\", isolatedMinOpts: 199,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"English Bigrams\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"ngram3\": <Info>{\r\n\t\tmodule: \"Ngrams\", export: \"Ngram3\", isolatedMinOpts: 400,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"English Trigrams\",\r\n\t\tblurb: \"\",\r\n\t},\r\n\t\"numpad\": <Info>{\r\n\t\tmodule: \"Numpad\", export: \"Numpad\", isolatedMinOpts: 100,\r\n\t\tremapFunc: REMAP.LOWER,\r\n\t\tdisplayName: \"Number Pad\",\r\n\t\tblurb: \"\",\r\n\t},\r\n};\r\nObject.entries(Descs).forEach(([id,desc]) => {\r\n\tdesc.id = id;\r\n});\r\nJsUtils.deepFreeze(Descs);\r\nexport default Descs;","import LangDescs from \"./LangDefs\";\r\nimport type { Info as LangInfo } from \"./LangDefs\";\r\n\r\nexport const SCROLL_INTO_CENTER = Object.freeze(<const>{\r\n\tbehavior: \"smooth\",\r\n\tblock:    \"center\",\r\n\tinline:   \"center\",\r\n});\r\nSCROLL_INTO_CENTER as ScrollIntoViewOptions;\r\n\r\n\r\n/**\r\n */\r\nexport abstract class Player { }\r\nexport namespace Player {\r\n\r\n\t/**\r\n\t * @enum\r\n\t * Each implementation of the {@link RobotPlayer} class must\r\n\t * have an entry here.\r\n\t */\r\n\texport type Family = keyof typeof Family;\r\n\texport const Family = Object.freeze(<const>{\r\n\t\tHUMAN:  \"HUMAN\",\r\n\t\tCHASER: \"CHASER\",\r\n\t});\r\n\tFamily as {\r\n\t\t[ key in Family ]: key;\r\n\t};\r\n\r\n\t/**\r\n\t * See the main documentation in game/player/Player.\r\n\t */\r\n\texport type Id = number;\r\n\texport namespace Id {\r\n\t\texport const NULL = (-1);\r\n\t}\r\n\r\n\texport type Username = string;\r\n\texport namespace Username {\r\n\t\texport const REGEXP = /[ a-zA-Z0-9:-]+/;\r\n\t\texport const MAX_LENGTH = 15; // rather arbitrary choice.\r\n\t}\r\n\r\n\texport enum Avatar {\r\n\t\tLOREM_IPSUM = \"lorem-ipsum\",\r\n\t}\r\n\texport namespace Avatar {\r\n\t\tconst _values = Object.values(Avatar).filter((e) => typeof e === \"string\") as Avatar[];\r\n\t\t/**\r\n\t\t */\r\n\t\texport function GET_RANDOM(): Avatar {\r\n\t\t\treturn _values[Math.floor(Math.random() * _values.length)]!;\r\n\t\t}\r\n\t}\r\n\r\n\texport interface UserInfo {\r\n\t\treadonly username: Username;\r\n\t\treadonly teamId:   number;\r\n\t\treadonly avatar:   Avatar;\r\n\t}\r\n\r\n\t/**\r\n\t * See the main documentation in game/player/Player.\r\n\t */\r\n\texport type Health = number;\r\n}\r\nObject.freeze(Player);\r\n\r\n\r\n/**\r\n */\r\nexport abstract class Lang {}\r\nexport namespace Lang {\r\n\t/**\r\n\t * See the main documentation in game/lang/Lang\r\n\t */\r\n\texport type Char = string;\r\n\t/**\r\n\t * See the main documentation in game/lang/Lang\r\n\t */\r\n\texport type Seq = string;\r\n\texport namespace Seq {\r\n\t\t/**\r\n\t\t * The choice of this pattern is not out of necessity, but following\r\n\t\t * the mindset of spec designers when they mark something as reserved:\r\n\t\t * For the language implementations I have in mind, I don't see the\r\n\t\t * need to include characters other than these.\r\n\t\t *\r\n\t\t * Characters that must never be unmarked as reserved (state reason):\r\n\t\t * (currently none. update as needed)\r\n\t\t */\r\n\t\texport const REGEXP = new RegExp(\"^[a-zA-Z0-9!@#$%^&*()\\-_=+;:'\\\"\\\\|,.<>/?]+$\");\r\n\t}\r\n\t/**\r\n\t * See the main documentation in game/lang/Lang\r\n\t */\r\n\texport type CharSeqPair = {\r\n\t\treadonly char: Lang.Char,\r\n\t\treadonly seq:  Lang.Seq,\r\n\t};\r\n\texport namespace CharSeqPair {\r\n\t\t/**\r\n\t\t * Used at the beginning of the shuffling operation.\r\n\t\t */\r\n\t\texport const NULL = Object.freeze(<const>{\r\n\t\t\tchar: \"\",\r\n\t\t\tseq:  \"\",\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * See the main documentation in game/lang/Lang\r\n\t */\r\n\texport type WeightExaggeration = number;\r\n\texport namespace WeightExaggeration {\r\n\t\t/**\r\n\t\t * The choice of this value is somewhat up to taste.\r\n\t\t * It must be greater than one.\r\n\t\t */\r\n\t\texport const MAX = 4;\r\n\t}\r\n\t/**\r\n\t * The choice of the upper bound on the number of times\r\n\t * is rather arbitrary, but it should not be too small.\r\n\t */\r\n\texport const CHAR_HIT_COUNT_SEED_CEILING = 5;\r\n\r\n\t/**\r\n\t */\r\n\texport const FrontendDescs = LangDescs as Record<FrontendDesc[\"id\"], FrontendDesc>;\r\n\r\n\texport type FrontendDesc = Readonly<{\r\n\t\tid: keyof typeof LangDescs;\r\n\t} & LangInfo>;\r\n\r\n\t/**\r\n\t * @returns `undefined` if no such language descriptor is found.\r\n\t */\r\n\texport function GET_FRONTEND_DESC_BY_ID(langId: FrontendDesc[\"id\"]): FrontendDesc | undefined {\r\n\t\treturn FrontendDescs[langId];\r\n\t}\r\n}\r\nObject.freeze(Lang);\r\nObject.freeze(Lang.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Lang as _Lang } from \"defs/TypeDefs\";\r\nimport type { Lang } from \"./Lang\";\r\ntype LangSorter<T> = (a: T, b: T) => number;\r\n\r\n/** */\r\nexport namespace LangSeqTree {\r\n\r\n\t/** */\r\n\texport class Node {\r\n\r\n\t\tdeclare public readonly parent: Node | undefined;\r\n\t\tdeclare public readonly seq: Lang.Seq;\r\n\t\tdeclare protected readonly children: TU.RoArr<Node>;\r\n\t\treadonly #characters: TU.RoArr<WeightedLangChar> = [];\r\n\t\t/**\r\n\t\t * Equals this node's own weighted hit count plus all its ancestors'\r\n\t\t * weighted hit counts.\r\n\t\t */\r\n\t\tprotected carryHits: number = 0.0;\r\n\t\tpublic get ownHits(): number {\r\n\t\t\treturn this.carryHits - (this.parent?.carryHits ?? 0);\r\n\t\t}\r\n\r\n\t\t/** */\r\n\t\tprotected constructor(\r\n\t\t\tparent: Node | undefined,\r\n\t\t\tseq: Lang.Seq = \"\",\r\n\t\t\tcharacters: TU.RoArr<WeightedLangChar>,\r\n\t\t) {\r\n\t\t\tObject.defineProperty(this, \"parent\",   { enumerable: true, value: parent });\r\n\t\t\tObject.defineProperty(this, \"seq\",      { enumerable: true, value: seq });\r\n\t\t\tObject.defineProperty(this, \"children\", { enumerable: true, value: [] });\r\n\t\t\tthis.#characters = Object.freeze(characters);\r\n\t\t\tObject.seal(this); //🧊\r\n\t\t}\r\n\r\n\t\tpublic reset(): void {\r\n\t\t\t// Reset hit-counters on the way down.\r\n\t\t\tthis.carryHits = 0.0;\r\n\t\t\tfor (const child of this.children) child.reset();\r\n\r\n\t\t\t// On the way up, seed hit-counters (which get inherited downwards).\r\n\t\t\tfor (const char of this.#characters) {\r\n\t\t\t\tchar.reset();\r\n\t\t\t\tthis.incrHits(char, Math.random() * _Lang.CHAR_HIT_COUNT_SEED_CEILING);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic getLeaves(): TU.RoArr<Node> {\r\n\t\t\tconst leafNodes: Array<Node> = [];\r\n\t\t\tthis._rGetLeaves(leafNodes);\r\n\t\t\treturn leafNodes.freeze();\r\n\t\t}\r\n\t\tprotected _rGetLeaves(leafNodes: Array<Node>): void {\r\n\t\t\tif (this.children.length) {\r\n\t\t\t\tfor (const child of this.children) child._rGetLeaves(leafNodes);\r\n\t\t\t} else {\r\n\t\t\t\tleafNodes.push(this as Node);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @description\r\n\t\t * Incrementing the hit-count makes this node less likely to be\r\n\t\t * used for a shuffle-in. Shuffle-in option searching is easy to\r\n\t\t * taking the viewpoint of leaf-nodes, so this implementation is\r\n\t\t * geared toward indicating hit-count through leaf-nodes, hence\r\n\t\t * the bubble-down of hit-count incrementation.\r\n\t\t *\r\n\t\t * @returns\r\n\t\t * A character / sequence pair from this node that has been\r\n\t\t * selected the least according to the specified scheme.\r\n\t\t */\r\n\t\tpublic chooseOnePair(): Lang.CharSeqPair {\r\n\t\t\tlet wgtChar = this.#characters[0]!;\r\n\t\t\tfor (const wc of this.#characters) {\r\n\t\t\t\tif (wc.hits < wgtChar.hits) {\r\n\t\t\t\t\twgtChar = wc;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst pair: Lang.CharSeqPair = {\r\n\t\t\t\tchar: wgtChar.char,\r\n\t\t\t\tseq:  this.seq,\r\n\t\t\t};\r\n\t\t\tthis.incrHits(wgtChar);\r\n\t\t\treturn pair;\r\n\t\t}\r\n\t\tprivate incrHits(wCharToHit: WeightedLangChar, numTimes: number = 1): void {\r\n\t\t\twCharToHit._incrementNumHits();\r\n\t\t\tthis._rIncrHits(wCharToHit.weightInv * numTimes);\r\n\t\t}\r\n\t\tprivate _rIncrHits(weightInv: number): void {\r\n\t\t\tthis.carryHits += weightInv;\r\n\t\t\tfor (const child of this.children) child._rIncrHits(weightInv);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns The root node of a new tree map.\r\n\t\t */\r\n\t\tpublic static CREATE_TREE_MAP(\r\n\t\t\tforwardDict: Lang.WeightedForwardMap,\r\n\t\t\tweightScaling: Lang.WeightExaggeration,\r\n\t\t): readonly Node[] {\r\n\t\t\tconst scaleWeight = LangSeqTree.GET_SCALE_WEIGHT_FUNC(weightScaling, forwardDict);\r\n\r\n\t\t\t// Reverse the map:\r\n\t\t\tconst reverseDict = new Map<Lang.Seq, WeightedLangChar[]>();\r\n\t\t\tObject.entries(forwardDict).freeze().forEach(([char, {seq, weight}]) => {\r\n\t\t\t\tconst weightedChar = new WeightedLangChar(\r\n\t\t\t\t\tchar, scaleWeight(weight),\r\n\t\t\t\t);\r\n\t\t\t\tconst chars = reverseDict.get(seq);\r\n\t\t\t\tif (chars !== undefined) {\r\n\t\t\t\t\t// The entry was already made:\r\n\t\t\t\t\tchars.push(weightedChar);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treverseDict.set(seq, [weightedChar]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst roots: Node[] = [];\r\n\t\t\tlet parent: Node | undefined = undefined; // a DFS cursor.\r\n\t\t\tfor (const [seq, chars] of\r\n\t\t\t\t// Sorting alphabetically enables DFS-ordered tree construction.\r\n\t\t\t\tArray.from(reverseDict).seal().sort(([seqA], [seqB]) => (seqA < seqB) ? -1 : 1).freeze()\r\n\t\t\t) /* no breaks */ {\r\n\t\t\t\twhile (parent !== undefined && !seq.startsWith(parent.seq)) {\r\n\t\t\t\t\tparent = parent.parent;\r\n\t\t\t\t}\r\n\t\t\t\tconst newNode: Node = new Node(parent, seq, chars);\r\n\t\t\t\tif (parent !== undefined) {\r\n\t\t\t\t\t(parent.children as Node[]).push(newNode);\r\n\t\t\t\t} else {\r\n\t\t\t\t\troots.push(newNode);\r\n\t\t\t\t}\r\n\t\t\t\tparent = newNode;\r\n\t\t\t}\r\n\t\t\treturn roots.freeze();\r\n\t\t}\r\n\r\n\t\tpublic static readonly LEAF_CMP: LangSorter<Node> = (a, b) => {\r\n\t\t\treturn a.carryHits - b.carryHits;\r\n\t\t};\r\n\t}\r\n\tJsUtils.protoNoEnum(Node, \"_rGetLeaves\", \"_rIncrHits\");\r\n\tObject.freeze(Node);\r\n\tObject.freeze(Node.prototype);\r\n\r\n\r\n\t/** */\r\n\texport function GET_SCALE_WEIGHT_FUNC(\r\n\t\tweightScaling: Lang.WeightExaggeration,\r\n\t\tforwardDict: Lang.WeightedForwardMap,\r\n\t): (ogWeight: number) => number {\r\n\t\tif (weightScaling === 0) return () => 1;\r\n\t\tif (weightScaling === 1) return (ogWgt: number) => ogWgt;\r\n\t\tconst values = Object.values(forwardDict);\r\n\t\tconst averageWeight = values.reduce((sum, next) => sum += next.weight, 0) / values.length;\r\n\t\treturn (originalWeight: number) => Math.pow(originalWeight / averageWeight, weightScaling);\r\n\t};\r\n\tObject.freeze(GET_SCALE_WEIGHT_FUNC);\r\n}\r\nObject.freeze(LangSeqTree);\r\n\r\n\r\n/**\r\n * Has no concept of an associated typeable sequence. Used to associate\r\n * a written character to a relative frequency of occurrence in samples\r\n * of writing, and to keep a counter for how many times this character\r\n * has been shuffled-in in the current game session.\r\n *\r\n * Not exported.\r\n */\r\nclass WeightedLangChar {\r\n\r\n\t/**\r\n\t * A weight is relative to weights of other unique characters in\r\n\t * the contextual language. Characters with relatively higher\r\n\t * weights will have relatively higher shuffle-in frequencies.\r\n\t *\r\n\t * Specifically, a character A with a weight N times that of some\r\n\t * other character B will, on average, be returned N times more\r\n\t * often by the `chooseOnePair` method than B.\r\n\t */\r\n\tdeclare public readonly weightInv: number;\r\n\r\n\t/** This value is weighted according to `weightInv`. */\r\n\tpublic hits: number = 0.0;\r\n\r\n\tpublic constructor(\r\n\t\tpublic readonly char: Lang.Char,\r\n\t\tweight: number,\r\n\t) {\r\n\t\tthis.char = char;\r\n\t\tObject.defineProperty(this, \"weightInv\", { enumerable: true, value: 1.0 / weight });\r\n\t\t// The above choice of a numerator is not behaviourally significant.\r\n\t\t// All that is required is that all single-mappings in a `Lang` use\r\n\t\t// a consistent value.\r\n\t\tObject.seal(this); //🧊\r\n\t}\r\n\tpublic reset(): void {\r\n\t\tthis.hits = 0.0;\r\n\t}\r\n\tpublic _incrementNumHits(): void {\r\n\t\tthis.hits += this.weightInv;\r\n\t}\r\n};\r\nObject.freeze(WeightedLangChar);\r\nObject.freeze(WeightedLangChar.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Lang as _Lang } from \"defs/TypeDefs\";\r\n\r\nimport { LangSeqTree } from \"./LangSeqTreeNode\";\r\n\r\n/**\r\n * A language is a map from a collection of unique characters to\r\n * corresponding key-sequences. the key-sequences may be non-unique.\r\n * (try searching up \"Chinese riddle where each syllable is pronounced\r\n * 'shi'\"). A character may have more than one corresponding sequence,\r\n * representing alternate \"spellings\" (ways of typing it).\r\n *\r\n * ### From Typeable Sequences to Written Characters\r\n *\r\n * To the game internals, the reverse thinking is more important: As\r\n * a map from typeable key-sequences to sets of language-unique written\r\n * characters (no character is mapped by multiple key-sequences). We\r\n * do not require support for retrieving the sequence corresponding to\r\n * a written character.\r\n *\r\n * ### Implementation Guide\r\n *\r\n * See the readme in [the implementations folder](./impl/readme.md)\r\n * for a guide on writing implementations of this class.\r\n */\r\nexport abstract class Lang extends _Lang {\r\n\r\n\tpublic readonly frontendDesc: Lang.FrontendDesc;\r\n\r\n\t/** A \"reverse\" map from `LangSeq`s to `LangChar`s. */\r\n\tprivate readonly treeRoots: readonly LangSeqTree.Node[];\r\n\r\n\t/**\r\n\t * A list of leaf nodes in `treeRoots` sorted in ascending order by\r\n\t * hit-count. Entries should never be removed or added. They will\r\n\t * always be sorted in ascending order of `carryHits`.\r\n\t */\r\n\tprivate readonly leafNodes: LangSeqTree.Node[];\r\n\r\n\t/**\r\n\t * The total number of leaf noes of all root nodes except the\r\n\t * root node with the most leaf nodes.\r\n\t */\r\n\tpublic readonly isolatedMinOpts: number;\r\n\r\n\t/** */\r\n\tprotected constructor(\r\n\t\tfrontendDescId: Lang.FrontendDesc[\"id\"],\r\n\t\tweightExaggeration: Lang.WeightExaggeration,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis.frontendDesc = Lang.GET_FRONTEND_DESC_BY_ID(frontendDescId)!;\r\n\t\tthis.treeRoots = LangSeqTree.Node.CREATE_TREE_MAP(\r\n\t\t\t(Object.getPrototypeOf(this).constructor as Lang.ClassIf).BUILD(),\r\n\t\t\tweightExaggeration,\r\n\t\t);\r\n\t\tconst leaves = this.treeRoots.map((root) => root.getLeaves());\r\n\t\tthis.leafNodes = leaves.flat();\r\n\t\tthis.isolatedMinOpts = leaves.map((l) => l.length).sort().slice(0,-1).reduce((s,n) => s+n, 0);\r\n\t\tJsUtils.propNoWrite(this as Lang, \"frontendDesc\", \"treeRoots\", \"leafNodes\", \"isolatedMinOpts\");\r\n\t\tObject.seal(this); //🧊\r\n\r\n\t\tif (DEF.DevAssert && this.isolatedMinOpts !== this.frontendDesc.isolatedMinOpts) {\r\n\t\t\tthrow new Error(`maintenance required: the frontend constant`\r\n\t\t\t+` for the language \"${this.frontendDesc.id}\" needs to`\r\n\t\t\t+` be updated to the correct, computed value, which is`\r\n\t\t\t+` \\`${this.isolatedMinOpts}\\`.`);\r\n\t\t}\r\n\t}\r\n\r\n\t/** */\r\n\tpublic reset(): void {\r\n\t\tfor (const root of this.treeRoots) {\r\n\t\t\troot.reset();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @returns\r\n\t * A random char in this language whose corresponding sequence is\r\n\t * not a prefix of any `Lang.Seq` in `avoid`, and vice versa. Ie.\r\n\t * They may share a common prefix as long as they are both longer\r\n\t * than the shared prefix.\r\n\t *\r\n\t * @description\r\n\t * This method is called to shuffle the char-seq pair at some tile\r\n\t * A. `avoid` should contain the lang-sequences from all tiles\r\n\t * reachable by a player occupying any tile B from which they can\r\n\t * also reach A (except for A itself).\r\n\t *\r\n\t * @param avoid\r\n\t * A collection of `Lang.Seq`s to avoid conflicts with when choosing\r\n\t * a `Lang.Char` to return. Empty-string entries are ignored. Freezing\r\n\t * may result in better performance.\r\n\t *\r\n\t * @requires\r\n\t * The number of leaves in an implementation's tree-structure must\r\n\t * be greater than the number of non-empty entries in\r\n\t * `avoid` for all expected combinations of internal state and\r\n\t * passed-arguments under which it could be called.\r\n\t */\r\n\tpublic getNonConflictingChar(\r\n\t\tavoid: TU.RoArr<Lang.Seq>,\r\n\t): Lang.CharSeqPair {\r\n\t\t// Internal explainer: We must find characters from nodes that\r\n\t\t// are not descendants or ancestors of nodes in `avoid`. This\r\n\t\t// means that none of the ancestors or descendants of nodes in\r\n\t\t// `avoid` are also in `avoid`.\r\n\r\n\t\t// Start by sorting according to the desired balancing scheme:\r\n\t\tthis.leafNodes.sort(LangSeqTree.Node.LEAF_CMP);\r\n\r\n\t\tsearch_branch:\r\n\t\tfor (const leaf of this.leafNodes) {\r\n\t\t\tlet hitNode = leaf;\r\n\t\t\tfor (\r\n\t\t\t\tlet node: LangSeqTree.Node | undefined = leaf;\r\n\t\t\t\tnode !== undefined;\r\n\t\t\t\tnode = node.parent\r\n\t\t\t) {\r\n\t\t\t\tconst superSeq = avoid.find((avoidSeq) => avoidSeq.startsWith(node!.seq));\r\n\t\t\t\t// ^Using `find` is fine. There can only ever be one or none.\r\n\t\t\t\tif (superSeq) {\r\n\t\t\t\t\tif (superSeq.length > node.seq.length) {\r\n\t\t\t\t\t\t// Nothing shorter/upstream will work.\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Branch contains an avoid node.\r\n\t\t\t\t\t\tcontinue search_branch;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Find the node with the lowest personal hit-count:\r\n\t\t\t\tif (node.ownHits < hitNode.ownHits) {\r\n\t\t\t\t\thitNode = node;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn hitNode.chooseOnePair();\r\n\t\t}\r\n\t\t// Enforced by UI and server:\r\n\t\tthrow new Error(\"never\");\r\n\t}\r\n}\r\nexport namespace Lang {\r\n\t/**\r\n\t * Every constructor function (class literal) implementing the\r\n\t * `Lang` class must implement this interface.\r\n\t */\r\n\texport interface ClassIf {\r\n\t\tnew (weightScaling: Lang.WeightExaggeration): Lang;\r\n\t\tBUILD(): WeightedForwardMap;\r\n\t};\r\n\t/**\r\n\t * Utility functions for implementations to use in their static\r\n\t * `.BUILD` function.\r\n\t */\r\n\texport namespace BuildUtils {\r\n\t\texport function WORD_FOR_WORD(seq2Weight: Record<Lang.Seq,number>): Lang.WeightedForwardMap {\r\n\t\t\treturn Object.entries(seq2Weight).freeze().reduce<Lang.WeightedForwardMap>(\r\n\t\t\t\t(accumulator, [char,weight]) => {\r\n\t\t\t\t\taccumulator[char] = { seq: char, weight };\r\n\t\t\t\t\treturn accumulator;\r\n\t\t\t\t}, {},\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An atomic unit in a written language that constitutes a single\r\n\t * character. It is completely unique in its language, and has a\r\n\t * single corresponding sequence (string) typeable on a keyboard.\r\n\t */\r\n\texport type Char = _Lang.Char;\r\n\r\n\t/**\r\n\t * A sequence of characters each matching {@link SEQ_REGEXP}\r\n\t * that represent the intermediate interface between an Operator\r\n\t * and a `LangChar`. The immediate interface is through the `Lang`\r\n\t * implementation's {@link Lang#remapKey} method.\r\n\t */\r\n\texport type Seq = _Lang.Seq;\r\n\r\n\t/**\r\n\t * A key-value pair containing a `LangChar` and its corresponding\r\n\t * `LangSeq`.\r\n\t */\r\n\texport type CharSeqPair = _Lang.CharSeqPair;\r\n\r\n\t/**\r\n\t * A map from written characters to their corresponding typeable\r\n\t * keyboard sequence and relative spawn weight.\r\n\t *\r\n\t * Shape that must be passed in to the static tree producer. The\r\n\t * `Record` type enforces the invariant that {@link Lang.Char}s are\r\n\t * unique in a {@link Lang}. \"CSP\" is short for {@link Lang.CharSeqPair}.\r\n\t */\r\n\texport type WeightedForwardMap = Record<\r\n\t\tLang.Char,\r\n\t\tReadonly<{seq: Lang.Seq, weight: number,}>\r\n\t>/* | Readonly<Record<Lang.Seq, number>> */;\r\n\r\n\t/**\r\n\t * A value used to scale the variance in weights. Passing zero will\r\n\t * cause all weights to be adjusted to equal the average weight.\r\n\t * Passing `1` will cause no adjustment to be made to the weights.\r\n\t * Passing a value greater than one will cause an exaggeration of\r\n\t * the weight distribution.\r\n\t */\r\n\texport type WeightExaggeration = _Lang.WeightExaggeration;\r\n\r\n\texport type FrontendDesc = _Lang.FrontendDesc;\r\n}\r\nObject.freeze(Lang);\r\nObject.freeze(Lang.prototype);","var map = {\n\t\"./Chinese.ts\": [\n\t\t83,\n\t\t7,\n\t\t330\n\t],\n\t\"./Emote.ts\": [\n\t\t985,\n\t\t9,\n\t\t858\n\t],\n\t\"./English.ts\": [\n\t\t825,\n\t\t9,\n\t\t184\n\t],\n\t\"./Japanese.ts\": [\n\t\t885,\n\t\t9,\n\t\t410\n\t],\n\t\"./Korean.ts\": [\n\t\t969,\n\t\t9,\n\t\t227\n\t],\n\t\"./Ngrams.ts\": [\n\t\t755,\n\t\t9,\n\t\t273\n\t],\n\t\"./Numpad.ts\": [\n\t\t444,\n\t\t9,\n\t\t683\n\t],\n\t\"./Shell.ts\": [\n\t\t25,\n\t\t9,\n\t\t159\n\t],\n\t\"./defs/Chinese.ts\": [\n\t\t711,\n\t\t7,\n\t\t704\n\t],\n\t\"./defs/English100.ts\": [\n\t\t589,\n\t\t9,\n\t\t885\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 59;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"chunk/\" + {\"159\":\"lang/Shell-ts\",\"184\":\"lang/English-ts\",\"227\":\"lang/Korean-ts\",\"273\":\"lang/Ngrams-ts\",\"330\":\"lang/Chinese-ts\",\"410\":\"lang/Japanese-ts\",\"683\":\"lang/Numpad-ts\",\"704\":\"lang/defs-Chinese-ts\",\"858\":\"lang/Emote-ts\",\"885\":\"lang/defs-English100-ts\"}[chunkId] + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express-static-gzip\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ws\");;","import type { Player } from \"defs/TypeDefs\";\r\nimport type NodeWebSocket from \"ws\";\r\n\r\n/** Serverside-only. */\r\nexport function SOCKET_ID(socket: NodeWebSocket): string | never {\r\n\t// What has it got it its socketses?\r\n\t// STRING!? or NOTHING!\r\n\tif (_socketIds.has(socket)) {\r\n\t\treturn _socketIds.get(socket)!;\r\n\t} else {\r\n\t\tthrow new Error(\"never\");\r\n\t}\r\n}\r\nexport function SET_SOCKET_ID(socket: NodeWebSocket, id: string): void {\r\n\t_socketIds.set(socket, id);\r\n}\r\nconst _socketIds = new WeakMap<NodeWebSocket, string>();\r\n\r\n\r\n/** */\r\nexport abstract class Group { }\r\nexport namespace Group {\r\n\texport type Name = string;\r\n\texport namespace Name {\r\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]+)$/;\r\n\t\texport const MaxLength = 30;\r\n\t}\r\n\texport type Passphrase = string;\r\n\texport namespace Passphrase {\r\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]*)$/;\r\n\t\texport const MaxLength = 30;\r\n\t}\r\n\texport const GameServerReconnectionAttempts = 2;\r\n\texport const DEFAULT_TTL = 20; // seconds\r\n}\r\nObject.freeze(Group);\r\nObject.freeze(Group.prototype);\r\n\r\n\r\n/** */\r\nexport namespace JoinerEv {\r\n\t/** */\r\n\texport namespace Create {\r\n\t\texport const NAME = \"joiner/create\";\r\n\t\texport interface Req {\r\n\t\t\treadonly groupName: Group.Name,\r\n\t\t\treadonly passphrase: Group.Passphrase,\r\n\t\t}\r\n\t\texport type Res = boolean;\r\n\t}\r\n\t/** */\r\n\texport namespace Exist {\r\n\t\texport const NAME = \"joiner/exist\";\r\n\t\t/** Downstream only. */\r\n\t\texport type Sse = {\r\n\t\t\treadonly [groupName : string]: Status;\r\n\t\t};\r\n\t\texport const enum Status {\r\n\t\t\tIN_LOBBY = \"in-lobby\",\r\n\t\t\tIN_GAME  = \"in-game\",\r\n\t\t\tDELETE   = \"delete\",\r\n\t\t};\r\n\t}\r\n\t/** */\r\n\texport namespace TryJoin {\r\n\t\texport const NAME = \"joiner/try-join\";\r\n\t\texport interface Req {\r\n\t\t\treadonly groupName: Group.Name;\r\n\t\t\treadonly passphrase: Group.Passphrase;\r\n\t\t\treadonly userInfo: Player.UserInfo;\r\n\t\t}\r\n\t\texport type Res = boolean;\r\n\t}\r\n}\r\nObject.freeze(JoinerEv);\r\n\r\n\r\n/** */\r\nexport namespace GroupEv {\r\n\t/** */\r\n\texport namespace UserInfo {\r\n\t\texport const NAME = \"group/user-info-change\";\r\n\t\texport type Req = Player.UserInfo;\r\n\t\texport type Res = Record<string, Player.UserInfo | null>;\r\n\t}\r\n\r\n\t/** A broadcast originating from the group host. */\r\n\texport const CREATE_GAME = \"group/create-game\";\r\n}\r\nObject.freeze(GroupEv);\r\n\r\n\r\n/** */\r\nexport const enum GameEv {\r\n\t/**\r\n\t * Upon constructing a _new_ game, the server waits for all clients\r\n\t * to send this event to indicate that they have finished building\r\n\t * any necessary HTML, and are now ready to receive the serialized\r\n\t * reset-state.\r\n\t */\r\n\tRESET = \"game/reset\",\r\n\r\n\t/**\r\n\t * Client uses this event during reset procedure after receiving\r\n\t * the serialized reset-state to indicate that it is ready for\r\n\t * the game to be un-paused.\r\n\t */\r\n\tUNPAUSE = \"game/unpause\",\r\n\r\n\t/** */\r\n\tPAUSE = \"game/pause\",\r\n\r\n\t/** */\r\n\tIN_GAME = \"game/ingame\",\r\n\r\n\t/**\r\n\t * The server will send this event with no arguments to indicate\r\n\t * that everyone must now return to the lobby, or with a socket\r\n\t * ID as an argument to indicate that all players operated by\r\n\t * a client with that socket ID are out of the game.\r\n\t */\r\n\tRETURN_TO_LOBBY = \"game/return-to-lobby\",\r\n};","import type { Lang } from \"defs/TypeDefs\";\r\nimport type { Coord } from \"floor/Tile\";\r\nimport type { Grid } from \"floor/Grid\";\r\nimport type { Player } from \"./player/Player\";\r\nimport type { OperatorPlayer } from \"./player/OperatorPlayer\";\r\nimport type { GameMirror } from \"./gameparts/GameMirror\";\r\n\r\n/**\r\n * **Important** To be properly disposed of, a game must first have\r\n * either naturally ended, or be paused- both operations of which will\r\n * properly cancel all internal scheduled callbacks (the callbacks\r\n * refer to players, which refer to their game, which refers to a\r\n * whole lot of other things such as the language dictionary, which\r\n * in some cases may be quite large.)\r\n *\r\n * These classes perform the majority of management over {@link Tile}\r\n * and {@link Player} objects. As a design choice, players can only join\r\n * a game before it starts, and actions such as changing the language or\r\n * difficulty require a restart. These actions that require a restart will\r\n * all be exposed through a pre-game page.\r\n *\r\n * There are overlaps between what each implementation needs to do:\r\n * - Offline and Server games maintain and control the master-game-state.\r\n * - Offline and Client games display the game-state to an operator via browser and HTML.\r\n * - Client  and Server games use network operations to communicate.\r\n */\r\nexport namespace Game {\r\n\r\n\t/**\r\n\t * Unlike CtorArgs, these are not passed as no-prototype objects\r\n\t * (possibly over the network) from the game manager to clients.\r\n\t * These are abstract handles to game-implementation-dependant\r\n\t * components.\r\n\t */\r\n\texport type ImplArgs = {\r\n\t\tgridClassLookup<S extends Coord.System>(coordSys: S): Grid.ClassIf<S>;\r\n\t\tOperatorPlayer: typeof OperatorPlayer | undefined;\r\n\t\tRobotPlayer: (_this: GameMirror, desc: Player._CtorArgs[Player.RobotFamily]) => Player;\r\n\t\tonGameBecomeOver: () => void;\r\n\t};\r\n\r\n\tinterface _CtorArgsBase<S extends Coord.System> {\r\n\t\treadonly coordSys: S;\r\n\t\treadonly gridDimensions: Grid.Dimensions[S];\r\n\t\treadonly averageHealthPerTile: Player.Health;\r\n\t\treadonly langId: Lang.FrontendDesc[\"id\"];\r\n\t\treadonly langWeightExaggeration: Lang.WeightExaggeration;\r\n\t}\r\n\r\n\t/**\r\n\t * Game Constructor Arguments\r\n\t *\r\n\t * Important internal note: Upon modification, make appropriate\r\n\t * changes to GameManager's function for verifying validity of\r\n\t * client input on the server side.\r\n\t *\r\n\t * @template S\r\n\t * The coordinate system to use. The literal value must also be\r\n\t * passed as the field `coordSys`.\r\n\t */\r\n\texport interface CtorArgs<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\r\n\t\treadonly players: readonly Player.CtorArgs[];\r\n\t};\r\n\texport namespace CtorArgs {\r\n\t\texport interface UnFin<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\r\n\t\t\treadonly players: readonly Player.CtorArgs.UnFin[];\r\n\t\t}\r\n\t\t/** */\r\n\t\texport type FailureReasons = {\r\n\t\t\tmissingFields: Array<keyof CtorArgs<Coord.System>>;\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Serialization of the Game State after a reset.\r\n\t *\r\n\t * Only contains state information that would not be known by a\r\n\t * non-Game Manager.\r\n\t */\r\n\texport interface ResetSer {\r\n\t\t/**\r\n\t\t * Indexed by index according to `Grid.forEach` - not by the\r\n\t\t * `Tile.coord`s of `Grid.forEach` (they may differ).\r\n\t\t */\r\n\t\treadonly csps: readonly Lang.CharSeqPair[];\r\n\t\t/**\r\n\t\t * A map from player ID's to their starting coordinates.\r\n\t\t */\r\n\t\treadonly playerCoords: readonly Coord[];\r\n\t};\r\n\r\n\t/**\r\n\t * - **`PLAYING`** can go to:\r\n\t *   - `PAUSED`: when a pause request initiated by a player is accepted.\r\n\t *   - `OVER`:  when certain conditions of players being downed are met.\r\n\t * - **`PAUSED`** can go to:\r\n\t *   - `PLAYING`: similar to PLAYING->PAUSED.\r\n\t * - **`OVER`** can go to:\r\n\t *   - `PLAYING`: via resetting the game.\r\n\t */\r\n\texport enum Status {\r\n\t\tPLAYING = \"PLAYING\",\r\n\t\tPAUSED  = \"PAUSED\",\r\n\t\tOVER    = \"OVER\",\r\n\t}\r\n\tObject.freeze(Status);\r\n\r\n\t/**\r\n\t * Global, Game-Setup-Agnostic constants for tuning game behaviour.\r\n\t *\r\n\t * Keys beginning with an underscore are probably of no interest to\r\n\t * people playing the game.\r\n\t */\r\n\texport const K = Object.freeze(<const>{\r\n\t\t/**\r\n\t\t * A value in `(0,1]`. If `1`, then new health will be spawned\r\n\t\t * the next time `dryRunSpawnFreeHealth` is called. This is the\r\n\t\t * reciprocal of the average number of calls that must be to\r\n\t\t * `dryRunSpawnFreeHealth` before a unit of health will be\r\n\t\t * re-spawned after being consumed.\r\n\t\t */\r\n\t\t_HEALTH_UPDATE_CHANCE: 0.1,\r\n\r\n\t\t/**\r\n\t\t * Affects the distribution of health across the grid: \"How\r\n\t\t * concentrated or how diluted the average amount of health on\r\n\t\t * the grid will be\". Higher values cause concentration; lower\r\n\t\t * values result in dilution.\r\n\t\t */\r\n\t\t\"AVERAGE_HEALTH_TO_SPAWN_ON_TILE\": 1.0,\r\n\r\n\t\t/**\r\n\t\t * A value in `(0,1]`. If `1`, then players can (on average),\r\n\t\t * boost indefinitely. If close to zero, then players virtually\r\n\t\t * cannot boost, no matter how much health they have. If `0.3`,\r\n\t\t * players can boost for roughly 30% of the movements they make.\r\n\t\t *\r\n\t\t * This value assumes that the player moves around aimlessly\r\n\t\t * and randomly. Adjustments for more rational assumptions are\r\n\t\t * not to be made _here_.\r\n\t\t */\r\n\t\t\"PORTION_OF_MOVES_THAT_ARE_BOOST\": 0.4,\r\n\r\n\t\t/**\r\n\t\t * Takes into consideration all contributing factors to determine\r\n\t\t * how much health it should cost to perform a single boost.\r\n\t\t *\r\n\t\t * It calculates for the following behaviour: Assuming that a\r\n\t\t * player is only trying to collect health and always takes the\r\n\t\t * optimal route, how much health should it cost them to boost\r\n\t\t * such that they can only only boost for a determined percentage\r\n\t\t * of all their movement actions?\r\n\t\t */\r\n\t\t_HEALTH_COST_OF_BOOST(\r\n\t\t\taverageHealthPerTile: Player.Health,\r\n\t\t\tgridGetDiameter: (area: number) => number,\r\n\t\t): Player.Health {\r\n\t\t\t// First, assume that a player has just landed on a tile\r\n\t\t\t// with free health, and now plans to take the optimal\r\n\t\t\t// route to the nearest tile with free health. Assume that\r\n\t\t\t// Health is distributed uniformly, and spaced evenly apart.\r\n\t\t\t// Then the grid/floor can be nicely divided into similar\r\n\t\t\t// patches each with one tile with free health in the center.\r\n\t\t\t// Find the diameter of a patch:\r\n\t\t\tconst patchArea = this.AVERAGE_HEALTH_TO_SPAWN_ON_TILE / averageHealthPerTile;\r\n\t\t\tconst patchDiameter = gridGetDiameter(patchArea);\r\n\r\n\t\t\t// The patch diameter is the average optimal distance to\r\n\t\t\t// the nearest tile with health (the center of the nearest\r\n\t\t\t// patch). We know how much health awaits there, so we can\r\n\t\t\t// find the average rate of health gain per movement on an\r\n\t\t\t// optimal health-seeking path.\r\n\t\t\tconst healthGainedPerOptimalMove\r\n\t\t\t\t= this.AVERAGE_HEALTH_TO_SPAWN_ON_TILE / patchDiameter;\r\n\r\n\t\t\t// Since the portion of moves that can be boosts equals\r\n\t\t\t// the rate of health gain divided by the health cost of\r\n\t\t\t// boosting, (rearrange terms to solve):\r\n\t\t\treturn healthGainedPerOptimalMove / this.PORTION_OF_MOVES_THAT_ARE_BOOST;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * A value in `(0,1]` (values greater than one are legal from\r\n\t\t * a mathematical standpoint, but not from one of game-design).\r\n\t\t * Scales the health received from picking up free health for\r\n\t\t * a player who is downed.\r\n\t\t *\r\n\t\t * This value exists to dampen the ability for team members to\r\n\t\t * regenerate health when downed so that it takes a (subjectively)\r\n\t\t * \"reasonable\" amount of effort to eliminate an entire team-\r\n\t\t * not too much, not too little.\r\n\t\t */\r\n\t\t\"HEALTH_EFFECT_FOR_DOWNED_PLAYER\": 0.6,\r\n\r\n\t\t/**\r\n\t\t * A strictly-positive integer. Indicates the maximum number\r\n\t\t * of requests which a clientside player can buffer.\r\n\t\t */\r\n\t\t_REQUEST_BUFFER_LENGTH: 5,\r\n\r\n\t\t/**\r\n\t\t * How many times a Decisive RobotPlayer can reuse its cached\r\n\t\t * target before it will do another cold analysis of its\r\n\t\t * surroundings.\r\n\t\t */\r\n\t\t_ROBOT_PRIORITY_MAX_REUSES: 4,\r\n\t});\r\n}\r\nObject.freeze(Game);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Game } from \"game/Game\";\r\n\r\nimport type { Coord }       from \"floor/Tile\";\r\nimport type { StateChange } from \"game/StateChange\";\r\nimport { Player as _Player } from \"defs/TypeDefs\";\r\n\r\n/**\r\n * Used to buffer requests when there is network delay.\r\n *\r\n * This allows for the client to pipeline a certain number of\r\n * requests. If a request is rejected, all following requests are\r\n * invalid, and the server can\r\n */\r\nexport class RequestBuffer {\r\n\r\n\t#lastRejectId = 0; public get lastRejectId(): number { return this.#lastRejectId; };\r\n\tprivate length = 0;\r\n\tpublic predictedCoord: Coord;\r\n\r\n\tpublic reset(coord: Coord): void {\r\n\t\tthis.#lastRejectId = 0;\r\n\t\tthis.length = 0;\r\n\t\tthis.predictedCoord = coord;\r\n\t}\r\n\r\n\tpublic get isFull(): boolean {\r\n\t\treturn this.length === Game.K._REQUEST_BUFFER_LENGTH;\r\n\t}\r\n\r\n\t/** @requires `!this.isFull` */\r\n\tpublic signRequest(req: StateChange.Req): StateChange.Req {\r\n\t\tif (DEF.DevAssert && this.isFull) {\r\n\t\t\tthrow new Error(\"never\");\r\n\t\t}\r\n\t\tthis.length++;\r\n\t\tthis.predictedCoord = req.moveDest;\r\n\t\treturn req;\r\n\t}\r\n\r\n\tpublic getNextRejectId(): number {\r\n\t\t// return (this.lastRejectId === 0) ? 1 : 0;\r\n\t\t// Above option returns an \"elegant\" value.\r\n\t\t// Below returns a hard-to-guess value.\r\n\t\treturn (this.lastRejectId + Math.floor(99 * Math.random())) % 100;\r\n\t}\r\n\t/**\r\n\t * Every request signed with the previous rejectId will be\r\n\t * silently dropped by the game manager.\r\n\t */\r\n\tpublic reject(rejectId: number, realCoord: number): void {\r\n\t\tthis.#lastRejectId = rejectId;\r\n\t\tthis.length = 0;\r\n\t\tthis.predictedCoord = realCoord;\r\n\t}\r\n\tpublic acceptOldest(): void {\r\n\t\t// TODO.design this is technically invalid for artificial players\r\n\t\t// on the client side of an online game... Can we move reqBuffer\r\n\t\t// to be just for OperatorPlayers?\r\n\r\n\t\t// if (DEF.DevAssert && this.length === 0) {\r\n\t\t// \tthrow new Error(\"never\");\r\n\t\t// }\r\n\t\tthis.length--;\r\n\t}\r\n}\r\nObject.freeze(RequestBuffer);\r\nObject.freeze(RequestBuffer.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport type { Player } from \"./Player\";\r\n\r\n/**\r\n * @final\r\n */\r\nexport class Team {\r\n\r\n\t/**\r\n\t * @returns\r\n\t * Indicates the order (relative to other teams) in which this\r\n\t * team was to have all its members downed at the same time at\r\n\t * least once. Once a team is soft-eliminated, they can continue\r\n\t * playing as normal, but there is no going back. The game ends\r\n\t * when all teams but one have been eliminated.\r\n\t *\r\n\t * ### Semantics\r\n\t *\r\n\t * A comparatively smaller value denotes having been\r\n\t * eliminated at an earlier point in the game. **The value zero\r\n\t * denotes _not-having-been-eliminated-yet_**.\r\n\t */\r\n\tpublic elimOrder: number = Team.ElimOrder.STANDING;\r\n\r\n\tpublic constructor(\r\n\t\tpublic readonly id: Team.Id,\r\n\t\tpublic readonly members: TU.RoArr<Player>,\r\n\t) {\r\n\t\tJsUtils.propNoWrite(this as Team, \"id\", \"members\");\r\n\t\tObject.seal(this); //🧊\r\n\t\tif (members.length === 0) {\r\n\t\t\tthrow new Error(\"Teams must have at least one member.\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.elimOrder = Team.ElimOrder.STANDING;\r\n\t}\r\n}\r\nexport namespace Team {\r\n\r\n\texport type Id = number;\r\n\r\n\texport type ElimOrder = number;\r\n\r\n\t// Special values:\r\n\texport namespace ElimOrder {\r\n\t\t/**\r\n\t\t * A team that is not invincible starts off with such a value.\r\n\t\t */\r\n\t\texport const STANDING = 0;\r\n\t}\r\n}\r\nObject.freeze(Team);\r\nObject.freeze(Team.prototype);","import type * as WebSocket from \"ws\";\r\nimport { JsUtils } from \"defs/JsUtils\";\r\nimport { Game } from \"game/Game\";\r\n\r\nimport type { Coord }       from \"floor/Tile\";\r\nimport type { RobotPlayer } from \"./RobotPlayer\";\r\nimport type { GameMirror }  from \"game/gameparts/GameMirror\";\r\n\r\nimport { RequestBuffer } from \"./RequestBuffer\";\r\nimport { Player as _Player } from \"defs/TypeDefs\";\r\nimport { Team } from \"./Team\";\r\n\r\n/** */\r\nexport class Player extends _Player implements _Player.UserInfo {\r\n\r\n\tpublic readonly playerId: Player.Id;\r\n\tpublic readonly familyId: Player.Family;\r\n\tpublic readonly teamId:   Team.Id;\r\n\tpublic readonly username: Player.Username;\r\n\tpublic readonly avatar:   Player.Avatar;\r\n\r\n\tprotected readonly game: GameMirror<any>;\r\n\tpublic readonly reqBuffer: RequestBuffer;\r\n\t#coord: Coord;\r\n\t#health: Player.Health = 0.0;\r\n\r\n\tpublic prevCoord: Coord = undefined!;\r\n\r\n\tpublic get team(): Team        { return this.game.teams[this.teamId]!; }\r\n\tpublic get coord(): Coord      { return this.#coord; }\r\n\tpublic get health(): number    { return this.#health; }\r\n\tpublic get isDowned(): boolean { return this.health < 0.0; }\r\n\r\n\tpublic isTeamedWith(other: Player): boolean {\r\n\t\treturn this.team.members.includes(other);\r\n\t}\r\n\r\n\t/** */\r\n\tpublic constructor(game: GameMirror<any>, desc: Player.CtorArgs) {\r\n\t\tsuper();\r\n\r\n\t\tthis.playerId = desc.playerId;\r\n\t\tthis.familyId = desc.familyId;\r\n\t\tthis.teamId   = desc.teamId;\r\n\t\tthis.username = desc.username;\r\n\t\tthis.avatar   = desc.avatar;\r\n\r\n\t\tthis.game = game;\r\n\t\tthis.reqBuffer = new RequestBuffer();\r\n\r\n\t\tJsUtils.instNoEnum (this as Player, \"game\");\r\n\t\tJsUtils.propNoWrite(this as Player, \"game\",\r\n\t\t\t\"playerId\", \"familyId\", \"teamId\",\r\n\t\t\t\"username\", \"avatar\", \"reqBuffer\",\r\n\t\t);\r\n\t\tif (new.target === Player) {\r\n\t\t\tObject.seal(this); //🧊\r\n\t\t}\r\n\t}\r\n\r\n\t/** @virtual */\r\n\tpublic onTeamsBootstrapped(): void { }\r\n\r\n\t/** Must be called _after_ the grid has been reset. */\r\n\tpublic reset(coord: Coord): void {\r\n\t\tthis.#coord = coord;\r\n\t\tthis.prevCoord = coord;\r\n\t\tthis.game.grid.write(coord, {\r\n\t\t\toccId: this.playerId,\r\n\t\t});\r\n\t\tthis.#health = 0.0;\r\n\t\tthis.reqBuffer.reset(coord);\r\n\t}\r\n\r\n\t/** @virtual Overrides must call super. */\r\n\tpublic onGamePlaying(): void { }\r\n\r\n\t/** @virtual The default implementation does nothing. */\r\n\tpublic onGamePaused(): void { }\r\n\r\n\t/** @virtual The default implementation does nothing. */\r\n\tpublic onGameOver(): void { }\r\n\r\n\t/** @final */\r\n\tprotected makeMovementRequest(dest: Coord, type: Player.MoveType): void {\r\n\t\tif (DEF.DevAssert) {\r\n\t\t\tif (this.game.status !== Game.Status.PLAYING) {\r\n\t\t\t\t// This is not a necessary precondition, but we're doing it anyway.\r\n\t\t\t\tthrow new Error(\"never\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.reqBuffer.isFull) return; //⚡\r\n\r\n\t\tthis.game.processMoveRequest(this.reqBuffer.signRequest({\r\n\t\t\tinitiator: this.playerId,\r\n\t\t\tlastRejectId: this.reqBuffer.lastRejectId,\r\n\t\t\tmoveType: type,\r\n\t\t\tmoveDest: dest,\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Notify this Player.\r\n\t *\r\n\t * Causes this Player to update its internal state.\r\n\t * @virtual\r\n\t */\r\n\tpublic setCoord(dest: Coord): void {\r\n\t\tthis.prevCoord = this.coord;\r\n\t\tthis.#coord = dest;\r\n\t}\r\n\r\n\tpublic set health(newHealth: Player.Health) {\r\n\t\tconst oldIsDowned = this.isDowned;\r\n\t\tthis.#health = newHealth;\r\n\r\n\t\tif (oldIsDowned || !this.isDowned) return;\r\n\t\tconst team  = this.team;\r\n\t\tconst teams = this.game.teams;\r\n\t\tif (team.elimOrder !== Team.ElimOrder.STANDING) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Right before this downing event, the team has not been\r\n\t\t// soft-eliminated yet, but it might be now. Check it:\r\n\t\tif (team.members.every((player) => player.isDowned)) {\r\n\t\t\t// All players are downed! The team is now eliminated:\r\n\t\t\tconst numNonStandingTeams\r\n\t\t\t\t= 1 + teams.filter((team) => {\r\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\r\n\t\t\t}).length;\r\n\r\n\t\t\tteam.elimOrder = 1 + teams.filter((team) => {\r\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\r\n\t\t\t}).length;\r\n\t\t\t// Now that a team is newly-eliminated, check if the\r\n\t\t\t// game should end:\r\n\t\t\tif (numNonStandingTeams === teams.length) {\r\n\t\t\t\tthis.game.statusBecomeOver();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nexport namespace Player {\r\n\r\n\texport type Family = _Player.Family;\r\n\texport type RobotFamily = TU.Xcld<Player.Family, \"HUMAN\">;\r\n\r\n\texport type Id = _Player.Id;\r\n\r\n\t/**\r\n\t * Health be picked up from the floor where it is randomly spawned\r\n\t * by the game manager. It can be used to attack enemy players, or\r\n\t * to heal teammates.\r\n\t */\r\n\texport type Health   = _Player.Health;\r\n\texport type Username = _Player.Username;\r\n\texport type Avatar   = _Player.Avatar;\r\n\texport type UserInfo = _Player.UserInfo;\r\n\r\n\t/** @enum */\r\n\texport type MoveType = keyof typeof MoveType;\r\n\texport const MoveType = Object.freeze(<const>{\r\n\t\tNORMAL: \"NORMAL\",\r\n\t\tBOOST:  \"BOOST\",\r\n\t});\r\n\tMoveType as { [ key in MoveType ]: key };\r\n\r\n\texport type Changes = {\r\n\t\treadonly coord?: Coord,\r\n\t\treadonly health: Player.Health,\r\n\t};\r\n\r\n\t/**\r\n\t * Player Constructor Arguments\r\n\t */\r\n\texport type CtorArgs = _CtorArgs[Player.Family];\r\n\texport type _CtorArgs = {\r\n\t\t[F in Player.Family]: _PreIdAssignmentDict[F] & Readonly<{\r\n\t\t\tplayerId: Player.Id;\r\n\t\t\tavatar: Avatar;\r\n\t\t}>;\r\n\t};\r\n\r\n\ttype _PreIdAssignmentDict = {\r\n\t\t[F in Player.Family]: F extends typeof Player.Family.HUMAN\r\n\t\t? _PreIdAssignmentConditional<F> & {\r\n\t\t\treadonly socket: WebSocket | undefined;\r\n\t\t}\r\n\t\t: _PreIdAssignmentConditional<F>;\r\n\t};\r\n\tinterface _PreIdAssignmentConditional<F extends Player.Family> extends UserInfo {\r\n\t\treadonly familyId: F;\r\n\t\treadonly familyArgs: CtorArgs.FamilySpecificPart[F];\r\n\t};\r\n\r\n\texport namespace CtorArgs {\r\n\r\n\t\texport type UnFin = _PreIdAssignmentDict[Player.Family];\r\n\r\n\t\texport interface FamilySpecificPart extends RobotPlayer.FamilySpecificPart {\r\n\t\t\t[Player.Family.HUMAN]: {};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns\r\n\t\t * Squashes teamId fields to be suitable for array indices.\r\n\t\t */\r\n\t\texport function finalize<S extends Coord.System>(\r\n\t\t\tgameDesc: Game.CtorArgs.UnFin<S>,\r\n\t\t): asserts gameDesc is Game.CtorArgs<S>\r\n\t\t{\r\n\t\t\tconst playerDescs: TU.RoArr<CtorArgs.UnFin> = gameDesc.players;\r\n\t\t\t// Map team ID's to consecutive numbers\r\n\t\t\t// (to play nice with array representations):\r\n\t\t\tconst teamIdCleaner: TU.RoArr<Team.Id>\r\n\t\t\t\t= Array.from(new Set(playerDescs.map((player) => player.teamId)))\r\n\t\t\t\t.sort((a, b) => a - b) // This is not a representation requirement.\r\n\t\t\t\t.reduce((prev, originalId, squashedId) => {\r\n\t\t\t\t\tprev[originalId] = squashedId;\r\n\t\t\t\t\treturn prev;\r\n\t\t\t\t}, [] as Array<Team.Id>);\r\n\r\n\t\t\t// @ts-expect-error : RO=\r\n\t\t\tgameDesc.players = playerDescs.slice()\r\n\t\t\t\t.sort((pda, pdb) => teamIdCleaner[pda.teamId]! - teamIdCleaner[pdb.teamId]!)\r\n\t\t\t\t.freeze()\r\n\t\t\t\t.map<CtorArgs>((playerDesc, index) => Object.assign({}, playerDesc, {\r\n\t\t\t\t\tplayerId: index,\r\n\t\t\t\t\tteamId:   teamIdCleaner[playerDesc.teamId]!,\r\n\t\t\t\t\tavatar:   playerDesc.avatar ?? Player.Avatar.GET_RANDOM(),\r\n\t\t\t\t}))\r\n\t\t\t\t.freeze();\r\n\t\t};\r\n\t}\r\n\tObject.freeze(CtorArgs);\r\n}\r\nJsUtils.protoNoEnum(Player,\r\n\t\"onGamePlaying\", \"onGamePaused\", \"onGameOver\",\r\n\t\"onTeamsBootstrapped\",\r\n);\r\nObject.freeze(Player);\r\nObject.freeze(Player.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Game } from \"../Game\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Grid } from \"floor/Grid\";\r\n\r\n/**\r\n * @final\r\n */\r\nexport class HealthInfo {\r\n\r\n\tpublic readonly K: HealthInfo.K;\r\n\t#currentAmount: number = 0.0;\r\n\tpublic readonly tiles = new Map<Coord, Tile>();\r\n\r\n\tpublic get currentAmount(): number { return this.#currentAmount; }\r\n\r\n\tpublic constructor(\r\n\t\tdesc: Game.CtorArgs,\r\n\t\tgridStatic: Grid.ClassIf<Coord.System>,\r\n\t) {\r\n\t\tconst baseCostOfBoost = Game.K._HEALTH_COST_OF_BOOST(\r\n\t\t\tdesc.averageHealthPerTile,\r\n\t\t\tgridStatic.getLatticePatchDiameter,\r\n\t\t);\r\n\t\tthis.K = Object.freeze({\r\n\t\t\tavg: desc.averageHealthPerTile * gridStatic.getArea(desc.gridDimensions),\r\n\t\t\tavgPerTile: desc.averageHealthPerTile,\r\n\t\t\tcostOfBoost: (dest: Tile) => baseCostOfBoost / dest.seq.length,\r\n\t\t});\r\n\t\tJsUtils.propNoWrite(this as HealthInfo, \"K\");\r\n\t\tObject.seal(this); //🧊\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tthis.#currentAmount = 0.0;\r\n\t\tthis.tiles.clear();\r\n\t}\r\n\r\n\tpublic add(amount: number): void {\r\n\t\tthis.#currentAmount += amount;\r\n\t}\r\n}\r\nexport namespace HealthInfo {\r\n\texport interface K {\r\n\t\treadonly avg: number;\r\n\t\treadonly avgPerTile: number;\r\n\t\treadonly costOfBoost: (dest: Tile) => number;\r\n\t}\r\n}\r\nObject.freeze(HealthInfo);\r\nObject.freeze(HealthInfo.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport type { Coord, Tile } from \"./Tile\";\r\nimport { Player } from \"defs/TypeDefs\";\r\n\r\nimport type { WrappedEuclid2 } from \"./impl/Euclid2/System\";\r\nimport type { Beehive } from \"./impl/Beehive/System\";\r\n\r\n/**\r\n * A Collection of Tiles.\r\n */\r\nexport abstract class Grid<S extends Coord.System> {\r\n\r\n\t// A type-annotated alias to this.constructor.\r\n\tpublic readonly static: Grid.ClassIf<S>;\r\n\r\n\tpublic readonly dimensions: Grid.Dimensions[S];\r\n\r\n\tpublic readonly area: number;\r\n\r\n\t/**\r\n\t * Protected. See `Grid.getImplementation` for how to access class\r\n\t * literals for construction.\r\n\t */\r\n\tprotected constructor(desc: Grid.CtorArgs<S>) {\r\n\t\tObject.freeze(desc);\r\n\t\tthis.static = desc.Grid;\r\n\t\tthis.dimensions = desc.dimensions;\r\n\t\tthis.area = desc.Grid.getArea(desc.dimensions);\r\n\t\tJsUtils.propNoWrite(this as Grid<S>, \"static\", \"dimensions\");\r\n\t}\r\n\r\n\t/** @virtual */\r\n\tpublic reset(): void {\r\n\t\tthis.forEach((tile) => {\r\n\t\t\tthis.write(tile.coord, {\r\n\t\t\t\toccId: Player.Id.NULL,\r\n\t\t\t\tchar: \"\", seq: \"\", health: 0,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/** */\r\n\tpublic abstract write(coord: Coord, changes: Readonly<Tile.Changes>): void;\r\n\r\n\t/**\r\n\t * For BaseGame's implementation of SER/DES to work, the traversal\r\n\t * order taken by an implementation of this method must depend\r\n\t * only on the dimensions of the instance. The index is not required\r\n\t * to equal the tile's coord.\r\n\t */\r\n\tpublic abstract forEach(callback: (tile: Tile, index: number) => void): void;\r\n\r\n\tpublic abstract forEachShuffled(callback: (tile: Tile, index: number) => void): void;\r\n\r\n\t/**\r\n\t * @returns\r\n\t * One of the closest unoccupied neighbouring tiles toward the\r\n\t * direction of `intendedDest`. When possible, ties are encouraged\r\n\t * to be broken in such a way that imitates movement in a straight\r\n\t * path (visually speaking).\r\n\t *\r\n\t * **Important:** If All destinations from sourceCoord are occupied\r\n\t * (which includes `sourceCoord` itself), the implementation must\r\n\t * return `sourceCoord`.\r\n\t *\r\n\t * @param intendedDest\r\n\t *\r\n\t * @param sourceCoord\r\n\t * The coordinate from which to find the next hop.\r\n\t */\r\n\tpublic abstract getUntToward(intendedDest: Coord, sourceCoord: Coord): Tile;\r\n\r\n\t/**\r\n\t * The opposite of `getUntToward`.\r\n\t *\r\n\t * Behaviour is undefined when both arguments are the same.\r\n\t */\r\n\tpublic abstract getUntAwayFrom(avoidCoord: Coord, sourceCoord: Coord): Tile;\r\n\r\n\t/**\r\n\t * The returned array should be assumed to be a shallow copy of\r\n\t * the corresponding Tile objects.\r\n\t *\r\n\t * This action is commonly performed by the GameManager when\r\n\t * shuffling in new CSP's to its grid.\r\n\t *\r\n\t * Implementations with wrapping edges must make sure that the\r\n\t * return value does not contain duplicate tile entries.\r\n\t *\r\n\t * @virtual\r\n\t * Grid implementations are encouraged to override this if they\r\n\t * have a more efficient way to produce the same result.\r\n\t */\r\n\tpublic getAllAltDestsThan(originCoord: Coord): TU.RoArr<Tile> {\r\n\t\treturn Array.from(new Set(\r\n\t\t\tthis.tileSourcesTo(originCoord)\r\n\t\t\t\t.flatMap((sourceToTarget) => this.tileDestsFrom(sourceToTarget.coord))\r\n\t\t));\r\n\t}\r\n\r\n\tpublic getRandomCoord(): Coord {\r\n\t\treturn this.static.getRandomCoord(this.dimensions);\r\n\t}\r\n\r\n\t/**\r\n\t * A coord that is at most `radius` movements away from `origin`.\r\n\t * The returned value does not necessarily need to be within this\r\n\t * grid's dimensions as long as the returned coordinate can be\r\n\t * meaningfully truncated by `getUntToward` when passing `origin`\r\n\t * as the `sourceCoord` argument.\r\n\t *\r\n\t * The returned value should follow a uniform distribution.\r\n\t */\r\n\tpublic abstract getRandomCoordAround(origin: Coord, radius: number): Coord;\r\n\r\n\t/** Treat the result as a shallow copy. */\r\n\tpublic abstract tileAt(coord: Coord): Tile;\r\n\t/** Treat the result as a shallow copy. */\r\n\tpublic abstract tileDestsFrom(coord: Coord): TU.RoArr<Tile>;\r\n\t/** Treat the result as a shallow copy. */\r\n\tpublic abstract tileSourcesTo(coord: Coord): TU.RoArr<Tile>;\r\n\r\n\t/**\r\n\t * The returned value must be consistent with results from the\r\n\t * methods `_getTileDestsFrom` and `_getTileSourcesTo`.\r\n\t */\r\n\tpublic abstract dist(source: Coord, dest: Coord): number;\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * Implementations are free to override this to spawn players in\r\n\t * pretty patterns.\r\n\t */\r\n\tpublic static getSpawnCoords(\r\n\t\tteamSizes: TU.RoArr<number>,\r\n\t\tdimensions: Grid.Dimensions[Coord.System],\r\n\t): TU.RoArr<TU.RoArr<Coord>> {\r\n\t\tconst avoidSet = new Set<Coord>();\r\n\t\treturn teamSizes.map((numMembers: number) => {\r\n\t\t\tconst teamSpawnCoords: Array<Coord> = [];\r\n\t\t\twhile (numMembers > 0) {\r\n\t\t\t\tlet coord: Coord;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tcoord = (this as unknown as Grid.ClassIf<any>).getRandomCoord(dimensions);\r\n\t\t\t\t} while (avoidSet.has(coord));\r\n\t\t\t\tteamSpawnCoords.push(coord);\r\n\t\t\t\tavoidSet.add(coord);\r\n\t\t\t\tnumMembers--;\r\n\t\t\t}\r\n\t\t\treturn teamSpawnCoords.freeze();\r\n\t\t}).freeze();\r\n\t}\r\n}\r\nexport namespace Grid {\r\n\r\n\t/** */\r\n\texport interface Dimensions {\r\n\t\t[Coord.System.W_EUCLID2]: WrappedEuclid2.Grid.Dimensions;\r\n\t\t[Coord.System.BEEHIVE]: Beehive.Grid.Dimensions;\r\n\t};\r\n\r\n\t// ==============================================================\r\n\t// Note: The below exports do not require any modifications with\r\n\t// the additions of new coordinate systems.\r\n\t// ==============================================================\r\n\r\n\texport type CtorArgs<S extends Coord.System> = Readonly<{\r\n\t\tGrid: Grid.ClassIf<S>;\r\n\t\tsystem: S;\r\n\t\tdimensions: Dimensions[S];\r\n\t\tplayers: any; // TODO.design\r\n\t}>;\r\n\r\n\t/**\r\n\t * Used to simulate abstract static methods.\r\n\t */\r\n\texport interface ClassIf<S extends Coord.System> {\r\n\r\n\t\t/** Constructor */\r\n\t\tnew(desc: CtorArgs<S>): Grid<S>;\r\n\r\n\t\t/**\r\n\t\t * @returns\r\n\t\t * The minimum number of leaf nodes a language must have to be\r\n\t\t * playable with this coordinate system's grid.\r\n\t\t *\r\n\t\t * Definition: The maximum possible number- for any tile in the\r\n\t\t * grid- of all destinations from sources to itself, excluding\r\n\t\t * itself.\r\n\t\t */\r\n\t\tambiguityThreshold: number;\r\n\r\n\t\t/**\r\n\t\t * @see Grid.DimensionBounds\r\n\t\t */\r\n\t\tsizeLimits: Grid.DimensionBounds<S>;\r\n\r\n\t\t/**\r\n\t\t * @returns\r\n\t\t * The number of Tiles that could fit in a Grid of such bounds.\r\n\t\t */\r\n\t\tgetArea(bounds: Dimensions[S]): number;\r\n\r\n\t\t/**\r\n\t\t * \\*Assuming the grid is lattice-like and is partitioned into\r\n\t\t * highly similar patches where each patch has a center, and\r\n\t\t * all tiles in the patch are closer to that center tile than\r\n\t\t * to any other patch's center tile. Returns the minimum number\r\n\t\t * of tiles that must be visited to get from the center of one\r\n\t\t * patch to any neighbouring patch.\r\n\t\t */\r\n\t\tgetLatticePatchDiameter(area: number): number;\r\n\r\n\t\t/**\r\n\t\t * @returns\r\n\t\t * A coordinate with random, integer-valued fields within the\r\n\t\t * specified upper limits\r\n\t\t */\r\n\t\tgetRandomCoord(bounds: Dimensions[S]): Coord;\r\n\r\n\t\t/**\r\n\t\t * Return values do not need to be the same for repeated calls\r\n\t\t * with identical arguments. None of the returned coordinates\r\n\t\t * should be the same.\r\n\t\t */\r\n\t\tgetSpawnCoords(\r\n\t\t\tteamSizes: TU.RoArr<number>,\r\n\t\t\tdimensions: Dimensions[S],\r\n\t\t): TU.RoArr<TU.RoArr<Coord>>;\r\n\t};\r\n\r\n\t// Each implementation must register itself into this dictionary.\r\n\t// See CmapManager.ts.\r\n\texport const _Constructors: {\r\n\t\treadonly [ S in Coord.System ]: Grid.ClassIf<S>\r\n\t} = {\r\n\t\t// These are initialized later to avoid bootstrapping issues.\r\n\t\t[\"W_EUCLID2\"]: undefined!,\r\n\t\t[\"BEEHIVE\"]: undefined!,\r\n\t};\r\n\r\n\t/**\r\n\t * @returns\r\n\t * A Grid class for the specified coordinate system.\r\n\t */\r\n\texport const getImplementation = <S extends Coord.System>(coordSys: S): ClassIf<S> => {\r\n\t\t// Note: At the time of writing this, separating this into\r\n\t\t// two lines is necessary (otherwise Typescript will feel\r\n\t\t// overwhelmed)\r\n\t\tconst ctor = _Constructors[coordSys];\r\n\t\treturn ctor as unknown as ClassIf<S>;\r\n\t};\r\n\r\n\t/**\r\n\t * Bounds are inclusive. Ie. the specified values are _just_ allowed.\r\n\t *\r\n\t * Upper and lower bounds must be strictly positive integer values.\r\n\t */\r\n\texport type DimensionBounds<S extends Coord.System> = Readonly<{\r\n\t\t[P in keyof Dimensions[S]]: {\r\n\t\t\treadonly min: number;\r\n\t\t\treadonly max: number;\r\n\t\t};\r\n\t}>;\r\n}\r\n// Grid gets frozen in PostInit after _Constructors get initialized.\r\nObject.freeze(Grid);\r\nObject.freeze(Grid.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Player } from \"../player/Player\";\r\n\r\n\r\n/**\r\n * Information about each Player's scores and statistics since the\r\n * last Game reset. This is separated from Player instances since\r\n * non-GameManagers have no need to maintain such records throughout\r\n * the game.\r\n *\r\n * @final\r\n */\r\nexport class ScoreInfo {\r\n\r\n\t/**\r\n\t * A map from player ID's to information about their scores.\r\n\t */\r\n\tpublic readonly entries: TU.RoArr<ScoreInfo.Entry>;\r\n\r\n\tpublic constructor(playerIds: TU.RoArr<Player.Id>) {\r\n\t\tconst entries: Array<ScoreInfo.Entry> = [];\r\n\t\tfor (const id of playerIds) {\r\n\t\t\tentries[id] = new ScoreInfo.Entry();\r\n\t\t}\r\n\t\tthis.entries = entries;\r\n\t\tJsUtils.propNoWrite(this as ScoreInfo, \"entries\");\r\n\t\tObject.seal(this); //🧊\r\n\t}\r\n\r\n\tpublic reset(): void {\r\n\t\tfor (const entry of this.entries) {\r\n\t\t\tentry.reset();\r\n\t\t}\r\n\t}\r\n}\r\nexport namespace ScoreInfo {\r\n\t/**\r\n\t */\r\n\texport class Entry {\r\n\r\n\t\tpublic readonly moveCounts: {[M in Player.MoveType]: number};\r\n\r\n\t\t// TODO.design how to send this info to the game manager?\r\n\t\t// It is currently checked on the client side.\r\n\t\t//public invalidKeyPresses\r\n\r\n\t\tpublic totalHealthPickedUp: Player.Health;\r\n\r\n\t\tpublic constructor() {\r\n\t\t\tthis.moveCounts = {} as any; // This will be initialized during reset.\r\n\t\t}\r\n\r\n\t\tpublic reset(): void {\r\n\t\t\tthis.totalHealthPickedUp = 0.0;\r\n\t\t\t(Object.getOwnPropertyNames(Player.MoveType) as\r\n\t\t\t\tArray<Player.MoveType>).forEach((key) => {\r\n\t\t\t\tthis.moveCounts[key] = 0;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tObject.freeze(Entry);\r\n\tObject.freeze(Entry.prototype);\r\n}\r\nObject.freeze(ScoreInfo);\r\nObject.freeze(ScoreInfo.prototype);","import { JsUtils} from \"defs/JsUtils\";\r\nimport { Game } from \"../Game\";\r\nimport { Lang } from \"defs/TypeDefs\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { StateChange } from \"../StateChange\";\r\nimport type { Grid } from \"floor/Grid\";\r\nimport type { OperatorPlayer } from \"../player/OperatorPlayer\";\r\n\r\nimport { Player } from \"../player/Player\";\r\nimport { Team } from \"../player/Team\";\r\n\r\n/** */\r\nexport abstract class GameMirror<S extends Coord.System = Coord.System> {\r\n\r\n\tpublic readonly grid: Grid<S>;\r\n\treadonly #onGameBecomeOver: () => void;\r\n\tpublic readonly langFrontend: Lang.FrontendDesc;\r\n\r\n\tpublic readonly players: TU.RoArr<Player>;\r\n\tpublic readonly operators: TU.RoArr<OperatorPlayer>;\r\n\t#currentOperator: OperatorPlayer;\r\n\t/** Indexable by team ID's. */\r\n\tpublic readonly teams: TU.RoArr<Team>;\r\n\r\n\t#status: Game.Status;\r\n\r\n\t/** */\r\n\tpublic constructor(args: {\r\n\t\treadonly impl: Game.ImplArgs,\r\n\t\treadonly desc: Game.CtorArgs<S>,\r\n\t\treadonly operatorIds: TU.RoArr<Player.Id>,\r\n\t}) {\r\n\t\tconst { impl, desc, operatorIds } = args;\r\n\t\tObject.freeze(desc);\r\n\t\tObject.freeze(desc.players);\r\n\t\tdesc.players.forEach((desc) => Object.freeze(desc));\r\n\t\tObject.freeze(operatorIds);\r\n\r\n\t\tconst gridClass = impl.gridClassLookup(desc.coordSys);\r\n\t\tthis.grid = new (gridClass)({\r\n\t\t\tGrid: gridClass,\r\n\t\t\tsystem: desc.coordSys,\r\n\t\t\tdimensions: desc.gridDimensions,\r\n\t\t\tplayers: desc.players,\r\n\t\t}) as GameMirror<S>[\"grid\"];\r\n\r\n\t\tthis.#onGameBecomeOver = impl.onGameBecomeOver;\r\n\t\tthis.langFrontend = Lang.GET_FRONTEND_DESC_BY_ID(desc.langId)!;\r\n\r\n\t\t// Construct players:\r\n\t\tconst players  = this._createPlayers(desc, impl, operatorIds);\r\n\t\tthis.players   = players.players;\r\n\t\tthis.operators = players.operators;\r\n\t\t{\r\n\t\t\tconst teams: Player[][] = [];\r\n\t\t\tthis.players.forEach((player) => {\r\n\t\t\t\tif (!teams[player.teamId]) {\r\n\t\t\t\t\tteams[player.teamId] = [];\r\n\t\t\t\t}\r\n\t\t\t\tteams[player.teamId]!.push(player);\r\n\t\t\t});\r\n\t\t\tthis.teams = teams.map((teammateArray, teamId) => {\r\n\t\t\t\treturn new Team(teamId, teammateArray);\r\n\t\t\t});\r\n\t\t}\r\n\t\tJsUtils.propNoWrite(this as GameMirror<S>,\r\n\t\t\t\"grid\", \"langFrontend\",\r\n\t\t\t\"players\", \"operators\", \"teams\",\r\n\t\t);\r\n\t\tthis.players.forEach((player) => player.onTeamsBootstrapped());\r\n\t\tthis.setCurrentOperator(0);\r\n\t}\r\n\r\n\t/** */\r\n\tpublic reset(): void {\r\n\t\tthis.grid.reset();\r\n\r\n\t\t// We must reset status to PAUSED to pass a state-transition\r\n\t\t// assertion when changing status later to PLAYING.\r\n\t\tthis.#status = Game.Status.PAUSED;\r\n\t}\r\n\r\n\r\n\t/** Helper for the constructor. */\r\n\tprivate _createPlayers(\r\n\t\tgameDesc: Game.CtorArgs<S>,\r\n\t\timplArgs: Game.ImplArgs,\r\n\t\toperatorIds: TU.RoArr<Player.Id>,\r\n\t): {\r\n\t\tplayers: TU.RoArr<Player>,\r\n\t\toperators: TU.RoArr<OperatorPlayer>,\r\n\t} {\r\n\t\tconst players = gameDesc.players.map((pDesc) => {\r\n\t\t\tif (pDesc.familyId === Player.Family.HUMAN) {\r\n\t\t\t\treturn (operatorIds.includes(pDesc.playerId))\r\n\t\t\t\t\t? new implArgs.OperatorPlayer!(this, pDesc)\r\n\t\t\t\t\t: new Player(this, pDesc);\r\n\t\t\t} else {\r\n\t\t\t\treturn implArgs.RobotPlayer(\r\n\t\t\t\t\tthis as GameMirror<any>,\r\n\t\t\t\t\tpDesc,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}).freeze();\r\n\t\treturn Object.freeze({\r\n\t\t\tplayers,\r\n\t\t\toperators: operatorIds.map((playerId) => players[playerId] as OperatorPlayer).freeze(),\r\n\t\t});\r\n\t}\r\n\r\n\t/** @final */\r\n\tpublic deserializeResetState(ser: Game.ResetSer): void {\r\n\t\tJsUtils.deepFreeze(ser);\r\n\r\n\t\tthis.grid.forEach((tile, index) => {\r\n\t\t\tthis.grid.write(tile.coord, ser.csps[index]!);\r\n\t\t});\r\n\t\tser.playerCoords.forEach((coord, playerId) => {\r\n\t\t\tthis.players[playerId]!.reset(coord);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic get currentOperator(): OperatorPlayer {\r\n\t\treturn this.#currentOperator;\r\n\t}\r\n\tpublic setCurrentOperator(nextOperatorIndex: number): void {\r\n\t\tconst nextOperator = this.operators[nextOperatorIndex]!;\r\n\t\tif (!DEF.DevAssert && nextOperator === undefined) throw new Error(\"never\");\r\n\t\tif (this.currentOperator !== nextOperator)\r\n\t\t{\r\n\t\t\tthis.#currentOperator = nextOperator;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic get status(): Game.Status {\r\n\t\treturn this.#status;\r\n\t}\r\n\r\n\t/**\r\n\t * On the client side, this should only be accessed through a\r\n\t * wrapper function that also makes UI-related changes.\r\n\t *\r\n\t * If the game is already playing, this does nothing.\r\n\t */\r\n\tpublic statusBecomePlaying(): void {\r\n\t\tif (this.status === Game.Status.PLAYING) {\r\n\t\t\tconsole.info(\"[statusBecomePlaying]: Game is already playing\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.status !== Game.Status.PAUSED) {\r\n\t\t\tthrow new Error(\"Can only resume a game that is currently paused.\");\r\n\t\t}\r\n\t\tthis.players.forEach((player) => {\r\n\t\t\tplayer.onGamePlaying();\r\n\t\t});\r\n\t\tthis.#status = Game.Status.PLAYING;\r\n\t}\r\n\r\n\t/**\r\n\t * On the client side, this should only be accessed through a\r\n\t * wrapper function that also makes UI-related changes.\r\n\t *\r\n\t * If the game is already paused, this does nothing.\r\n\t */\r\n\tpublic statusBecomePaused(): void {\r\n\t\tif (this.status === Game.Status.PAUSED) {\r\n\t\t\tconsole.info(\"[statusBecomePaused]: Game is already paused\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.status === Game.Status.OVER) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.players.forEach((player) => {\r\n\t\t\tplayer.onGamePaused();\r\n\t\t});\r\n\t\tthis.#status = Game.Status.PAUSED;\r\n\t}\r\n\r\n\t/**\r\n\t * This should be called when all teams have been eliminated.\r\n\t * A team becomes (and subsequently and unconditionally stays)\r\n\t * eliminated when all their members are in a downed state at\r\n\t * the same time.\r\n\t *\r\n\t * This should not be controllable by UI input elements. Instead,\r\n\t * The UI layer can pass a callback to the constructor.\r\n\t */\r\n\tpublic statusBecomeOver(): void {\r\n\t\tif (this.status === Game.Status.OVER) return;\r\n\t\tthis.players.forEach((player) => {\r\n\t\t\tplayer.onGameOver();\r\n\t\t});\r\n\t\tthis.#status = Game.Status.OVER;\r\n\t\tthis.#onGameBecomeOver();\r\n\t\tconsole.info(\"game is over!\");\r\n\t}\r\n\r\n\tpublic abstract processMoveRequest(desc: StateChange.Req, socket?: any): void;\r\n\r\n\t/** @virtual */\r\n\tprotected commitTileMods(\r\n\t\tcoord: Coord,\r\n\t\tchanges: Tile.Changes,\r\n\t\tdoCheckOperatorSeqBuffer: boolean = true,\r\n\t): void {\r\n\t\t// JsUtils.deepFreeze(changes); // <- already done by caller.\r\n\t\tconst tile = this.grid.tileAt(coord);\r\n\r\n\t\tif (changes.seq !== undefined) {\r\n\t\t\t// Refresh the operator's `seqBuffer` (maintain invariant) for new CSP:\r\n\t\t\tif (doCheckOperatorSeqBuffer) {\r\n\t\t\t\t// ^Do this when non-operator moves into the the operator's vicinity.\r\n\t\t\t\tthis.operators.forEach((op) => {\r\n\t\t\t\t\tif (this.grid.tileDestsFrom(op.coord).includes(tile)) {\r\n\t\t\t\t\t\top.seqBufferAcceptKey(undefined);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.grid.write(coord, changes);\r\n\t}\r\n\r\n\t/** @virtual */\r\n\tprotected commitStateChange(desc: StateChange.Res, socket?: any): void {\r\n\t\tJsUtils.deepFreeze(desc);\r\n\t\tconst player = this.players[desc.initiator]!;\r\n\r\n\t\tif (desc.rejectId !== undefined) {\r\n\t\t\tplayer.reqBuffer.reject(desc.rejectId, player.coord);\r\n\t\t\treturn; //⚡\r\n\t\t}\r\n\r\n\t\tObject.entries(desc.tiles).freeze().forEach(([coord, changes]) => {\r\n\t\t\tthis.commitTileMods(parseInt(coord), changes);\r\n\t\t});\r\n\t\tObject.entries(desc.players).freeze().forEach(([pid, changes]) => {\r\n\t\t\tconst player = this.players[parseInt(pid)]!;\r\n\t\t\tplayer.reqBuffer.acceptOldest();\r\n\t\t\tplayer.health = changes.health;\r\n\r\n\t\t\tif (changes.coord !== undefined) {\r\n\t\t\t\tthis.grid.write(player.coord,  {occId: Player.Id.NULL});\r\n\t\t\t\tthis.grid.write(changes.coord, {occId: player.playerId});\r\n\t\t\t\t// === order matters ===\r\n\t\t\t\tplayer.setCoord(changes.coord);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\nJsUtils.protoNoEnum(GameMirror, \"_createPlayers\");\r\nObject.freeze(GameMirror);\r\nObject.freeze(GameMirror.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport type { Coord as BaseCoord, Coord, Tile } from \"floor/Tile\";\r\nimport { Grid as AbstractGrid } from \"floor/Grid\";\r\nimport { Player } from \"defs/TypeDefs\";\r\ntype S = BaseCoord.System.W_EUCLID2;\r\n\r\nexport type Dim = {\r\n\treadonly height: number,\r\n\treadonly width:  number,\r\n};\r\n\r\n/**\r\n * Euclid2 Internal Augmented Coord\r\n *\r\n * Immutable.\r\n */\r\nclass IAC {\r\n\t//#region\r\n\tpublic constructor(\r\n\t\tpublic readonly x: number,\r\n\t\tpublic readonly y: number,\r\n\t) {\r\n\t\tObject.freeze(this);\r\n\t}\r\n\tpublic static from(dimensions: Dim, coord: Coord): IAC {\r\n\t\treturn new IAC(coord % dimensions.width, Math.floor(coord / dimensions.width));\r\n\t}\r\n\tpublic toCoord(dimensions: Dim): Coord {\r\n\t\treturn (this.y * dimensions.width) + this.x;\r\n\t}\r\n\r\n\tpublic static distX(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): {\r\n\t\tdist: number, wrap: boolean,\r\n\t} {\r\n\t\tlet dist = Math.abs(i1.x - i2.x);\r\n\t\tif (dist < dim.width / 2) return { dist, wrap: false };\r\n\t\treturn { dist: dim.width - dist, wrap: true };\r\n\t}\r\n\tpublic static distY(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): {\r\n\t\tdist: number, wrap: boolean,\r\n\t} {\r\n\t\tlet dist = Math.abs(i1.y - i2.y);\r\n\t\tif (dist < dim.height / 2) return { dist, wrap: false };\r\n\t\treturn { dist: dim.height - dist, wrap: true };\r\n\t}\r\n\tpublic static oneNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): {\r\n\t\tnorm: number, wrapX: boolean, wrapY: boolean,\r\n\t} {\r\n\t\tconst dX = IAC.distX(dim,i1,i2), dY = IAC.distY(dim,i1,i2);\r\n\t\treturn { norm: dX.dist + dY.dist, wrapX: dX.wrap, wrapY: dY.wrap };\r\n\t}\r\n\tpublic static infNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): {\r\n\t\tnorm: number, wrapX: boolean, wrapY: boolean,\r\n\t} {\r\n\t\tconst dX = IAC.distX(dim,i1,i2), dY = IAC.distY(dim,i1,i2);\r\n\t\treturn { norm: Math.max(dX.dist, dY.dist), wrapX: dX.wrap, wrapY: dY.wrap };\r\n\t}\r\n\t/**\r\n\t * @returns\r\n\t * A number in the range (0, 1). `One` means the x and y\r\n\t * coordinates align to the x or y axis, and `Zero` means they\r\n\t * are 45 degrees from the x or y axis.\r\n\t *\r\n\t * ```latex\r\n\t * \\frac{\\left|\\left|x\\right|-\\left|y\\right|\\right|}{\\left|x\\right|+\\left|y\\right|}=a\r\n\t * ```\r\n\t */\r\n\tpublic static axialAlignment(dim: Dim, _i1: Coord, _i2: Coord): number {\r\n\t\tconst i1 = IAC.from(dim, _i1), i2 = IAC.from(dim, _i2);\r\n\t\tconst dX = IAC.distX(dim,i1,i2), dY = IAC.distY(dim,i1,i2);\r\n\t\treturn (Math.abs(dX.dist - dY.dist)) / (dX.dist + dY.dist);\r\n\t}\r\n\r\n\tpublic add(other: IAC.Bare): IAC {\r\n\t\treturn new IAC(\r\n\t\t\tthis.x + other.x,\r\n\t\t\tthis.y + other.y,\r\n\t\t);\r\n\t}\r\n\tpublic sub(other: IAC.Bare): IAC {\r\n\t\treturn new IAC(\r\n\t\t\tthis.x - other.x,\r\n\t\t\tthis.y - other.y,\r\n\t\t);\r\n\t}\r\n\tpublic iSub(other: IAC.Bare): IAC {\r\n\t\treturn this.add(this.sub(other));\r\n\t}\r\n\tpublic mul(scalar: number): IAC {\r\n\t\treturn new IAC(\r\n\t\t\tscalar * this.x,\r\n\t\t\tscalar * this.y,\r\n\t\t);\r\n\t}\r\n\tpublic mod(dim: Dim): IAC {\r\n\t\tlet {x,y} = this;\r\n\t\twhile (x < 0) x += dim.width;\r\n\t\twhile (y < 0) y += dim.height;\r\n\t\tx %= dim.width;\r\n\t\ty %= dim.height;\r\n\t\treturn new IAC(x,y);\r\n\t}\r\n\t//#endregion\r\n}\r\nexport namespace IAC {\r\n\texport type Bare = {\r\n\t\treadonly x: number;\r\n\t\treadonly y: number;\r\n\t};\r\n}\r\nObject.freeze(IAC);\r\nObject.freeze(IAC.prototype);\r\n\r\n\r\n/**\r\n * Edges are wrapped.\r\n */\r\nexport namespace WrappedEuclid2 {\r\n\r\n\t/**\r\n\t * Euclid2 Grid\r\n\t */\r\n\texport class Grid extends AbstractGrid<S> {\r\n\r\n\t\tpublic static ambiguityThreshold = 24;\r\n\r\n\t\tprivate static readonly SIZE_LIMITS = JsUtils.deepFreeze(<const>{\r\n\t\t\theight: <const>{ min: 10, max: 51 },\r\n\t\t\twidth:  <const>{ min: 10, max: 51 },\r\n\t\t});\r\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = Grid.SIZE_LIMITS;\r\n\r\n\t\tprivate readonly _grid: SealedArray<Tile>;\r\n\r\n\t\tprotected readonly iacCache: TU.RoArr<IAC>;\r\n\r\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n\t\t\tsuper(desc);\r\n\r\n\t\t\tconst grid: Array<Tile> = [];\r\n\t\t\tfor (let y = 0; y < this.dimensions.height; y++) {\r\n\t\t\t\tfor (let x = 0; x < this.dimensions.width; x++) {\r\n\t\t\t\t\tconst tile: Tile = {\r\n\t\t\t\t\t\tcoord: (y * this.dimensions.width) + x,\r\n\t\t\t\t\t\toccId: Player.Id.NULL,\r\n\t\t\t\t\t\thealth: 0, seq: \"\",\r\n\t\t\t\t\t};\r\n\t\t\t\t\tgrid.push(tile);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._grid = grid.seal();\r\n\r\n\t\t\tconst iacCache = [];\r\n\t\t\tfor (let y = 0; y < desc.dimensions.height; y++) {\r\n\t\t\t\tfor (let x = 0; x < desc.dimensions.width; x++) {\r\n\t\t\t\t\tiacCache.push(new IAC(x,y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.iacCache = iacCache.freeze();\r\n\t\t\tJsUtils.instNoEnum(this as Grid, \"iacCache\");\r\n\t\t\tJsUtils.propNoWrite(this as Grid, \"_grid\", \"iacCache\");\r\n\t\t\tif (new.target === Grid) {\r\n\t\t\t\tObject.seal(this); //🧊\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic write(coord: Coord, changes: Tile.Changes): void {\r\n\t\t\tthis._grid[coord] = Object.freeze(Object.assign(\r\n\t\t\t\tObject.create(null), this._grid[coord], changes,\r\n\t\t\t));\r\n\t\t}\r\n\r\n\t\tpublic forEach(consumer: (tile: Tile, index: number) => void): void {\r\n\t\t\tthis._grid.forEach(consumer);\r\n\t\t}\r\n\t\tpublic forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\r\n\t\t\tconst indices: Array<number> = new Array(this.area);\r\n\t\t\tfor (let i = 0; i < this.area; i++) {\r\n\t\t\t\tindices[i] = i;\r\n\t\t\t}\r\n\t\t\tindices.sort((a,b) => Math.random() - 0.5).freeze();\r\n\t\t\tfor (const index of indices) {\r\n\t\t\t\tconsumer(this._grid[index]!, index);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic getUntToward(intendedDest: Coord, sourceCoord: Coord): Tile {\r\n\t\t\tconst options = this.tileDestsFrom(sourceCoord)\r\n\t\t\t.filter((tile) => tile.occId === Player.Id.NULL)\r\n\t\t\t.map((tile) => {\r\n\t\t\t\tconst tileIac = this.iacCache[tile.coord]!;\r\n\t\t\t\tconst destIac = this.iacCache[intendedDest]!;\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttile, iac: tileIac,\r\n\t\t\t\t\tinfNorm: IAC.infNorm(this.dimensions, tileIac, destIac).norm,\r\n\t\t\t\t\toneNorm: IAC.oneNorm(this.dimensions, tileIac, destIac).norm,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\tif (options.length === 0) {\r\n\t\t\t\treturn this.tileAt(sourceCoord);\r\n\t\t\t}\r\n\t\t\toptions.sort((ta, tb) =>  ta.infNorm - tb.infNorm);\r\n\t\t\toptions.length = 3;\r\n\t\t\toptions.sort((ta, tb) => ta.oneNorm - tb.oneNorm);\r\n\t\t\tconst best = options[0]!;\r\n\t\t\t// Filter out non-optimal options:\r\n\t\t\tfor (let i = 1; i < options.length; i++) {\r\n\t\t\t\tif (options[i]!.infNorm > best.infNorm) {\r\n\t\t\t\t\toptions.splice(i);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (options.length === 1) {\r\n\t\t\t\t// Minor optimization:\r\n\t\t\t\treturn best.tile;\r\n\t\t\t}\r\n\t\t\t// Choose one of the most favourable using some randomness\r\n\t\t\t// weighted to follow a straight-looking path of movement.\r\n\t\t\tif (best.infNorm === best.oneNorm) {\r\n\t\t\t\t// (the axial option (if it exists) should be the first\r\n\t\t\t\t// due to the previous sort's tie-breaker.\r\n\t\t\t\tif (IAC.axialAlignment(this.dimensions, sourceCoord, intendedDest) > 0.5) {\r\n\t\t\t\t\t// The path to the intended destination is aligned more\r\n\t\t\t\t\t// with the x or y axis than they are with those axes\r\n\t\t\t\t\t// rotated 45 degrees.\r\n\t\t\t\t\treturn best.tile;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Ignore the axial option in further computations:\r\n\t\t\t\t\toptions.shift();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Choose a random non-axial option:\r\n\t\t\treturn options[Math.floor(options.length * Math.random())]!.tile;\r\n\t\t}\r\n\t\tpublic getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Tile {\r\n\t\t\tconst avoid = this.iacCache[_avoidCoord]!;\r\n\t\t\tconst src = this.iacCache[_sourceCoord]!;\r\n\t\t\tconst dest = src.iSub(avoid).mod(this.dimensions);\r\n\t\t\treturn this._grid[dest.toCoord(this.dimensions)]!;\r\n\t\t}\r\n\r\n\t\tpublic getAllAltDestsThan(originCoord: Coord): TU.RoArr<Tile> {\r\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\r\n\t\t}\r\n\r\n\t\tpublic getRandomCoordAround(_origin: Coord, radius: number): Coord {\r\n\t\t\tconst origin = this.iacCache[_origin]!;\r\n\t\t\treturn new IAC(\r\n\t\t\t\torigin.x + Math.trunc(2 * radius * (Math.random() - 0.5)),\r\n\t\t\t\torigin.y + Math.trunc(2 * radius * (Math.random() - 0.5)),\r\n\t\t\t).mod(this.dimensions).toCoord(this.dimensions);\r\n\t\t}\r\n\r\n\t\tpublic dist(source: Coord, dest: Coord): number {\r\n\t\t\treturn IAC.infNorm(this.dimensions,\r\n\t\t\t\tthis.iacCache[source]!,\r\n\t\t\t\tthis.iacCache[dest]!,\r\n\t\t\t).norm;\r\n\t\t}\r\n\r\n\t\tpublic tileAt(coord: Coord): Tile {\r\n\t\t\treturn this._grid[coord]!;\r\n\t\t}\r\n\t\tpublic tileDestsFrom(coord: Coord, radius: number = 1): TU.RoArr<Tile> {\r\n\t\t\tconst iac = this.iacCache[coord]!;\r\n\t\t\tlet wrapX = false, wrapY = false;\r\n\t\t\tconst W = this.dimensions.width, H = this.dimensions.height;\r\n\t\t\tlet t = (iac.y - radius);    if (t < 0) { t += H; wrapY = true; }\r\n\t\t\tlet l = (iac.x - radius);    if (l < 0) { l += W; wrapX = true; }\r\n\t\t\tlet b = (iac.y + radius +1); if (b > H) { b -= H; wrapY = true; }\r\n\t\t\tlet r = (iac.x + radius +1); if (r > W) { r -= W; wrapX = true; }\r\n\t\t\tconst dests: Array<Tile> = [];\r\n\t\t\tif (wrapX) {\r\n\t\t\t\tconst _t = t * W;\r\n\t\t\t\tdests.push(...this._grid.slice(_t, _t+r));\r\n\t\t\t\tif (wrapY) {\r\n\t\t\t\t\tdests.push(...this._grid.slice(0, r));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst b1 = wrapY ? H : b;\r\n\t\t\tconst sliceLength = (radius * 2) + 1;\r\n\t\t\tfor (let y = t; y < b1; y++) {\r\n\t\t\t\tconst begin = (y * W) + l;\r\n\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength));\r\n\t\t\t}\r\n\t\t\tif (wrapX && !wrapY) { dests.length -= r; }\r\n\t\t\tif (wrapY) {\r\n\t\t\t\tfor (let y = 0; y < b; y++) {\r\n\t\t\t\t\tconst begin = (y * W) + l;\r\n\t\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength));\r\n\t\t\t\t}\r\n\t\t\t\tif (wrapX) { dests.length -= r; }\r\n\t\t\t}\r\n\t\t\t// TODO.impl use a set when radius > 2 to prevent duplicate entries?\r\n\t\t\treturn dests.freeze();\r\n\t\t}\r\n\t\tpublic tileSourcesTo(coord: Coord, radius: number = 1): TU.RoArr<Tile> {\r\n\t\t\treturn this.tileDestsFrom(coord, radius);\r\n\t\t}\r\n\r\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\r\n\r\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\r\n\t\t\treturn dim.height * dim.width;\r\n\t\t}\r\n\r\n\t\tpublic static getLatticePatchDiameter(area: number): number {\r\n\t\t\treturn Math.sqrt(area);\r\n\t\t}\r\n\r\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\r\n\t\t\tconst x = Math.floor(dimensions.width  * Math.random());\r\n\t\t\tconst y = Math.floor(dimensions.height * Math.random());\r\n\t\t\treturn (y * dimensions.width) + x;\r\n\t\t}\r\n\t}\r\n\texport namespace Grid {\r\n\t\t/**\r\n\t\t * If `width` is not specified, `height` is taken as its default value.\r\n\t\t */\r\n\t\texport type Dimensions = Dim;\r\n\t}\r\n\tGrid.prototype.tileSourcesTo = Grid.prototype.tileDestsFrom;\r\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\r\n\tObject.freeze(Grid);\r\n\tObject.freeze(Grid.prototype);\r\n}\r\nObject.freeze(WrappedEuclid2);","import { JsUtils } from \"defs/JsUtils\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport { Grid as AbstractGrid } from \"floor/Grid\";\r\ntype S = Coord.System.BEEHIVE;\r\n\r\n/**\r\n * Beehive Internal Augmented Coord\r\n */\r\nexport class IAC {\r\n\r\n\t/** 🕒 3'o'clock direction */\r\n\tpublic readonly dash: number;\r\n\r\n\t/** 🕔 5'o'clock direction */\r\n\tpublic readonly bash: number;\r\n\r\n\tpublic constructor(desc: IAC.Bare) {\r\n\t\tthis.dash = desc.dash;\r\n\t\tthis.bash = desc.bash;\r\n\t\tObject.freeze(this); //🧊\r\n\t}\r\n\tpublic toCoord(): Coord {\r\n\t\t// TODO.impl\r\n\t\treturn undefined!;\r\n\t}\r\n\r\n\tpublic round(): IAC {\r\n\t\t// I'm pretty proud of this despite the fact that I don't\r\n\t\t// think there's anything very impressive about it.\r\n\t\tconst floorDash = Math.floor(this.dash);\r\n\t\tconst floorBash = Math.floor(this.bash);\r\n\t\tconst d = floorDash - this.dash;\r\n\t\tconst b = floorBash - this.bash;\r\n\t\tif (d > 2 * b) {\r\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash   });\r\n\t\t} else if (d < 0.5 * b) {\r\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash+1 });\r\n\t\t} else if (Math.min(d, b) > 0.5) {\r\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash+1 });\r\n\t\t} else {\r\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash   });\r\n\t\t}\r\n\t}\r\n\tpublic add(other: IAC.Bare): IAC {\r\n\t\treturn new IAC({\r\n\t\t\tdash: this.dash + other.dash,\r\n\t\t\tbash: this.bash + other.bash,\r\n\t\t});\r\n\t}\r\n\tpublic sub(other: IAC.Bare): IAC {\r\n\t\treturn new IAC({\r\n\t\t\tdash: this.dash - other.dash,\r\n\t\t\tbash: this.bash - other.bash,\r\n\t\t});\r\n\t}\r\n\tpublic mul(scalar: number): IAC {\r\n\t\treturn new IAC({\r\n\t\t\tdash: scalar * this.dash,\r\n\t\t\tbash: scalar * this.bash,\r\n\t\t});\r\n\t}\r\n}\r\nexport namespace IAC {\r\n\texport type Bare = Readonly<{\r\n\t\tdash: number;\r\n\t\tbash: number;\r\n\t}>;\r\n}\r\nObject.freeze(IAC);\r\nObject.freeze(IAC.prototype);\r\n\r\n\r\n/**\r\n * ### 🐝 BEES !\r\n *\r\n * ## 🐝 BEES !\r\n *\r\n * # 🐝 BEES !\r\n *\r\n * ```text\r\n *   ___   ___\r\n *  //  \\_//  \\__\r\n *  \\\\__/  \\__/  \\\r\n *     \\\\__/ \\\\__/\r\n * ```\r\n *\r\n * [(bees)](https://giphy.com/gifs/oprah-bees-VhFps32TlNgsg)\r\n * [(Hexagons)](https://www.youtube.com/watch?v=thOifuHs6eY)\r\n */\r\nexport namespace Beehive {\r\n\t/**\r\n\t * Beehive Grid\r\n\t */\r\n\texport class Grid extends AbstractGrid<S> {\r\n\r\n\t\tpublic static ambiguityThreshold = 18;\r\n\r\n\t\tprivate static readonly SIZE_LIMITS = JsUtils.deepFreeze({\r\n\t\t\tdash:    { min: 10, max: 50 },\r\n\t\t\tbslash:  { min: 10, max: 50 },\r\n\t\t\tfslash:  { min: 10, max: 50 },\r\n\t\t});\r\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = Grid.SIZE_LIMITS;\r\n\r\n\t\t/**\r\n\t\t */\r\n\t\t// TODO.design determine spec for indexing\r\n\t\t// Then initialize the field in the constructor\r\n\t\t// Also design HTML representation and initialize in Grid.Visible\r\n\t\tprivate readonly grid: TU.RoArr<TU.RoArr<Tile>>;\r\n\r\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n\t\t\tsuper(desc);\r\n\r\n\t\t\t// Initialize `grid`:\r\n\t\t\tconst grid: any[] = undefined!;\r\n\t\t\tthis.grid = grid.freeze();\r\n\t\t\tif (new.target === Grid) {\r\n\t\t\t\tObject.seal(this); //🧊\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic write(coord: Coord, changes: Tile.Changes): void {\r\n\t\t\t// TODO.impl\r\n\t\t}\r\n\r\n\t\tpublic forEach(consumer: (tile: Tile, index: number) => void): void {\r\n\t\t\tlet i = 0;\r\n\t\t\tfor (const row of this.grid) {\r\n\t\t\t\tfor (const tile of row) {\r\n\t\t\t\t\tconsumer(tile, i++);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\r\n\t\t\t// const indices: Array<number> = new Array(this.area);\r\n\t\t\t// for (let i = 0; i < this.area; i++) {\r\n\t\t\t// \tindices[i] = i;\r\n\t\t\t// }\r\n\t\t\t// indices.sort((a,b) => Math.random() - 0.5);\r\n\t\t\t// Object.freeze(indices);\r\n\t\t\t// for (const index of indices) {\r\n\t\t\t// \tconsumer(this.grid[index]!, index);\r\n\t\t\t// }\r\n\t\t}\r\n\r\n\t\tpublic getUntToward(intendedDest: Coord, sourceCoord: Coord): Tile {\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\t\tpublic getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Tile {\r\n\t\t\t// return this.getUntToward(\r\n\t\t\t// \tsourceCoord.add(sourceCoord.sub(avoidCoord)),\r\n\t\t\t// \tsourceCoord,\r\n\t\t\t// );\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\r\n\t\tpublic getAllAltDestsThan(originCoord: Coord): TU.RoArr<Tile> {\r\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\r\n\t\t}\r\n\r\n\t\tpublic getRandomCoordAround(origin: Coord, radius: number): Coord {\r\n\t\t\t// Note to self when I implement this:\r\n\t\t\t// Be careful about getting proper uniform random distribution!\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\r\n\t\tpublic dist(source: Coord, dest: Coord): number {\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\r\n\t\tpublic tileAt(coord: Coord): Tile {\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\r\n\t\tpublic tileDestsFrom(coord: Coord, radius: number = 1): TU.RoArr<Tile> {\r\n\t\t\tconst result: Array<Tile> = [];\r\n\t\t\treturn result.freeze();\r\n\t\t}\r\n\r\n\t\tpublic tileSourcesTo(coord: Coord, radius: number = 1): TU.RoArr<Tile> {\r\n\t\t\treturn undefined!;\r\n\t\t}\r\n\r\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\r\n\r\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\r\n\t\t\tconst shorterSide = Math.min(dim.fslash, dim.bslash);\r\n\t\t\tconst longerSide  = Math.max(dim.fslash, dim.bslash);\r\n\t\t\tconst width = (-1) + dim.dash + shorterSide;\r\n\t\t\tlet area = 2 * shorterSide * (dim.dash + width);\r\n\t\t\tarea += (longerSide - shorterSide - 1) * width;\r\n\t\t\treturn area;\r\n\t\t}\r\n\r\n\t\tpublic static getLatticePatchDiameter(area: number): number {\r\n\t\t\tif (area < 0.25) {\r\n\t\t\t\tthrow new RangeError(\"determinant of a radical will be strictly negative.\");\r\n\t\t\t}\r\n\t\t\t// Given radius `r` and diameter = `1 + 2*r`, the area is\r\n\t\t\t// `1 + 6*r*(1+r)/2`. Rearrange to solve for `d` given the\r\n\t\t\t// area: `0 = 3r^2 + 3r + (1-a)`. Use quadratic formula.\r\n\t\t\tconst radius = ((-3) + Math.sqrt(9 - (12 * (1 - area)))) / 6;\r\n\t\t\treturn 1 + (2 * radius);\r\n\t\t}\r\n\r\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\r\n\t\t\treturn new IAC(undefined!).toCoord();\r\n\t\t}\r\n\t}\r\n\texport namespace Grid {\r\n\t\texport type Dimensions = {\r\n\t\t\tdash: number;\r\n\t\t\tbslash: number;\r\n\t\t\tfslash: number;\r\n\t\t};\r\n\t}\r\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\r\n\tObject.freeze(Grid);\r\n\tObject.freeze(Grid.prototype);\r\n}\r\nObject.freeze(Beehive);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Game } from \"game/Game\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { GameManager } from \"game/gameparts/GameManager\";\r\n\r\nexport { JsUtils };\r\nexport type { Coord, Tile };\r\nexport type { GameManager };\r\n\r\n// Implementations:\r\nimport type { Chaser } from \"./robots/Chaser\";\r\n\r\nimport { Player } from \"./Player\";\r\nexport { Player };\r\n\r\n\r\n/**\r\n * Unlike {@link OperatorPlayer}s, these are not guided by human input.\r\n * Instead, they are essentially defined by how often they move, and\r\n * where they decide to move toward each time they move.\r\n *\r\n * Can be paused and un-paused by the Game Manager.\r\n */\r\nexport abstract class RobotPlayer extends Player {\r\n\r\n\t/** @override */\r\n\tdeclare public readonly game: GameManager<any>;\r\n\r\n\tprivate _nextMovementTimerMultiplier: number = undefined!;\r\n\r\n\tprivate _scheduledMovementCallbackId: number = undefined!;\r\n\r\n\t/**\r\n\t * @see RobotPlayer.of for the public, non-abstract interface.\r\n\t */\r\n\tprotected constructor(game: GameManager<any>, desc: Player.CtorArgs) {\r\n\t\tsuper(game, desc);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a {@link Pos} representing an absolute coordinate (ie.\r\n\t * one that is relative to the {@link Game}'s origin position')\r\n\t * that this `RobotPlayer` intends to move toward in its next\r\n\t * movement request. Pos may contain non-integer coordinate values,\r\n\t * and it does not have to be inside the bounds of the {@link Grid}.\r\n\t */\r\n\tprotected abstract computeDesiredDest(): Coord;\r\n\r\n\tprotected abstract getNextMoveType(): Player.MoveType;\r\n\r\n\t/**\r\n\t * Units are in milliseconds.\r\n\t */\r\n\tprotected abstract computeNextMovementTimer(): number;\r\n\r\n\t/** @override */\r\n\tpublic onGamePlaying(): void {\r\n\t\tsuper.onGamePlaying();\r\n\t\t/*@__INLINE__*/this._delayedMovementContinue();\r\n\t}\r\n\t/** @override */\r\n\tpublic onGamePaused(): void {\r\n\t\tthis.game.cancelTimeout(this._scheduledMovementCallbackId);\r\n\t\tthis._scheduledMovementCallbackId = undefined!;\r\n\t}\r\n\t/** @override */\r\n\tpublic onGameOver(): void {\r\n\t\tthis.game.cancelTimeout(this._scheduledMovementCallbackId);\r\n\t\tthis._scheduledMovementCallbackId = undefined!;\r\n\t}\r\n\r\n\t/**\r\n\t * Executes a single movement and then calls `delayedMovementContinue`.\r\n\t */\r\n\tprivate _movementContinue(): void {\r\n\t\tconst desiredDest = this.computeDesiredDest();\r\n\t\t// This is a little different than how human players experience\r\n\t\t// \"penalties\" when moving to tiles with long language-sequences-\r\n\t\t// humans must pay the penalty before landing on the tile, but\r\n\t\t// in the implementation here, it's much easier to simulate such\r\n\t\t// a penalty if it applies _after_ landing on the tile.\r\n\t\tthis._nextMovementTimerMultiplier = this.game.grid.tileAt(desiredDest).seq.length;\r\n\r\n\t\tthis.makeMovementRequest(\r\n\t\t\tthis.game.grid.getUntToward(desiredDest, this.coord).coord,\r\n\t\t\tthis.getNextMoveType(),\r\n\t\t);\r\n\t\t// Schedule a task to do this again:\r\n\t\t/*@__INLINE__*/this._delayedMovementContinue();\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules a call to `movementContinue`.\r\n\t */\r\n\tprivate _delayedMovementContinue(): void {\r\n\t\t// Schedule the next movement.\r\n\t\tthis._scheduledMovementCallbackId = this.game.setTimeout(\r\n\t\t\tthis._movementContinue.bind(this),\r\n\t\t\tthis.computeNextMovementTimer() * this._nextMovementTimerMultiplier,\r\n\t\t\t// * Callback function arguments go here.\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n}\r\nexport namespace RobotPlayer {\r\n\r\n\texport const _Constructors: {\r\n\t\treadonly [ F in Player.RobotFamily ]: {\r\n\t\t\tnew(\r\n\t\t\t\tgame: GameManager,\r\n\t\t\t\tdesc: Player._CtorArgs[F]\r\n\t\t\t): RobotPlayer;\r\n\t\t};\r\n\t} = {\r\n\t\t// These are initialized later to avoid bootstrapping issues.\r\n\t\t[\"CHASER\"]: undefined!,\r\n\t};\r\n\r\n\texport interface FamilySpecificPart {\r\n\t\t[Player.Family.CHASER]: Partial<Chaser.Behaviour>;\r\n\t}\r\n\r\n\texport const of = (\r\n\t\tgame: GameManager,\r\n\t\tplayerDesc: Player._CtorArgs[Player.RobotFamily],\r\n\t): RobotPlayer => {\r\n\t\tconst familyId = playerDesc.familyId as Player.RobotFamily;\r\n\t\tif (DEF.DevAssert) {\r\n\t\t\t// Enforced By: Caller adherence to contract.\r\n\t\t\tif (!Object.getOwnPropertyNames(_Constructors).includes(familyId)) {\r\n\t\t\t\tthrow new RangeError(familyId + \" is not a valid robot player family id.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new (_Constructors[familyId])(game, playerDesc);\r\n\t};\r\n\r\n\t/**\r\n\t * Provides slightly higher level abstractions for computing the\r\n\t * desired destination for the next movement.\r\n\t */\r\n\texport abstract class Decisive extends RobotPlayer {\r\n\r\n\t\t/**\r\n\t\t * Entries may return undefined to indicate that the condition\r\n\t\t * for using that behaviour was not met, and the next behaviour\r\n\t\t * should be tried.\r\n\t\t *\r\n\t\t * @requires\r\n\t\t * The last behaviour must never return `undefined`.\r\n\t\t */\r\n\t\tprotected abstract get _behaviours(): TU.RoArr<Decisive.Behaviour>;\r\n\r\n\t\treadonly #cache = {\r\n\t\t\twhich:  0,\r\n\t\t\treuses: 0,\r\n\t\t\ttarget: undefined as number | undefined,\r\n\t\t};\r\n\r\n\t\t/** @override */\r\n\t\tpublic reset(coord: Coord): void {\r\n\t\t\tsuper.reset(coord);\r\n\t\t\tthis.#cache.which  = 0;\r\n\t\t\tthis.#cache.reuses = 0;\r\n\t\t\tthis.#cache.target = undefined;\r\n\t\t}\r\n\r\n\t\t/** @final */\r\n\t\tprotected computeDesiredDest(): Coord {\r\n\t\t\tconst c = this.#cache;\r\n\t\t\tif (c.target !== undefined && c.reuses <= Game.K._ROBOT_PRIORITY_MAX_REUSES) {\r\n\t\t\t\tconst next = this._behaviours[c.which]!.call(this, c.target);\r\n\t\t\t\tif (next !== undefined) {\r\n\t\t\t\t\tc.reuses++;\r\n\t\t\t\t\treturn next.dest; //⚡\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tc.reuses = 0;\r\n\t\t\tfor (let i = 0; i < this._behaviours.length; i++) {\r\n\t\t\t\tconst next = this._behaviours[i]!.call(this);\r\n\t\t\t\tif (next !== undefined) {\r\n\t\t\t\t\tc.which = i;\r\n\t\t\t\t\tc.target = next.target;\r\n\t\t\t\t\treturn next.dest;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"never\");\r\n\t\t}\r\n\t}\r\n\texport namespace Decisive {\r\n\t\texport type Next = undefined | {\r\n\t\t\tdest: Coord;\r\n\t\t\t/**\r\n\t\t\t * This could be anything a behaviour wants. Ex. A player\r\n\t\t\t * ID, a coord, etc.\r\n\t\t\t *\r\n\t\t\t * It is assumed to be unchanged when successfully reusing\r\n\t\t\t * a behaviour.\r\n\t\t\t * */\r\n\t\t\ttarget?: number;\r\n\t\t};\r\n\t\texport type Behaviour = (target?: number) => Next;\r\n\t}\r\n\tObject.freeze(Decisive);\r\n\tObject.freeze(Decisive.prototype);\r\n}\r\nJsUtils.protoNoEnum(RobotPlayer, \"_movementContinue\");\r\n// RobotPlayer is frozen in PostInit after _Constructors get initialized.\r\nObject.seal(RobotPlayer);\r\nObject.freeze(RobotPlayer.prototype);","import {\r\n\tJsUtils, Coord, Tile,\r\n\tGameManager, Player, RobotPlayer,\r\n} from \"../RobotPlayer\";\r\n\r\n/**\r\n * @final\r\n */\r\nexport class Chaser extends RobotPlayer.Decisive {\r\n\r\n\tprivate readonly pred: SealedArray<Player> = [];\r\n\tprivate readonly prey: Array<Player> = [];\r\n\r\n\tprivate readonly params: Readonly<Chaser.Behaviour>;\r\n\tdeclare protected readonly _behaviours: TU.RoArr<RobotPlayer.Decisive.Behaviour>;\r\n\r\n\tprivate readonly grid: Chaser[\"game\"][\"grid\"];\r\n\r\n\tpublic constructor(game: GameManager<any>, desc: Player._CtorArgs[\"CHASER\"]) {\r\n\t\tsuper(game, desc);\r\n\t\tthis.params = Object.freeze(Object.assign(\r\n\t\t\t{},\r\n\t\t\tChaser.Behaviour.DEFAULT,\r\n\t\t\tdesc.familyArgs,\r\n\t\t));\r\n\t\tthis.grid = this.game.grid;\r\n\t\tObject.seal(this); //🧊\r\n\t\tJsUtils.propNoWrite(this as Chaser,\r\n\t\t\t\"params\", \"grid\",\r\n\t\t);\r\n\t\tthis.prey[Symbol.iterator]\r\n\t\tthis.pred.keys\r\n\t}\r\n\r\n\tpublic onTeamsBootstrapped(): void {\r\n\t\tsuper.onTeamsBootstrapped();\r\n\t\t// We need to cast off read-only-ness below.\r\n\t\t// @ts-expect-error : RO=\r\n\t\tthis.pred = this.game.teams\r\n\t\t\t.filter((team) => team.id !== this.teamId)\r\n\t\t\t.flatMap((team) => team.members)\r\n\t\t\t.seal();\r\n\r\n\t\t// @ts-expect-error : RO=\r\n\t\tthis.prey = [...this.pred].seal();\r\n\r\n\t\tJsUtils.propNoWrite(this as Chaser,\r\n\t\t\t\"pred\", \"prey\",\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _bhvrEvadePred(cachedPred?: Player.Id): RobotPlayer.Decisive.Next {\r\n\t\tif (cachedPred !== undefined) { return {\r\n\t\t\tdest: this.grid.getUntAwayFrom(this.game.players[cachedPred]!.coord, this.coord).coord,\r\n\t\t};}\r\n\t\t// Check if there is anyone to run away from:\r\n\t\tthis.pred.sort((pa,pb) => {\r\n\t\t\treturn this.grid.dist(pa.coord, this.coord)\r\n\t\t\t\t-  this.grid.dist(pb.coord, this.coord);\r\n\t\t});\r\n\t\tfor (const pred of this.pred) {\r\n\t\t\tif (this.grid.dist(pred.coord, this.coord)\r\n\t\t\t\t> this.params.fearDistance) break;\r\n\t\t\tif (pred.isDowned) continue;\r\n\t\t\tif (pred.health > this.health) {\r\n\t\t\t\t// TODO.design Something that avoids getting cornered.\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdest: this.grid.getUntAwayFrom(pred.coord, this.coord).coord,\r\n\t\t\t\t\ttarget: pred.playerId,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\tprivate _bhvrChasePrey(cachedPrey?: Player.Id): RobotPlayer.Decisive.Next {\r\n\t\tif (cachedPrey !== undefined) { return {\r\n\t\t\tdest: this.game.players[cachedPrey]!.coord,\r\n\t\t};}\r\n\t\t// If there is nobody to run away from,\r\n\t\t// Check if there is anyone we want to attack:\r\n\t\tthis.prey.sort((pa,pb) => {\r\n\t\t\treturn this.grid.dist(this.coord, pa.coord)\r\n\t\t\t\t-  this.grid.dist(this.coord, pb.coord);\r\n\t\t});\r\n\t\tif (this.isDowned) { // TODO.design <-- what's this? I think I meant to check that the prey is not downed.\r\n\t\t\tfor (const prey of this.prey) {\r\n\t\t\t\tif (this.grid.dist(this.coord, prey.coord)\r\n\t\t\t\t\t> this.params.bloodThirstDistance) break;\r\n\t\t\t\tif (prey.health < this.health - this.params.healthReserve) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdest: prey.coord,\r\n\t\t\t\t\t\ttarget: prey.playerId,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\tprivate _bhvrGotoHealthElseWander(cachedHealthCoord?: Coord): RobotPlayer.Decisive.Next {\r\n\t\tif (cachedHealthCoord !== undefined && this.game.health.tiles.has(cachedHealthCoord)) {\r\n\t\t\treturn { dest: cachedHealthCoord };\r\n\t\t}\r\n\t\t// If there is nobody we want to chase after to attack,\r\n\t\t// Head toward the nearest free health if it exists.\r\n\t\tif (this.game.health.tiles.size === 0) {\r\n\t\t\t// No tiles close by. Wander around:\r\n\t\t\tif (Math.random() < this.params.wanderingAimlessness) {\r\n\t\t\t\t// Big direction change:\r\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(this.coord, 3) };\r\n\t\t\t} else {\r\n\t\t\t\t// Continue wandering with a subtle, random direction:\r\n\t\t\t\tconst awayFunc = this.grid.getUntAwayFrom.bind(this.grid, this.prevCoord);\r\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(\r\n\t\t\t\t\tawayFunc(awayFunc(this.coord).coord).coord, 1,\r\n\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet closestFht: Tile = undefined!;\r\n\t\tlet closestFhtDistance = Infinity;\r\n\t\tfor (const fht of this.game.health.tiles.values()) {\r\n\t\t\tconst distance = this.grid.dist(this.coord, fht.coord);\r\n\t\t\tif (distance < closestFhtDistance) {\r\n\t\t\t\tclosestFht = fht;\r\n\t\t\t\tclosestFhtDistance = distance;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { dest: closestFht.coord, target: closestFht.coord };\r\n\t}\r\n\r\n\tprotected getNextMoveType(): Player.MoveType {\r\n\t\treturn Player.MoveType.NORMAL;\r\n\t}\r\n\r\n\tprotected computeNextMovementTimer(): number {\r\n\t\treturn 1000 / this.params.keyPressesPerSecond;\r\n\t}\r\n}\r\nexport namespace Chaser {\r\n\t/**\r\n\t */\r\n\texport type Behaviour = {\r\n\t\t/**\r\n\t\t * If the number of moves it would take for an opponent with\r\n\t\t * more health than this player to reach this player is less\r\n\t\t * than or equal to this value, then this player will try to\r\n\t\t * run away to safety.\r\n\t\t */\r\n\t\tfearDistance: number;\r\n\t\t/**\r\n\t\t * If the number of moves it would take for this player to reach\r\n\t\t * an opponent with less health is greater than this value,\r\n\t\t * this player will not even consider pursuing them in attack.\r\n\t\t */\r\n\t\tbloodThirstDistance: number;\r\n\t\t/**\r\n\t\t * The minimum amount of leftover health this player would try\r\n\t\t * to ensure having before going after an opponent. Negative\r\n\t\t * values are allowed, in which case, the player will go after\r\n\t\t * opponents even if they would end up being downed as a result.\r\n\t\t */\r\n\t\thealthReserve: number;\r\n\t\t/**\r\n\t\t * How often this player moves in units of moves-per-second.\r\n\t\t */\r\n\t\tkeyPressesPerSecond: number;\r\n\t\t/**\r\n\t\t * A value between zero and one. How often this player will\r\n\t\t * make a drastic random change in direction when wandering.\r\n\t\t */\r\n\t\twanderingAimlessness: number;\r\n\t};\r\n\texport namespace Behaviour {\r\n\t\texport const DEFAULT: Readonly<Behaviour> = Object.freeze({\r\n\t\t\tfearDistance: 5,\r\n\t\t\tbloodThirstDistance: 7,\r\n\t\t\thealthReserve: 3.0,\r\n\t\t\tkeyPressesPerSecond: 2.0,\r\n\t\t\twanderingAimlessness: 0.2,\r\n\t\t});\r\n\t}\r\n}\r\n// @ts-expect-error : RO=\r\nChaser.prototype._behaviours\r\n= Object.freeze([\r\n\tChaser.prototype[\"_bhvrEvadePred\"],\r\n\tChaser.prototype[\"_bhvrChasePrey\"],\r\n\tChaser.prototype[\"_bhvrGotoHealthElseWander\"],\r\n]);\r\nJsUtils.protoNoEnum(Chaser, \"onTeamsBootstrapped\");\r\nObject.freeze(Chaser);\r\nObject.freeze(Chaser.prototype);","import { JsUtils } from \"defs/JsUtils\";\r\nimport { Lang } from \"lang/Lang\";\r\nimport { Game } from \"../Game\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { StateChange } from \"../StateChange\";\r\nimport { Player } from \"../player/Player\";\r\nimport { HealthInfo } from \"./HealthInfo\";\r\nimport { ScoreInfo } from \"./ScoreInfo\";\r\nimport { Grid } from \"floor/Grid\";\r\n\r\nimport { GameMirror } from \"./GameMirror\";\r\n\r\nimport InitGameManagerCtorMaps from \"../ctormaps/CmapManager\";\r\nInitGameManagerCtorMaps();\r\n\r\n/** */\r\nexport abstract class GameManager<\r\n\tS extends Coord.System = Coord.System,\r\n> extends GameMirror<S> {\r\n\r\n\tpublic readonly health: HealthInfo;\r\n\r\n\tpublic readonly lang: Lang = undefined!;\r\n\treadonly #langImportPromise: Promise<Lang>;\r\n\r\n\tprivate readonly scoreInfo: ScoreInfo;\r\n\r\n\t/** */\r\n\tpublic constructor(args: {\r\n\t\treadonly impl: Game.ImplArgs,\r\n\t\treadonly desc: Game.CtorArgs<S>,\r\n\t\treadonly operatorIds: TU.RoArr<Player.Id>,\r\n\t}) {\r\n\t\tsuper(args);\r\n\r\n\t\tthis.health = new HealthInfo(args.desc, this.grid.static as Grid.ClassIf<any>);\r\n\t\tthis.scoreInfo = new ScoreInfo(this.players.map((player) => player.playerId));\r\n\t\tJsUtils.propNoWrite(this as GameManager<S>,\r\n\t\t\t\"health\", \"scoreInfo\",\r\n\t\t);\r\n\r\n\t\t// https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import\r\n\t\tthis.#langImportPromise = (import(\r\n\t\t\t/* webpackChunkName: \"lang/[request]\" */\r\n\t\t\t`lang/impl/${this.langFrontend.module}.ts`\r\n\t\t)).then((langModule) => {\r\n\t\t\tconst LangConstructor = this.langFrontend.export.split(\".\").reduce<any>(\r\n\t\t\t\t(nsps, propName) => nsps[propName],\r\n\t\t\t\tlangModule[this.langFrontend.module],\r\n\t\t\t) as Lang.ClassIf;\r\n\t\t\t// @ts-expect-error : RO=\r\n\t\t\tthis.lang = new LangConstructor(args.desc.langWeightExaggeration);\r\n\t\t\tJsUtils.propNoWrite(this as GameManager<S>, \"lang\");\r\n\r\n\t\t\tif (DEF.DevAssert && (this.lang.isolatedMinOpts < this.grid.static.ambiguityThreshold)) {\r\n\t\t\t\t// Enforced By: clientside UI and `CHECK_VALID_CTOR_ARGS`.\r\n\t\t\t\tthrow new Error(\"never\");\r\n\t\t\t}\r\n\t\t\treturn this.lang;\r\n\t\t});\r\n\t}\r\n\r\n\t/** */\r\n\tpublic async reset(): Promise<Game.ResetSer> {\r\n\t\t// Reset the grid and event record:\r\n\t\tsuper.reset();\r\n\t\tconst resetSer = Object.freeze({\r\n\t\t\tplayerCoords: [] as Coord[],\r\n\t\t\tcsps: [] as Lang.CharSeqPair[],\r\n\t\t});\r\n\r\n\t\tthis.health.reset();\r\n\r\n\t\t// Reset hit-counters in the current language:\r\n\t\t// This must be done before shuffling so that the previous\r\n\t\t// history of shuffle-ins has no effects on the new pairs.\r\n\t\tawait this.#langImportPromise;\r\n\t\tthis.lang.reset();\r\n\t\tthis.grid.forEachShuffled((tile, index) => {\r\n\t\t\tconst csp = this.dryRunShuffleLangCspAt(tile.coord, true);\r\n\t\t\tthis.grid.write(tile.coord, csp);\r\n\t\t\tresetSer.csps[index] = csp;\r\n\t\t});\r\n\r\n\t\t// Reset and spawn players:\r\n\t\tthis.teams.forEach((team) => team.reset());\r\n\t\tconst spawnPoints = this.grid.static.getSpawnCoords(\r\n\t\t\tthis.teams.map((team) => team.members.length),\r\n\t\t\tthis.grid.dimensions,\r\n\t\t);\r\n\t\tthis.teams.forEach((team, teamIndex) => {\r\n\t\t\tteam.members.forEach((member, memberIndex) => {\r\n\t\t\t\tconst coord = spawnPoints[teamIndex]![memberIndex]!;\r\n\t\t\t\tmember.reset(coord);\r\n\t\t\t\tresetSer.playerCoords[member.playerId] = coord;\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.scoreInfo.reset();\r\n\r\n\t\treturn resetSer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * **Important:** Nullifies the existing values at `tile` and does\r\n\t * not consume the returned values, which must be done externally.\r\n\t *\r\n\t * @param coord\r\n\t *\r\n\t * @param doCheckEmptyTiles\r\n\t * Pass `true` when populating a grid which has been reset. This\r\n\t * is for performance optimization purposes. It can be safely\r\n\t * ignored.\r\n\t *\r\n\t * @returns\r\n\t * A {@link Lang.CharSeqPair} that can be used as a replacement\r\n\t * for that currently being used by `tile`.\r\n\t */\r\n\tprivate dryRunShuffleLangCspAt(coord: Coord, doCheckEmptyTiles: boolean = false): Lang.CharSeqPair {\r\n\t\t// First, clear values for the target tile so its current\r\n\t\t// (to-be-previous) values don't get unnecessarily avoided.\r\n\t\tthis.grid.write(coord, Lang.CharSeqPair.NULL);\r\n\r\n\t\tlet avoid = this.grid\r\n\t\t\t.getAllAltDestsThan(coord)\r\n\t\t\t.map((tile) => tile.seq)\r\n\t\t\t.freeze();\r\n\t\t// ^ Note: An array of CharSeq from unique Tiles. It is okay\r\n\t\t// for those tiles to include `coord`\r\n\t\tif (doCheckEmptyTiles) {\r\n\t\t\tconst nullSeq = Lang.CharSeqPair.NULL.seq;\r\n\t\t\tavoid = avoid.filter((seq) => seq !== nullSeq).freeze();\r\n\t\t}\r\n\t\treturn this.lang.getNonConflictingChar(avoid);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns\r\n\t * A descriptor of changes to make to tiles regarding health spawning.\r\n\t *\r\n\t * Note that this will seem to have a one-movement-event delay in\r\n\t * specifying changes to be made because `this.currentFreeHealth`\r\n\t * does not update until after the movement request has been\r\n\t * executed.\r\n\t */\r\n\tprivate dryRunSpawnHealth(changes: Record<Coord, Tile.Changes>): Record<Coord, Tile.Changes> {\r\n\t\tlet healthToSpawn = this.health.K.avg - this.health.currentAmount;\r\n\t\tif (healthToSpawn <= 0) {\r\n\t\t\treturn changes;\r\n\t\t}\r\n\t\twhile (healthToSpawn > 0) {\r\n\t\t\tlet tile: Tile;\r\n\t\t\tdo {\r\n\t\t\t\ttile = this.grid.tileAt(this.grid.getRandomCoord());\r\n\t\t\t} while (\r\n\t\t\t\ttile.occId !== Player.Id.NULL\r\n\t\t\t\t// TODO.design add other checks to improve distribution and reduce\r\n\t\t\t\t// crowding of freeHealth. Make sure it is sensitive to\r\n\t\t\t\t// `this.averageFreeHealthPerTile`.\r\n\t\t\t);\r\n\t\t\tconst healthToAdd = Game.K.AVERAGE_HEALTH_TO_SPAWN_ON_TILE;\r\n\t\t\tif ((Math.random() < Game.K._HEALTH_UPDATE_CHANCE)) {\r\n\t\t\t\tlet otherDesc = changes[tile.coord];\r\n\t\t\t\tif (otherDesc !== undefined) {\r\n\t\t\t\t\t// @ts-expect-error : RO=\r\n\t\t\t\t\totherDesc.health = (otherDesc.health ?? 0) + healthToAdd;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchanges[tile.coord] = {\r\n\t\t\t\t\t\thealth: tile.health + healthToAdd,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\thealthToSpawn -= healthToAdd;\r\n\t\t}\r\n\t\treturn changes;\r\n\t}\r\n\r\n\r\n\t/** @override */\r\n\tpublic processMoveRequest(req: StateChange.Req, socket?: any): void {\r\n\t\tconst initiator = this.players[req.initiator]!;\r\n\t\tif (req.lastRejectId !== initiator.reqBuffer.lastRejectId) {\r\n\t\t\treturn; //⚡\r\n\t\t}\r\n\t\tconst reqDest = this.grid.tileAt(req.moveDest);\r\n\t\tif (  this.status !== Game.Status.PLAYING\r\n\t\t || reqDest.occId !== Player.Id.NULL\r\n\t\t) {\r\n\t\t\tthis.commitStateChange({\r\n\t\t\t\trejectId: initiator.reqBuffer.getNextRejectId(),\r\n\t\t\t\tinitiator: req.initiator,\r\n\t\t\t}, socket);\r\n\t\t\treturn; //⚡\r\n\t\t}\r\n\t\tconst moveIsBoost = (req.moveType === Player.MoveType.BOOST);\r\n\t\tconst newPlayerHealthValue\r\n\t\t\t= initiator.health\r\n\t\t\t+ (reqDest.health * (initiator.isDowned ? Game.K.HEALTH_EFFECT_FOR_DOWNED_PLAYER : 1.0))\r\n\t\t\t- (moveIsBoost ? this.health.K.costOfBoost(reqDest) : 0);\r\n\t\tif (moveIsBoost && newPlayerHealthValue < 0) {\r\n\t\t\t// Reject a boost-type movement request if it would make\r\n\t\t\t// the player become downed (or if they are already downed):\r\n\t\t\tthis.commitStateChange({\r\n\t\t\t\trejectId: initiator.reqBuffer.getNextRejectId(),\r\n\t\t\t\tinitiator: req.initiator,\r\n\t\t\t}, socket);\r\n\t\t\treturn; //⚡\r\n\t\t}\r\n\r\n\t\t// Update stats records:\r\n\t\tconst scoreInfo = this.scoreInfo.entries[initiator.playerId]!;\r\n\t\tscoreInfo.totalHealthPickedUp += reqDest.health;\r\n\t\tscoreInfo.moveCounts[req.moveType] += 1;\r\n\r\n\t\t// Set response fields according to spec in `PlayerMovementEvent`:\r\n\t\tthis.commitStateChange(<StateChange.Res.Accepted>{\r\n\t\t\tinitiator: req.initiator,\r\n\t\t\tmoveType: req.moveType,\r\n\t\t\tplayers: {\r\n\t\t\t\t[initiator.playerId]: {\r\n\t\t\t\t\thealth: newPlayerHealthValue,\r\n\t\t\t\t\tcoord: reqDest.coord,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ttiles: this.dryRunSpawnHealth({\r\n\t\t\t\t[req.moveDest]: {\r\n\t\t\t\t\thealth: 0,\r\n\t\t\t\t\t...this.dryRunShuffleLangCspAt(reqDest.coord),\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t}, socket);\r\n\t}\r\n\r\n\t/** @override */\r\n\tprotected commitTileMods(\r\n\t\tcoord: Coord, changes: Tile.Changes,\r\n\t\tdoCheckOperatorSeqBuffer: boolean = true,\r\n\t): void {\r\n\t\t// JsUtils.deepFreeze(changes); // <- already done by caller.\r\n\t\tconst tile = this.grid.tileAt(coord);\r\n\t\tif (changes.health !== undefined) {\r\n\t\t\tthis.health.add(changes.health - tile.health);\r\n\t\t\tif (changes.health <= 0) {\r\n\t\t\t\tthis.health.tiles.delete(coord);\r\n\t\t\t} else {\r\n\t\t\t\tthis.health.tiles.set(coord, tile);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.commitTileMods(coord, changes, doCheckOperatorSeqBuffer);\r\n\t}\r\n\r\n\tpublic abstract setTimeout(callback: Function, millis: number, ...args: any[]): number;\r\n\tpublic abstract cancelTimeout(handle: number): void;\r\n}\r\nexport namespace GameManager {\r\n\t/**\r\n\t * If cleaning can be appropriately performed, this function will\r\n\t * do so. If not, it will indicate invalidities in its return value.\r\n\t */\r\n\texport function CHECK_VALID_CTOR_ARGS(\r\n\t\targs: TU.NoRo<Game.CtorArgs.UnFin>,\r\n\t): string[] {\r\n\t\t//#region\r\n\t\tconst bad: string[] = [];\r\n\t\ttype Keys = keyof Game.CtorArgs.UnFin;\r\n\t\tconst requiredFields: {[K in Keys]: any} = Object.freeze({\r\n\t\t\tcoordSys: 0, gridDimensions: 0, averageHealthPerTile: 0,\r\n\t\t\tlangId: 0, langWeightExaggeration: 0, players: 0,\r\n\t\t});\r\n\t\tconst missingFields: Keys[] = [];\r\n\t\tfor (const fieldName in requiredFields) {\r\n\t\t\tconst field = args[fieldName as Keys];\r\n\t\t\tif (field === undefined || field === null) {\r\n\t\t\t\tmissingFields.push(fieldName as Keys);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (missingFields.length) {\r\n\t\t\tbad.push(\"Missing the following arguments: \" + missingFields);\r\n\t\t}\r\n\r\n\t\tconst langDesc = Lang.GET_FRONTEND_DESC_BY_ID(args.langId);\r\n\t\tconst gridClass = Grid._Constructors[args.coordSys];\r\n\t\tif (langDesc === undefined) {\r\n\t\t\tbad.push(`No language with the ID \\`${args.langId}\\` exists.`);\r\n\t\t} else if (gridClass === undefined) {\r\n\t\t\tbad.push(`No grid with the system ID \\`${args.coordSys}\\` exists.`);\r\n\t\t} else {\r\n\t\t\tif (langDesc.isolatedMinOpts < gridClass.ambiguityThreshold) {\r\n\t\t\t\tbad.push(\"The provided language does not have enough sequences\"\r\n\t\t\t\t+\"\\nto ensure that a shuffling operation will always succeed when\"\r\n\t\t\t\t+\"\\npaired with the provided grid system.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (parseInt(args.langWeightExaggeration as any) === NaN) {\r\n\t\t\tbad.push(`Language Weight Exaggeration expected a number, but`\r\n\t\t\t+ `\\`${args.langWeightExaggeration}\\` is not a number.`);\r\n\t\t} else {\r\n\t\t\targs.langWeightExaggeration = Math.max(0, parseFloat(\r\n\t\t\t\targs.langWeightExaggeration as any\r\n\t\t\t));\r\n\t\t}\r\n\t\t// TODO.impl check all the rest of the things.\r\n\t\t// if (!(Player.Username.REGEXP.test(desc.username))) {\r\n\t\t//     throw new RangeError(`Username \\\"${desc.username}\\\"`\r\n\t\t//     + ` does not match the required regular expression,`\r\n\t\t//     + ` \\\"${Player.Username.REGEXP.source}\\\".`\r\n\t\t//     );\r\n\t\t// }\r\n\t\treturn bad;\r\n\t\t//#endregion\r\n\t}\r\n}\r\nObject.freeze(GameManager);\r\nObject.freeze(GameManager.prototype);","import { Grid } from \"floor/Grid\";\r\nimport { WrappedEuclid2 } from \"floor/impl/Euclid2/System\";\r\nimport { Beehive } from \"floor/impl/Beehive/System\";\r\n\r\nimport { RobotPlayer } from \"game/player/RobotPlayer\";\r\nimport { Chaser } from \"game/player/robots/Chaser\";\r\n\r\nexport default (): void => {{\r\n\t// Non-Visible Grid Implementation Registry:\r\n\tObject.freeze(Object.assign(Grid._Constructors, <typeof Grid._Constructors>{\r\n\t\t[\"W_EUCLID2\"]: WrappedEuclid2.Grid,\r\n\t\t[\"BEEHIVE\"]: Beehive.Grid,\r\n\t}));\r\n\tObject.freeze(Grid);\r\n}{\r\n\tconst Robot = RobotPlayer;\r\n\tObject.freeze(Object.assign(Robot._Constructors, <typeof Robot._Constructors>{\r\n\t\t[\"CHASER\"]: Chaser,\r\n\t}));\r\n\tObject.freeze(Robot);\r\n}};","import type WebSocket from \"ws\";\r\n\r\nimport { JsUtils } from \"defs/JsUtils\";\r\nimport { SOCKET_ID, GroupEv, GameEv } from \"defs/OnlineDefs\";\r\nimport type { Game } from \"game/Game\";\r\nimport type { Coord } from \"floor/Tile\";\r\nimport type { StateChange } from \"game/StateChange\";\r\nimport { Player } from \"game/player/Player\";\r\nimport { Grid } from \"floor/Grid\";\r\n\r\nimport { GameManager } from \"game/gameparts/GameManager\";\r\nimport { RobotPlayer } from \"base/game/player/RobotPlayer\";\r\n\r\n/** */\r\nfunction gameOnSocketMessage<S extends Coord.System>(this: ServerGame<S>, ev: WebSocket.MessageEvent): void {\r\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\r\n\tconst socket = ev.target;\r\n\tswitch (evName) {\r\n\t\tcase GameEv.IN_GAME: this.processMoveRequest(args[0], socket); break;\r\n\t\tcase GameEv.PAUSE:   this.statusBecomePaused(); break;\r\n\t\tcase GameEv.UNPAUSE: this.statusBecomePlaying(); break;\r\n\t\tcase GameEv.RETURN_TO_LOBBY:\r\n\t\t\tif (socket === this.groupHostSocket) {\r\n\t\t\t\tthis.statusBecomeOver();\r\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY]);\r\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket) s.send(data); });\r\n\t\t\t\tthis._terminate();\r\n\t\t\t} else {\r\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY, SOCKET_ID(socket)]);\r\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket) s.send(data); });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault: break;\r\n\t}\r\n};\r\n\r\n/**\r\n * Handles game-related events and attaches listeners to each client\r\n * socket.\r\n * @final\r\n */\r\nexport class ServerGame<S extends Coord.System = Coord.System> extends GameManager<S> {\r\n\r\n\treadonly #deleteExternalRefs: () => void;\r\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\r\n\r\n\tpublic readonly sockets: Set<WebSocket>;\r\n\tprotected readonly groupHostSocket: WebSocket;\r\n\r\n\t/** @override */\r\n\tpublic get currentOperator(): never {\r\n\t\tthrow new Error(\"never\");\r\n\t}\r\n\r\n\t/** */\r\n\tpublic constructor(args: Readonly<{\r\n\t\tsockets: IterableIterator<WebSocket>,\r\n\t\tgroupHostSocket: WebSocket,\r\n\t\tdeleteExternalRefs: () => void,\r\n\t\tgameDesc: Game.CtorArgs.UnFin<S>,\r\n\t}>) {\r\n\t\tsuper({\r\n\t\t\timpl: {\r\n\t\t\t\tgridClassLookup: Grid.getImplementation,\r\n\t\t\t\tOperatorPlayer: undefined,\r\n\t\t\t\tRobotPlayer: (game, desc) => RobotPlayer.of(game as GameManager<any>, desc),\r\n\t\t\t\tonGameBecomeOver: () => {},\r\n\t\t\t},\r\n\t\t\tdesc: (() => {\r\n\t\t\t\tPlayer.CtorArgs.finalize(args.gameDesc);\r\n\t\t\t\treturn args.gameDesc;\r\n\t\t\t})(),\r\n\t\t\toperatorIds: [],\r\n\t\t});\r\n\t\tthis.sockets = new Set(args.sockets); // shallow copy\r\n\t\tthis.groupHostSocket = args.groupHostSocket;\r\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\r\n\t\tJsUtils.instNoEnum (this as ServerGame<S>, \"operators\");\r\n\t\tJsUtils.propNoWrite(this as ServerGame<S>, \"groupHostSocket\", \"sockets\");\r\n\t\tthis.#wsMessageCb = gameOnSocketMessage.bind(this as ServerGame<any>);\r\n\t\tObject.seal(this); //🧊\r\n\r\n\t\tthis.sockets.forEach((s) => {\r\n\t\t\ts.addEventListener(\"message\", this.#wsMessageCb);\r\n\t\t\ts.addEventListener(\"close\", () => {\r\n\t\t\t\tif (this.sockets.size === 1) {\r\n\t\t\t\t\tthis._terminate();\r\n\t\t\t\t}\r\n\t\t\t}, { once: true });\r\n\t\t});\r\n\t\tthis._greetGameSockets(args.gameDesc);\r\n\t}\r\n\r\n\t/** Helper for the constructor */\r\n\tprivate _greetGameSockets(gameDesc: Game.CtorArgs<S>): void {\r\n\t\t// The below cast is safe because GamepartBase reassigns\r\n\t\t// `gameDesc.playerDescs` the result of `Player.finalize`.\r\n\t\tconst humans = (\r\n\t\t\t(gameDesc.players).filter((player) => player.familyId === \"HUMAN\") as Player._CtorArgs[\"HUMAN\"][]\r\n\t\t).freeze();\r\n\t\t// Pass on Game constructor arguments to each client:\r\n\t\tPromise.all(Array.from(this.sockets, (s) =>\r\n\t\t\tnew Promise<void>((resolve) => {\r\n\t\t\t\t// TODO.impl timeouts to handle edge-cases of users leaving. Also in reset().\r\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\r\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.RESET) {\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, { once: true });\r\n\t\t\t})\r\n\t\t)).then(() =>\r\n\t\t\tthis.reset() //👂 \"reset time!\"\r\n\t\t);\r\n\t\tthis.sockets.forEach((s) => {\r\n\t\t\tconst operatorIds = humans\r\n\t\t\t\t.filter((desc) => desc.socket === s)\r\n\t\t\t\t.map((desc) => desc.playerId).freeze();\r\n\t\t\tconst data = JSON.stringify([GroupEv.CREATE_GAME, gameDesc, operatorIds]);\r\n\t\t\ts.send(data); //📢 \"get ready for reset\"\r\n\t\t});\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic async reset(): Promise<Game.ResetSer> {\r\n\t\t// Be ready for clients to indicate readiness to unpause.\r\n\t\tPromise.all(Array.from(this.sockets, (s) =>\r\n\t\t\tnew Promise<void>((resolve) => {\r\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\r\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.UNPAUSE) { // <- clients send this upon receiving resetSer\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, { once: true });\r\n\t\t\t})\r\n\t\t)).then(() => {\r\n\t\t\tthis.statusBecomePlaying(); //👂 \"play time!\"\r\n\t\t});\r\n\r\n\t\tconst resetSer = await super.reset();\r\n\t\tconst data = JSON.stringify([GameEv.RESET, resetSer]);\r\n\t\tthis.sockets.forEach((s) => s.send(data)); //📢 \"get ready for playing!\"\r\n\t\treturn resetSer;\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic setCurrentOperator(nextOperatorIndex: number): void {\r\n\t\t// no-op\r\n\t}\r\n\r\n\r\n\t/** @override */\r\n\tpublic setTimeout(callback: () => void, millis: number, ...args: any[]): number {\r\n\t\treturn setTimeout(callback, millis, args).unref() as unknown as number;\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic cancelTimeout(handle: number): void {\r\n\t\tclearTimeout(handle as unknown as NodeJS.Timer);\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic statusBecomePlaying(): void {\r\n\t\tsuper.statusBecomePlaying();\r\n\t\tconst data = JSON.stringify([GameEv.UNPAUSE]);\r\n\t\tthis.sockets.forEach((s) => s.send(data));\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic statusBecomePaused(): void {\r\n\t\tsuper.statusBecomePaused();\r\n\t\tconst data = JSON.stringify([GameEv.PAUSE]);\r\n\t\tthis.sockets.forEach((s) => s.send(data));\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic commitStateChange(desc: StateChange.Res, socket?: any): void {\r\n\t\tsuper.commitStateChange(desc);\r\n\r\n\t\tif (desc.rejectId) {\r\n\t\t\t// The request was rejected- Notify the requester.\r\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\r\n\t\t\tsocket?.send(data);\r\n\t\t} else {\r\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\r\n\t\t\tthis.sockets.forEach((s) => s.send(data));\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _terminate(): void {\r\n\t\tthis.sockets.forEach((s) => {\r\n\t\t\ts.removeEventListener(\"message\", this.#wsMessageCb);\r\n\t\t});\r\n\t\tthis.#deleteExternalRefs();\r\n\t}\r\n}\r\nJsUtils.protoNoEnum(ServerGame,\r\n\t\"_greetGameSockets\",\r\n\t\"setCurrentOperator\", \"_terminate\",\r\n);\r\nObject.freeze(ServerGame);\r\nObject.freeze(ServerGame.prototype);","import type WebSocket from \"ws\";\r\nimport { JsUtils } from \"defs/JsUtils\";\r\nimport { SOCKET_ID, JoinerEv, GroupEv } from \"defs/OnlineDefs\";\r\n\r\nimport type { Game } from \"game/Game\";\r\nimport type { Coord } from \"floor/Tile\";\r\nimport type { Player } from \"game/player/Player\";\r\nimport { GameManager } from \"game/gameparts/GameManager\";\r\nimport { ServerGame } from \"./ServerGame\";\r\n\r\nimport { Group as _Group } from \"defs/OnlineDefs\";\r\n\r\n/**\r\n * Manages communication between the server, and clients who play in\r\n * the same game together.\r\n */\r\nexport class Group extends _Group {\r\n\r\n\tpublic readonly name: _Group.Name;\r\n\tpublic readonly passphrase: _Group.Passphrase;\r\n\r\n\t#currentGame: ServerGame<any> | undefined;\r\n\tpublic get isCurrentlyPlayingAGame(): boolean {\r\n\t\treturn this.#currentGame !== undefined;\r\n\t}\r\n\r\n\tdeclare private readonly wssBroadcast: (evName: string, ...data: any[]) => void;\r\n\tprivate readonly sockets = new Map<WebSocket, Player.UserInfo>();\r\n\tprivate groupHostSocket: WebSocket;\r\n\r\n\treadonly #initialTtlTimeout: NodeJS.Timeout;\r\n\treadonly #deleteExternalRefs: () => void;\r\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\r\n\treadonly #wsLeaveCb: (ev: WebSocket.CloseEvent) => void;\r\n\r\n\t/** */\r\n\tpublic constructor(args: Readonly<{\r\n\t\twssBroadcast: (evName: string, ...data: any[]) => void,\r\n\t\tname: _Group.Name,\r\n\t\tpassphrase: _Group.Passphrase,\r\n\t\tdeleteExternalRefs: () => void,\r\n\t}>) {\r\n\t\tsuper();\r\n\t\tObject.defineProperty(this, \"wssBroadcast\", { value: args.wssBroadcast });\r\n\t\tthis.name = args.name;\r\n\t\tthis.passphrase = args.passphrase;\r\n\t\tJsUtils.propNoWrite(this as Group, \"name\", \"passphrase\");\r\n\t\tthis.#currentGame = undefined;\r\n\r\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\r\n\t\tthis.#initialTtlTimeout = setTimeout(() => {\r\n\t\t\tif (this.sockets.size === 0) {\r\n\t\t\t\tthis.terminate();\r\n\t\t\t}\r\n\t\t}, (Group.DEFAULT_TTL * 1000)).unref();\r\n\r\n\t\tthis.#wsMessageCb = (ev: WebSocket.MessageEvent): void => {\r\n\t\t\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\r\n\t\t\tswitch (evName) {\r\n\t\t\t\tcase GroupEv.UserInfo.NAME: this._wsOnUserInfoChange(ev.target, args[0]); break;\r\n\t\t\t\tcase GroupEv.CREATE_GAME: if (ev.target === this.groupHostSocket) this._wsOnHostCreateGame(args[0]); break;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.#wsLeaveCb = (ev: WebSocket.CloseEvent): void => {\r\n\t\t\tif (ev.target === this.groupHostSocket || this.sockets.size === 1) {\r\n\t\t\t\t// If the host disconnects, end the session.\r\n\t\t\t\tthis.terminate(); // TODO.design\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.sockets.delete(ev.target);\r\n\t\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\r\n\t\t\t\t[SOCKET_ID(ev.target)]: null,\r\n\t\t\t}]);\r\n\t\t\tthis.sockets.forEach((u,s) => s.send(data));\r\n\t\t};\r\n\t}\r\n\r\n\t/** Let someone into this group */\r\n\tpublic admitSocket(ws: WebSocket, userInfo: Player.UserInfo): void {\r\n\t\tif (this.sockets.has(ws)) {\r\n\t\t\treturn; //⚡\r\n\t\t}\r\n\t\tconsole.info(`socket connect (group):  ${SOCKET_ID(ws)}`);\r\n\t\tif (this.#currentGame) {\r\n\t\t\t// no-op\r\n\t\t}\r\n\t\t{\r\n\t\t\ttype Res = GroupEv.UserInfo.Res;\r\n\t\t\tconst EVENT_NAME = GroupEv.UserInfo.NAME;\r\n\t\t\t{\r\n\t\t\t\t// Notify all other clients in this group of the new player:\r\n\t\t\t\t// NOTE: broadcast modifier not used since socket is not yet in this.sockets.\r\n\t\t\t\tconst data = JSON.stringify([EVENT_NAME, <Res>{[SOCKET_ID(ws)]: userInfo}]);\r\n\t\t\t\tthis.sockets.forEach((u,s) => s.send(data));\r\n\t\t\t}\r\n\t\t\t// Notify the new player of all other players:\r\n\t\t\tconst res: Res = {};\r\n\t\t\tthis.sockets.forEach((u,s) => {\r\n\t\t\t\tres[SOCKET_ID(s)] = u;\r\n\t\t\t});\r\n\t\t\tws.send(JSON.stringify([EVENT_NAME, res]));\r\n\t\t}\r\n\r\n\t\t/** The first socket becomes the session host. */\r\n\t\tif (this.sockets.size === 0) {\r\n\t\t\tclearTimeout(this.#initialTtlTimeout);\r\n\t\t\t// @ts-expect-error : RO=\r\n\t\t\tthis.#initialTtlTimeout = undefined!;\r\n\t\t\tthis.groupHostSocket = ws;\r\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\r\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_LOBBY,\r\n\t\t\t});\r\n\t\t}\r\n\t\tws.addEventListener(\"close\", this.#wsLeaveCb);\r\n\t\tws.addEventListener(\"message\", this.#wsMessageCb);\r\n\t\tthis.sockets.set(ws, userInfo);\r\n\t}\r\n\r\n\t/** Kick someone from this group. */\r\n\tpublic kickSocket(ws: WebSocket): boolean {\r\n\t\tif (this.sockets.delete(ws)) {\r\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\r\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** */\r\n\tprivate _wsOnUserInfoChange(ws: WebSocket, req: GroupEv.UserInfo.Req): void {\r\n\t\tif (typeof req.username !== \"string\"\r\n\t\t || typeof req.teamId   !== \"number\"\r\n\t\t || typeof req.avatar   !== \"string\") {\r\n\t\t\t// User arguments did not match expected format.\r\n\t\t\tconsole.log(`bad format: username: \\`${req.username}\\``\r\n\t\t\t+ `, teamId: \\`${req.teamId}\\`, avatar: \\`${req.avatar}\\`.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.sockets.set(ws, req);\r\n\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\r\n\t\t\t[SOCKET_ID(ws)]: req,\r\n\t\t}]);\r\n\t\tthis.sockets.forEach((u,s) => s.send(data));\r\n\t}\r\n\r\n\t/** */\r\n\tprivate _wsOnHostCreateGame<S extends Coord.System>(\r\n\t\tctorArgs: Game.CtorArgs.UnFin<S>\r\n\t): void {\r\n\t\tconst failureReasons = this._createGameInstance(ctorArgs);\r\n\t\tif (failureReasons.length) {\r\n\t\t\t// TODO.impl handle failure reasons.\r\n\t\t\tconsole.info(failureReasons);\r\n\t\t} else {\r\n\t\t\t// Broadcast to the joiner namespace of this group's change in state:\r\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\r\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_GAME,\r\n\t\t\t});\r\n\t\t\tconsole.info(`group ${this.name} new game`);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param ctorArgs\r\n\t * The `playerDescs` field only contains descriptors for artificial\r\n\t * players. Those for operated players are included by this method.\r\n\t *\r\n\t * @returns\r\n\t * An array of any failure reasons. Empty if none.\r\n\t */\r\n\tprivate _createGameInstance<S extends Coord.System>(\r\n\t\tctorArgs: Game.CtorArgs.UnFin<S>,\r\n\t): readonly string[] {\r\n\t\tconst failureReasons = [];\r\n\t\tif (this.isCurrentlyPlayingAGame) {\r\n\t\t\tfailureReasons.push(\"a game is already in session for this group\");\r\n\t\t\treturn failureReasons;\r\n\t\t}\r\n\t\tfailureReasons.push(...GameManager.CHECK_VALID_CTOR_ARGS(ctorArgs));\r\n\t\tif (failureReasons.length) {\r\n\t\t\treturn failureReasons;\r\n\t\t}\r\n\t\t// Everything needed to create a game exists. Let's do it!\r\n\t\t// @ts-expect-error : RO=\r\n\t\tctorArgs.players = [\r\n\t\t\t...ctorArgs.players,\r\n\t\t\t...Array.from(this.sockets.keys(), (ws) => {\r\n\t\t\t\tconst userInfo = this.sockets.get(ws)!;\r\n\t\t\t\treturn Object.freeze(<Player._CtorArgs[\"HUMAN\"]>{\r\n\t\t\t\t\tsocket:   ws,\r\n\t\t\t\t\tfamilyId: \"HUMAN\",\r\n\t\t\t\t\tusername: userInfo.username,\r\n\t\t\t\t\tteamId:   userInfo.teamId,\r\n\t\t\t\t\tavatar:   userInfo.avatar,\r\n\t\t\t\t\tfamilyArgs: {},\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t].freeze();\r\n\t\tthis.#currentGame = new ServerGame({\r\n\t\t\tsockets: this.sockets.keys(),\r\n\t\t\tgroupHostSocket: this.groupHostSocket,\r\n\t\t\tdeleteExternalRefs: () => { this.#currentGame = undefined; },\r\n\t\t\tgameDesc: ctorArgs,\r\n\t\t});\r\n\t\treturn [];\r\n\t}\r\n\r\n\t/**\r\n\t * - Deletes its own reference to its game (if it exists).\r\n\t * - Disconnects each client.\r\n\t * - Removes all listeners from this namespace.\r\n\t * - Deletes the enclosed Socket.IO namespace from the Server.\r\n\t * - Deletes the only external reference so this can be garbage collected.\r\n\t */\r\n\tprotected terminate(): void {\r\n\t\tfor (const ws of this.sockets.keys()) {\r\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\r\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\r\n\t\t}\r\n\t\tif (this.#currentGame !== undefined) {\r\n\t\t\t// TODO.design need to terminate game?\r\n\t\t\tthis.#currentGame = undefined;\r\n\t\t}\r\n\t\tthis.#deleteExternalRefs();\r\n\r\n\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\r\n\t\t\t[this.name]: JoinerEv.Exist.Status.DELETE,\r\n\t\t});\r\n\t\tconsole.info(`terminated group: \\`${this.name}\\``);\r\n\t}\r\n}\r\nJsUtils.protoNoEnum(Group, \"_wsOnUserInfoChange\", \"_wsOnHostCreateGame\");\r\nObject.freeze(Group);\r\nObject.freeze(Group.prototype);","import type WebSocket from \"ws\";\r\nimport { GroupEv, JoinerEv } from \"defs/OnlineDefs\";\r\nimport { Group } from \"./Group\";\r\nimport { wss } from \"./index\";\r\n\r\n/** */\r\nexport const groups = new Map<string, Group>();\r\nfunction eraseGroup(groupName: string) { groups.delete(groupName); }\r\n\r\n/** */\r\nfunction _isReqValid(desc: JoinerEv.Create.Req): boolean {\r\n\treturn (desc.groupName !== undefined)\r\n\t&& desc.groupName.length <= Group.Name.MaxLength\r\n\t&& Group.Name.REGEXP.test(desc.groupName)\r\n\t&& desc.passphrase.length <= Group.Passphrase.MaxLength\r\n\t&& Group.Passphrase.REGEXP.test(desc.passphrase);\r\n}\r\n/** */\r\nfunction wssBroadcast(evName: string, _data: any): void {\r\n\tconst data = JSON.stringify([evName, _data]);\r\n\twss.clients.forEach((s) => s.send(data));\r\n}\r\n/** */\r\nexport function wsMessageCb(ev: WebSocket.MessageEvent): void {\r\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\r\n\tswitch (evName) {\r\n\t/** */\r\n\tcase JoinerEv.Create.NAME: {\r\n\t\tfunction _res(val: JoinerEv.Create.Res): void {\r\n\t\t\tev.target.send(JSON.stringify([JoinerEv.Create.NAME, val]));\r\n\t\t};\r\n\t\tconst desc = args[0] as JoinerEv.Create.Req;\r\n\t\tif (!_isReqValid(desc) || groups.has(desc.groupName)) {\r\n\t\t\t_res(false); return; //⚡\r\n\t\t}\r\n\t\tgroups.set(\r\n\t\t\tdesc.groupName,\r\n\t\t\tnew Group(Object.freeze({\r\n\t\t\t\twssBroadcast: wssBroadcast,\r\n\t\t\t\tname: desc.groupName,\r\n\t\t\t\tpassphrase: desc.passphrase,\r\n\t\t\t\tdeleteExternalRefs: eraseGroup.bind(null, desc.groupName),\r\n\t\t\t})),\r\n\t\t);\r\n\t\t// Note that existence of the new group is broadcasted only\r\n\t\t// once the creator of thr group has joined it.\r\n\t\t_res(true); break;\r\n\t}\r\n\t/** */\r\n\tcase JoinerEv.TryJoin.NAME: {\r\n\t\tfunction _res(val: JoinerEv.TryJoin.Res): void {\r\n\t\t\tev.target.send(JSON.stringify([JoinerEv.TryJoin.NAME, val]));\r\n\t\t}\r\n\t\tconst req = args[0] as JoinerEv.TryJoin.Req;\r\n\t\tconst group = groups.get(req.groupName);\r\n\t\tif (\r\n\t\t\tgroup === undefined\r\n\t\t\t|| req.passphrase !== group.passphrase\r\n\t\t) {\r\n\t\t\t_res(false); return; //⚡\r\n\t\t}\r\n\t\tconst userInfo = req.userInfo;\r\n\t\tif (userInfo === undefined || userInfo.teamId !== 0) {\r\n\t\t\tthrow new Error(`a socket attempted to connect to group`\r\n\t\t\t+` \\`${group.name}\\` without providing userInfo.`);\r\n\t\t}\r\n\t\t// NOTE: I could make a WeakMap from sockets to their groups,\r\n\t\t// but that would be another global state to manage. Checking\r\n\t\t// every group is kind of stupid, but it's simple and it works.\r\n\t\tfor (const group of groups.values()) {\r\n\t\t\tif (group.kickSocket(ev.target)) break;\r\n\t\t}\r\n\t\tgroup.admitSocket(ev.target, userInfo);\r\n\t\t_res(true); break;\r\n\t}\r\n\t/** */\r\n\tdefault: break;\r\n\t}\r\n}","import \"../base/defs/NodePlatformMods\";\r\n\r\n// Override stack trace to shorten file paths:\r\nprocess.on(\"uncaughtException\", function processOnUncaughtException(err) {\r\n\tconst ROOT = path.resolve(__dirname, \"../..\");\r\n\tconsole.error(\"\\n\\n\");\r\n\tif (err.stack !== undefined) {\r\n\t\terr.stack = err.stack.replace(new RegExp(ROOT.replace(/\\\\/g, \"\\\\\\\\\"), \"g\"), \":\")\r\n\t\t\t.split(\"\\n\").map(frame => {\r\n\t\t\t\tconst fn = frame.indexOf(\"(\");\r\n\t\t\t\treturn fn < 0 ? frame : frame.substring(0, fn) + \" \".repeat(Math.max(0, 35-fn)) + frame.substring(fn);\r\n\t\t\t}).join(\"\\n\");\r\n\t\tfs.writeSync(process.stderr.fd, err.stack);\r\n\t}\r\n\tconsole.error(\"\\n\\n\");\r\n\tprocess.exit(1);\r\n});\r\n\r\n// =========================================\r\nimport os from \"os\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport http from \"http\";\r\nimport express from \"express\";\r\nimport expressStaticGzip from \"express-static-gzip\";\r\nimport WebSocket from \"ws\";\r\nimport type net from \"net\";\r\nimport { SET_SOCKET_ID, SOCKET_ID, JoinerEv } from \"defs/OnlineDefs\";\r\n\r\nconst app = express();\r\nconst server = http.createServer({}, app);\r\nexport const wss = new WebSocket.Server({\r\n\tserver: server,\r\n});\r\nimport { groups, wsMessageCb } from \"./joinerCb\";\r\n\r\n\r\n/** EXPRESS ROOT */\r\n// At runtime, __dirname resolves to \":/dist/server/\"\r\nconst CLIENT_ROOT = path.resolve(__dirname, \"../client\");\r\napp\r\n.disable(\"x-powered-by\")\r\n.use(\"/\", expressStaticGzip(CLIENT_ROOT, {\r\n\tenableBrotli: DEF.PRODUCTION, //🚩 This must match the value in the webpack config.\r\n\tserveStatic: {\r\n\t\tsetHeaders: (res, path, stat): void => {\r\n\t\t\tres.setHeader(\"X-Content-Type-Options\", \"nosniff\");\r\n\t\t\tconst mime = express.static.mime.lookup(path);\r\n\t\t\tif (mime === \"text/html\" /* xhtml? */) {\r\n\t\t\t\tres.setHeader(\"Cache-Control\", \"public, max-age=0\");\r\n\t\t\t}\r\n\t\t},\r\n\t\t// TODO.build enable this when lang term caching is configured for webpack.\r\n\t\t//immutable: DEF.PRODUCTION,\r\n\t\t//maxAge: 31536000000, // 1 year.\r\n\t},\r\n}));\r\n\r\n\r\n/** WSS ON_CONNECTION */\r\nwss.on(\"connection\", function onWsConnect(ws): void {\r\n\t// Upon connection, immediately send a list of existing groups:\r\n\tconst data = JSON.stringify([\r\n\t\tJoinerEv.Exist.NAME,\r\n\t\t(() => {\r\n\t\t\t// TODO.design current implementation may suffer when there are many many groups.\r\n\t\t\tconst build: TU.NoRo<JoinerEv.Exist.Sse> = {};\r\n\t\t\tfor (const [groupName, group] of groups) {\r\n\t\t\t\tbuild[groupName] = (group.isCurrentlyPlayingAGame)\r\n\t\t\t\t? JoinerEv.Exist.Status.IN_GAME\r\n\t\t\t\t: JoinerEv.Exist.Status.IN_LOBBY;\r\n\t\t\t}\r\n\t\t\treturn build;\r\n\t\t})(),\r\n\t]);\r\n\tSET_SOCKET_ID(ws, `${Date.now().toString()}_${(Math.random() * 100) % 100}`);\r\n\tconsole.info(`socket connect (server): ${SOCKET_ID(ws)}`);\r\n\tws.send(data);\r\n\tws.addEventListener(\"message\", wsMessageCb);\r\n});\r\n\r\n\r\n/** HTTP LISTEN */\r\nserver.listen(<net.ListenOptions>{\r\n\tport: DEF.PRODUCTION ? 443 : 80, // TODO.impl there must be a smarter way to do this.\r\n\thost: \"0.0.0.0\",\r\n}, function onServerListening(): void {\r\n\tconst info = <net.AddressInfo>server.address();\r\n\tconsole.info(\r\n\t\t`\\n\\nServer mounted to: \\`${info.address}:${info.port}\\` using ${info.family}.\\n`\r\n\t\t+\"This host can be reached at any of the following addresses:\\n\"\r\n\t);\r\n\tchooseIPAddress().sort().forEach((address) => {\r\n\t\tconsole.info(/* ${SkServer.PROTOCOL} */`${address}:${info.port}`);\r\n\t\t// ^We can exclude the protocol since it will get defaulted by the client side.\r\n\t});\r\n\tconsole.info(\"\");\r\n});\r\n\r\n\r\n/**\r\n * @returns An array of non-internal IP addresses from any of the\r\n * local host's network interfaces.\r\n *\r\n * https://en.wikipedia.org/wiki/Private_network\r\n */\r\n// TODO: change to return a map from each of \"public\" and \"private\" to a list of addresses\r\nexport const chooseIPAddress = (): Array<string> => {\r\n\treturn (Object.values(os.networkInterfaces()).flat() as os.NetworkInterfaceInfo[])\r\n\t.filter((info) => {\r\n\t\treturn !(info.internal); /* && info.family === \"IPv4\" */\r\n\t})\r\n\t.map((info) => {\r\n\t\tif (info.family === \"IPv6\") {\r\n\t\t\treturn `[${info.address}]`;\r\n\t\t} else {\r\n\t\t\treturn info.address;\r\n\t\t}\r\n\t});\r\n};"],"sourceRoot":""}
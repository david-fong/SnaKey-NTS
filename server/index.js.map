{"version":3,"file":"index.js","mappings":"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","sources":["../webpack/runtime/create fake namespace object?","../webpack/runtime/require chunk loading?",".././src/base/defs/JsUtils.ts?",".././src/base/defs/TypeDefs.ts?",".././src/base/lang/LangDescs.ts?",".././src/base/lang/Lang.ts?",".././src/base/lang/impl|lazy|/^\\.\\/.*\\.ts$/|chunkName: lang/[request]|groupOptions: {}|namespace object?","../webpack/bootstrap?","../webpack/runtime/compat get default export?","../webpack/runtime/define property getters?","../webpack/runtime/ensure chunk?","../webpack/runtime/get javascript chunk filename?","../webpack/runtime/hasOwnProperty shorthand?","../webpack/runtime/make namespace object?","../external node-commonjs \"fs\"?","../external node-commonjs \"path\"?",".././src/node_modules/my-type-utils/ModNodePlatform.ts?","../external node-commonjs \"os\"?","../external node-commonjs \"http\"?","../external commonjs \"koa\"?","../external commonjs \"koa-static\"?","../external commonjs \"ws\"?",".././src/base/defs/OnlineDefs.ts?",".././src/base/game/Game.ts?",".././src/base/game/player/RequestBuffer.ts?",".././src/base/game/player/Team.ts?",".././src/base/game/player/Player.ts?",".././src/base/game/gameparts/ScoreInfo.ts?",".././src/base/floor/Grid.ts?",".././src/base/floor/impl/Euclid2.ts?",".././src/base/floor/impl/Beehive.ts?",".././src/base/floor/ImplBarrel.ts?",".././src/base/game/gameparts/GameMirror.ts?",".././src/base/game/gameparts/GameManager.ts?",".././src/base/game/player/robot/RobotPlayer.ts?",".././src/base/game/player/robot/impl/Chaser.ts?",".././src/base/game/player/robot/ImplBarrel.ts?",".././src/server/ServerGame.ts?",".././src/server/Group.ts?",".././src/server/joinerCb.ts?",".././src/server/index.ts?"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t826: 1\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","/// <reference lib=\"dom\"/>\nconst NO_ENUM  = Object.freeze(<const>{ enumerable: false });\nconst NO_WRITE = Object.freeze(<const>{ writable: false });\nfunction _onclickNoButtonRepeat(ev: Event): void {\n\tif ((ev as KeyboardEvent).repeat) { ev.preventDefault(); }\n}\n\nexport namespace JsUtils {\n\n\t/** @requires obj must not contain cycles (circular references). */\n\texport function deepFreeze<T>(obj: T): TU.DeepRo<T> {\n\t\t_deepFreeze(obj);\n\t\treturn obj as TU.DeepRo<T>;\n\t}\n\tfunction _deepFreeze(obj: any): void {\n\t\tfor (const key of Object.getOwnPropertyNames(obj)) {\n\t\t\tconst val = obj[key];\n\t\t\tif (val !== null && typeof val === \"object\") {\n\t\t\t\t_deepFreeze(val);\n\t\t\t}\n\t\t}\n\t\tObject.freeze(obj);\n\t}\n\n\t/** */\n\texport function hasProp<T, K extends keyof T>(obj: T, key: K): boolean {\n\t\treturn Object.prototype.hasOwnProperty.call(obj, key);\n\t}\n\n\t/** */\n\texport function protoNoEnum<T>(\n\t\tctor: abstract new (...args: any[]) => T,\n\t\t...propNames: readonly (keyof T & string)[] | readonly string[]\n\t): void {\n\t\tconst hasProps = Object.getOwnPropertyNames(ctor.prototype).freeze();\n\t\tpropNames.forEach((propName) => {\n\t\t\tif (DEF.DevAssert) {\n\t\t\t\tif (!hasProps.includes(propName as string)) {\n\t\t\t\t\tconst msg = `\\`${ctor.name}\\` prototype has no property named \"${propName}\"`;\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject.defineProperty(ctor.prototype, propName, NO_ENUM);\n\t\t});\n\t}\n\n\texport const instNoEnum  = _configProp.bind(null, NO_ENUM) as _configProp;\n\texport const propNoWrite = _configProp.bind(null, NO_WRITE) as _configProp;\n\n\ttype _configProp = <T>(inst: T, ...propNames: readonly (keyof T & string)[] | readonly string[]) => void;\n\tfunction _configProp<T>(\n\t\tdescriptor: PropertyDescriptor,\n\t\tinst: T, ...propNames: readonly string[]\n\t): void {\n\t\tfor (const propName of propNames) {\n\t\t\tif (DEF.DevAssert) {\n\t\t\t\tconst hasProps = Object.getOwnPropertyNames(inst).freeze();\n\t\t\t\tif (!hasProps.includes(propName as string)) {\n\t\t\t\t\tconst msg = `\\`${Object.getPrototypeOf(inst).constructor.name}\\``\n\t\t\t\t\t+` instance has no property named \"${propName}\"`;\n\t\t\t\t\tthrow new TypeError(msg); // Mismatched property name.\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject.defineProperty(inst, propName, descriptor);\n\t\t}\n\t}\n\n\texport type CamelCaseNameTransforms = Readonly<{\n\t\tspaceyLowercase: string;\n\t\tspaceyUppercase: string;\n\t\tspaceyCapitalized: string;\n\t}>;\n\t/**\n\t * Nothing ultra fancy. Does not handle Acronyms.\n\t */\n\texport function camelCaseTransforms(camelCaseName: string): CamelCaseNameTransforms {\n\t\tconst spaceyLowercase = camelCaseName.replace(/[A-Z]/g, (letter) => \" \" + letter.toLowerCase());\n\t\treturn Object.freeze(<CamelCaseNameTransforms>{\n\t\t\tspaceyLowercase,\n\t\t\tspaceyUppercase: spaceyLowercase.toUpperCase(),\n\t\t\tspaceyCapitalized: spaceyLowercase.split(' ').map((word) =>\n\t\t\t\tword.charAt(0).toUpperCase() + word.substring(1)\n\t\t\t).join(' '),\n\t\t});\n\t}\n\n\texport namespace Web {\n\n\t\t/** A non-user-facing markup utility. */\n\t\texport function prependComment(node: HTMLElement, commentStr: string): void {\n\t\t\tnode.parentNode!.insertBefore(document.createComment(\" \" + commentStr + \" \"), node);\n\t\t}\n\n\t\t/**\n\t\t * This is dependant on the HtmlWebpackPlugin config.\n\t\t */\n\t\texport function adoptStyleSheet(root: Document | ShadowRoot, href: string): void {\n\t\t\t// if (\"adoptedStyleSheets\" in root) {\n\t\t\t// \tconst sheet = Array.from(document.styleSheets).find((sheet) => sheet.href?.endsWith(href));\n\t\t\t// \tif (sheet !== undefined) {\n\t\t\t// \t\t// TODO.build remove this any-casting when adoptedStyleSheets\n\t\t\t// \t\t// stops being experimental and makes it into the DOM spec.\n\t\t\t// \t\t(root as any).adoptedStyleSheets = [sheet];\n\t\t\t// \t\treturn;\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t// The client's browser does not support adoptedStyleSheets :(\n\t\t\troot.appendChild(JsUtils.html(\"link\", [], {\n\t\t\t\trel: \"stylesheet\",\n\t\t\t\thref: href,\n\t\t\t}));\n\t\t}\n\n\t\t/**\n\t\t * @param localPrefix\n\t\t * Prefixes the storage keys on non-production builds. This is\n\t\t * to prevent key collisions on null origins such as `file://`.\n\t\t */\n\t\texport function _makeSmartStorage<\n\t\t\tT extends { [key : string]: string | number | boolean },\n\t\t>(\n\t\t\tlocalPrefix: string,\n\t\t\tstorage: Storage,\n\t\t\texample: T,\n\t\t): T {\n\t\t\tconst smart: T = {} as T;\n\t\t\t(Object.keys(example)).forEach((key) => {\n\t\t\t\tconst storageKey = (DEF.PRODUCTION ? \"\" : localPrefix + \".\") + key;\n\t\t\t\tconst defaultValue = example[key];\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\t\t\t\tObject.defineProperty(smart, key, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tconst val = storage.getItem(storageKey);\n\t\t\t\t\t\treturn (val === null) ? defaultValue : JSON.parse(val);\n\t\t\t\t\t},\n\t\t\t\t\tset: (val: boolean): void => {\n\t\t\t\t\t\tstorage.setItem(storageKey, JSON.stringify(val));\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Sealing the object causes an error. Not sure why.\n\t\t\treturn smart;\n\t\t}\n\t}\n\n\t/**\n\t * A combiner for common operations surrounding `document.createElement`\n\t * with some custom HTML attribute defaults.\n\t *\n\t * - Calls `Object.seal` immediately on the created HTMLElement.\n\t * - If making a button, defaults the `type` to `button` instead of `submit`\n\t *   and prevents the click callback from being spammed by holding down space\n\t *   or enter.\n\t * - If making an anchor, defaults the rel to `noopener`.\n\t */\n\texport function html<K extends keyof HTMLElementTagNameMap>(\n\t\ttagName: K,\n\t\tclassNames?: string[],\n\t\tdomProps?: Readonly<Partial<HTMLElementTagNameMap[K]>>,\n\t): HTMLElementTagNameMap[K] {\n\t\tconst el = document.createElement(tagName);\n\t\ttry { Object.seal(el); } catch (e) { void e; }\n\t\tif (classNames?.length) {\n\t\t\tel.classList.add(...classNames);\n\t\t}\n\n\t\tif (tagName === \"button\") {\n\t\t\t(el as HTMLButtonElement).type = \"button\"; // instead of \"submit\".\n\t\t\tel.addEventListener(\"keydown\", _onclickNoButtonRepeat, { capture: true });\n\t\t} else if (tagName === \"a\") {\n\t\t\t(el as HTMLAnchorElement).draggable = false;\n\t\t\t(el as HTMLAnchorElement).rel = \"noopener\";\n\t\t\t// ^ Should already be the default on modern browsers when\n\t\t\t// `target === \"_blank\"`, but it doesn't hurt to set it\n\t\t\t// anyway. We're going stricter too.\n\t\t}\n\n\t\tif (domProps !== undefined) {\n\t\t\tObject.assign(el, domProps);\n\t\t}\n\t\treturn el;\n\t}\n\n\t/** */\n\texport function svg<K extends keyof SVGElementTagNameMap>(\n\t\ttagName: K,\n\t\tclassNames?: string[],\n\t\tdomProps?: Readonly<Partial<SVGElementTagNameMap[K]>>,\n\t): SVGElementTagNameMap[K] {\n\t\tconst el = document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\n\t\tObject.seal(el);\n\t\tif (classNames?.length) {\n\t\t\tel.classList.add(...classNames);\n\t\t}\n\t\tif (domProps !== undefined) {\n\t\t\tObject.assign(el, domProps);\n\t\t}\n\t\treturn el;\n\t}\n}\nObject.freeze(JsUtils);","import AvatarValues from \"./Avatars.json5\";\n\nexport const SCROLL_INTO_CENTER = Object.freeze(<const>{\n\tbehavior: \"smooth\",\n\tblock:    \"center\",\n\tinline:   \"center\",\n});\nSCROLL_INTO_CENTER as ScrollIntoViewOptions;\n\n\n/** */\nexport abstract class Player { }\nexport namespace Player {\n\n\t/**\n\t * @enum\n\t * Each implementation of the {@link RobotPlayer} class must\n\t * have an entry here.\n\t */\n\texport type Family = keyof typeof Family;\n\texport const Family = Object.freeze(<const>{\n\t\tHuman:  \"Human\",\n\t\tChaser: \"Chaser\",\n\t});\n\tFamily as {\n\t\t[ key in Family ]: key;\n\t};\n\n\t/** See the main documentation in game/player/Player. */\n\texport type Id = number;\n\texport namespace Id {\n\t\texport const NULL = (-1);\n\t}\n\n\texport type Username = string;\n\texport namespace Username {\n\t\texport const REGEXP = /[ a-zA-Z0-9:-]+/;\n\t\texport const MAX_LENGTH = 15; // rather arbitrary choice.\n\t}\n\n\texport type Avatar = string;\n\texport namespace Avatar {\n\t\texport const Values = (AvatarValues as string[])\n\t\t\t// https://emojipedia.org/variation-selector-16/\n\t\t\t.map((emoji) => emoji + \"\\uFE0F\")\n\t\t\t.freeze();\n\n\t\t/** */\n\t\texport function GET_RANDOM(): Avatar {\n\t\t\treturn Values[(Math.random() * Values.length) | 0]!;\n\t\t}\n\t}\n\n\texport interface UserInfo {\n\t\treadonly username: Username;\n\t\treadonly teamId:   number;\n\t\treadonly avatar:   Avatar;\n\t}\n}\nObject.freeze(Player);\n\n\n/** */\nexport abstract class Lang {}\nexport namespace Lang {\n\texport namespace Seq {\n\t\t/**\n\t\t * The choice of this pattern is not out of necessity, but following\n\t\t * the mindset of spec designers when they mark something as reserved:\n\t\t * For the language implementations I have in mind, I don't see the\n\t\t * need to include characters other than these.\n\t\t *\n\t\t * Characters that must never be unmarked as reserved (state reason):\n\t\t * (currently none. update as needed)\n\t\t */\n\t\texport const REGEXP = new RegExp(\"^[a-zA-Z0-9!@#$%^&*()-_=+;:'\\\"\\\\|,.<>/?]+$\");\n\t}\n\t/** See the main documentation in game/lang/Lang */\n\texport type WeightExaggeration = number;\n\texport namespace WeightExaggeration {\n\t\t/**\n\t\t * The choice of this value is somewhat up to taste.\n\t\t * It must be greater than one.\n\t\t */\n\t\texport const MAX = 4;\n\t}\n\t/**\n\t * The choice of the upper bound on the number of times\n\t * is rather arbitrary, but it should not be too small.\n\t */\n\texport const CHAR_HIT_COUNT_SEED_CEILING = 5;\n\n\t/** */\n\texport type Desc = Readonly<{\n\t\tid: string;\n\t\t/** Pretty much a file name. */\n\t\tmodule: string;\n\t\t/** A property-access chain. */\n\t\texport: string;\n\t\t/** The output must match against `Lang.Seq.REGEXP`. */\n\t\tremapFunc: {(input: string): string};\n\t\t/** Scale the font in the game grid */\n\t\tfontZoom: number;\n\t\t/**\n\t\t * The total number of leaf nodes of all root nodes except the\n\t\t * root node with the most leaf nodes.\n\t\t */\n\t\tisolatedMinOpts: number;\n\t\tavgWeight: number;\n\t\tdisplayName:string;\n\t\tblurb: string;\n\t}>;\n}\nObject.freeze(Lang);\nObject.freeze(Lang.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Lang } from \":defs/TypeDefs\";\n\nconst REMAP = Object.freeze(<const>{\n\tIDENT: (input: string): string => input,\n\tLOWER: (input: string): string => input.toLowerCase(),\n});\nREMAP as Readonly<Record<string, {(input: string): string}>>;\n\n\n/** */\nexport const LangDescs: Record<string, Lang.Desc> = {\n\t\"engl-low\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Lowercase\",\n\t\tisolatedMinOpts: 25, avgWeight: 3.8639230769230766,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 1.0,\n\t\tdisplayName: \"English Lowercase (qwerty)\",\n\t\tblurb: \"\",\n\t},\n\t\"engl-mix\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"MixedCase\",\n\t\tisolatedMinOpts: 51, avgWeight: 3.8639230769230775,\n\t\tremapFunc: REMAP.IDENT, fontZoom: 1.0,\n\t\tdisplayName: \"English Mixed-Case (Qwerty)\",\n\t\tblurb: \"\",\n\t},\n\t\"japn-hir\": {\n\t\tid: undefined!,\n\t\tmodule: \"Japanese\", export: \"Hiragana\",\n\t\tisolatedMinOpts: 70, avgWeight: 275509.7083333333,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 1.0,\n\t\tdisplayName: \"Japanese Hiragana\",\n\t\tblurb: \"\",\n\t},\n\t\"japn-kat\": {\n\t\tid: undefined!,\n\t\tmodule: \"Japanese\", export: \"Katakana\",\n\t\tisolatedMinOpts: 68, avgWeight: 45577.26666666667,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 1.0,\n\t\tdisplayName: \"Japanese Katakana\",\n\t\tblurb: \"\",\n\t},\n\t\"kore-dub\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Dubeolsik\",\n\t\tisolatedMinOpts: 9085, avgWeight: 0.9974982117852247,\n\t\tremapFunc: REMAP.IDENT, fontZoom: 1.0,\n\t\tdisplayName: \"Korean Dubeolsik (두벌식 키보드)\",\n\t\tblurb: \"The most common keyboard layout, and South Korea's only Hangul\"\n\t\t+\" standard since 1969. Consonants are on the left, and vowels on\"\n\t\t+\" the right.\",\n\t},\n\t\"kore-sub\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Sebeolsik\",\n\t\tisolatedMinOpts: 10098, avgWeight: 0.9974982117852336,\n\t\tremapFunc: REMAP.IDENT, fontZoom: 1.0,\n\t\tdisplayName: \"Korean Sebeolsik (세벌식 최종 키보드)\",\n\t\tblurb: \"Another Hangul keyboard layout used in South Korea, and the\"\n\t\t+\" final Sebeolsik layout designed by Dr. Kong Byung Woo, hence\"\n\t\t+\" the name. Syllable-initial consonants are on the right, final\"\n\t\t+\" consonants on the left, and vowels in the middle. It is more\"\n\t\t+\" ergonomic than the dubeolsik, but not widely used.\",\n\t},\n\t\"kore-rom\": {\n\t\tid: undefined!,\n\t\tmodule: \"Korean\", export: \"Romanization\",\n\t\tisolatedMinOpts: 4764, avgWeight: 0.9974982117852286,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 1.0,\n\t\tdisplayName: \"Korean Revised Romanization\",\n\t\tblurb: \"The Revised Romanization of Korean (국어의 로마자 표기법; 國語의 로마字\"\n\t\t+\" 表記法) is the official South Korean language romanization system. It\"\n\t\t+\" was developed by the National Academy of the Korean Language from 1995,\"\n\t\t+\" and was released on 7 July 2000 by South Korea's Ministry of Culture\"\n\t\t+\" and Tourism\",\n\t},\n\t\"engl-cell-enc\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"OldCellphone.Encode\",\n\t\tisolatedMinOpts: 7, avgWeight: 3.8639230769230766,\n\t\tremapFunc: REMAP.IDENT, fontZoom: 1.0,\n\t\tdisplayName: \"Old Cellphone Keyboard\",\n\t\tblurb: \"\",\n\t},\n\t\"mors-enc\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Morse.Encode\",\n\t\tisolatedMinOpts: 11, avgWeight: 2.6089716238018403,\n\t\tremapFunc: (input) => { return input;/* TODO.impl */ }, fontZoom: 1.0,\n\t\tdisplayName: \"Morse Encoder\",\n\t\tblurb: \"\",\n\t},\n\t\"mors-dec\": {\n\t\tid: undefined!,\n\t\tmodule: \"English\", export: \"Morse.Decode\",\n\t\tisolatedMinOpts: 40, avgWeight: 2.6089716238018408,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 0.4,\n\t\tdisplayName: \"Morse Decoder\",\n\t\tblurb: \"\",\n\t},\n\t\"ngram2\": {\n\t\tid: undefined!,\n\t\tmodule: \"Ngrams\", export: \"Ngram2\",\n\t\tisolatedMinOpts: 199, avgWeight: 5.000010000000002,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 0.9,\n\t\tdisplayName: \"English Bigrams\",\n\t\tblurb: \"\",\n\t},\n\t\"ngram3\": {\n\t\tid: undefined!,\n\t\tmodule: \"Ngrams\", export: \"Ngram3\",\n\t\tisolatedMinOpts: 399, avgWeight: 2.5000100000000023,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 0.6,\n\t\tdisplayName: \"English Trigrams\",\n\t\tblurb: \"\",\n\t},\n\t\"numpad\": {\n\t\tid: undefined!,\n\t\tmodule: \"Numpad\", export: \"Numpad\",\n\t\tisolatedMinOpts: 99, avgWeight: 1,\n\t\tremapFunc: REMAP.LOWER, fontZoom: 0.95,\n\t\tdisplayName: \"Number Pad\",\n\t\tblurb: \"\",\n\t},\n};\nObject.entries(LangDescs).freeze().forEach(([id,desc]) => {\n\t// @ts-expect-error : RO=\n\tdesc.id = id;\n});\nJsUtils.deepFreeze(LangDescs);","import { JsUtils } from \":defs/JsUtils\";\nimport { Lang as _Lang } from \":defs/TypeDefs\";\nimport { LangDescs } from \"./LangDescs\";\nexport { LangDescs } from \"./LangDescs\";\n\n/** */\nconst CSP_CACHE = new Map<Lang.Desc[\"id\"], readonly Lang.Csp.Weighted[]>();\n\n/**\n * Conceptually, a language is a map from unique written characters\n * to corresponding key-sequences. the key-sequences may be non-unique.\n *\n * Operationally, the reverse map is more useful: A a map from typeable\n * key-sequences to sets of language-unique written characters. Support\n * is not needed for retrieving the sequence corresponding to a written\n * character.\n */\nexport abstract class Lang extends _Lang {\n\n\tpublic readonly desc: Lang.Desc;\n\n\tpublic readonly csps: readonly Lang.Csp.Weighted[];\n\treadonly #size: number;\n\n\treadonly #weights: Float32Array;\n\treadonly #hits: Float64Array;\n\t/**\n\t * A linked-list indexing lookup. The last entry's value is the\n\t * starting index.\n\t */\n\treadonly #next: Uint16Array;\n\n\t/** */\n\tprotected constructor(\n\t\tid: Lang.Desc[\"id\"],\n\t\tweightExaggeration: Lang.WeightExaggeration,\n\t) {\n\t\tsuper();\n\t\tthis.desc = Lang.GetDesc(id);\n\t\tthis.csps = CSP_CACHE.has(id)\n\t\t\t? CSP_CACHE.get(id)!\n\t\t\t: ((): readonly Lang.Csp.Weighted[] => {\n\t\t\t\tconst buildDict = (Object.getPrototypeOf(this).constructor as Lang.ClassIf).BUILD();\n\t\t\t\tconst cspCache = Lang.CreateCspsArray(buildDict);\n\t\t\t\tCSP_CACHE.set(id, cspCache);\n\t\t\t\treturn cspCache;\n\t\t\t})();\n\t\tthis.#size = this.csps.length;\n\t\tJsUtils.propNoWrite(this as Lang, \"desc\", \"csps\");\n\t\t{\n\t\t\tconst scaleWeight = Lang.GetWeightScalingFn(weightExaggeration, this.desc.avgWeight);\n\t\t\tthis.#weights = Float32Array.from(this.csps.map((csp) => scaleWeight(csp.unscaledWt)));\n\t\t}\n\t\tthis.#hits = new Float64Array(this.#size);\n\t\tthis.#next = new Uint16Array(this.#size + 1);\n\t\tObject.seal(this); //🧊\n\t}\n\n\t/** */\n\tpublic reset(): void {\n\t\tfor (let i = 0; i < this.#hits.length; i++) {\n\t\t\tthis.#hits[i] = Math.random() * Lang.RESET_NUM_HITS / this.desc.avgWeight;\n\t\t}\n\t\tconst sorter: { _hits: number, cspsIndex: number }[] = [];\n\t\tthis.#hits.forEach((_hits, cspsIndex) => {\n\t\t\tsorter.push(Object.freeze({ _hits, cspsIndex }));\n\t\t});\n\t\tsorter.push({ _hits: Infinity, cspsIndex: this.#size });\n\t\tsorter.seal().sort((a,b) => a._hits - b._hits).freeze();\n\t\t{\n\t\t\tlet i = this.#next[this.#size] = sorter[0]!.cspsIndex;\n\t\t\tfor (let sortI = 1; sortI < sorter.length; sortI++) {\n\t\t\t\ti = this.#next[i] = sorter[sortI]!.cspsIndex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns\n\t * A random char whose sequence is not a prefix of anything in\n\t * `avoid` and vice versa. Ie. They may share a common prefix as\n\t * long as they are both longer than the shared prefix.\n\t *\n\t * @description\n\t * This method is called to shuffle the char-seq pair at some tile\n\t * A. `avoid` should contain the lang-sequences from all tiles\n\t * reachable by a player occupying any tile B from which they can\n\t * also reach A (except for A itself).\n\t *\n\t * @param avoid\n\t * A collection of sequences to avoid conflicts with when choosing\n\t * a character to return. Empty-string entries are ignored. Freezing\n\t * may result in better performance.\n\t *\n\t * @requires\n\t * The number of leaves in an implementation's tree-structure must\n\t * be greater than the number of non-empty entries in `avoid` for\n\t * all expected combinations of internal state and passed-arguments\n\t * under which it could be called.\n\t */\n\tpublic getNonConflictingChar(\n\t\tavoid: readonly Lang.Seq[],\n\t): Lang.Csp {\n\t\tavoid = avoid.filter((seq) => seq).freeze();\n\t\tconst next = this.#next;\n\n\t\tfor (\n\t\t\tlet i = next[this.#size]!, prev = this.#size;\n\t\t\ti !== this.#size;\n\t\t\tprev = i, i = next[i]!\n\t\t) {\n\t\t\tconst csp = this.csps[i]!;\n\t\t\tif (!avoid.some((avoidSeq) => /*#__INLINE__*/Lang.EitherPrefixesOther(avoidSeq, csp.seq))) {\n\t\t\t\tthis.#hits[i] += 1.0 / this.#weights[i]!;\n\t\t\t\tlet newPrev = i;\n\t\t\t\twhile (\n\t\t\t\t\tnext[newPrev] !== this.#size\n\t\t\t\t\t&& this.#hits[i]! > this.#hits[next[newPrev]!]!\n\t\t\t\t) { newPrev = next[newPrev]!; }\n\n\t\t\t\tif (newPrev !== i) {\n\t\t\t\t\tif (DEF.DevAssert && prev === -1) throw new Error(\"never\");\n\t\t\t\t\tnext[prev] = next[i]!; next[i] = next[newPrev]!; next[newPrev] = i;\n\t\t\t\t}\n\t\t\t\t//if (DEF.DevAssert) { this._assertInvariants(); }\n\t\t\t\treturn csp;\n\t\t\t}\n\t\t}\n\t\t// Enforced by UI and server:\n\t\tthrow new Error(\"never\");\n\t}\n\n\t/** @internal For development testing purposes. */\n\tpublic _assertInvariants(): void {\n\t\tconst visited: boolean[] = [];\n\t\tfor (let i = 0; i < this.#size; i++) {\n\t\t\tvisited[i] = false;\n\t\t}\n\t\tvisited.seal();\n\t\tlet i: number = this.#next[this.#size]!;\n\t\tlet hits = 0;\n\t\tfor (let _i = 0; _i < this.#size; _i++) {\n\t\t\tif (this.#hits[i]! < hits) {\n\t\t\t\tthrow new Error(\"lang hits should be ascending\");\n\t\t\t}\n\t\t\thits = this.#hits[i]!;\n\t\t\tvisited[i] = true;\n\t\t\ti = this.#next[i]!;\n\t\t}\n\t\tif (i !== this.#size) {\n\t\t\tthrow new Error(\"lang next should end by looping back\");\n\t\t}\n\t\tif (visited.some((flag) => flag === false)) {\n\t\t\tthrow new Error(\"lang next should be an exhaustive loop\");\n\t\t}\n\t}\n\n\t/**\n\t * These are calculated after changes to the implementation and the\n\t * result is cached via hardcoding into LangDescs.ts.\n\t */\n\tpublic _calcIsolatedMinOpts(): number {\n\t\t/** All unique sequences sorted in lexical order. */\n\t\tconst allSeqs: string[] = [];\n\t\tthis.csps.forEach((n) => {\n\t\t\tif (allSeqs[allSeqs.length-1] !== n.seq) { allSeqs.push(n.seq); }\n\t\t});\n\t\tallSeqs.freeze();\n\n\t\t/** Every other seq is a prefix of one or several of these. */\n\t\tconst leafSeqs: string[] = [];\n\t\tfor (const seq of [...allSeqs].seal().reverse().freeze()) {\n\t\t\tif (!leafSeqs.some((leaf) => leaf.startsWith(seq))) {\n\t\t\t\tleafSeqs.push(seq);\n\t\t\t}\n\t\t}\n\t\tleafSeqs.freeze();\n\n\t\t/** Every leaf starts with one and only one of these. */\n\t\tconst rootSeqs: string[] = [];\n\t\tfor (const seq of allSeqs) {\n\t\t\tif (!rootSeqs.some((root) => root.startsWith(seq))) {\n\t\t\t\trootSeqs.push(seq);\n\t\t\t}\n\t\t}\n\t\trootSeqs.freeze();\n\n\t\t/** A partition of the leaves according to their roots. */\n\t\tconst rootLeaves = new Map<string, number>();\n\t\trootSeqs.forEach((root) => rootLeaves.set(root, 0));\n\t\tleafSeqs.forEach((leaf) => {\n\t\t\tfor (const root of rootSeqs) {\n\t\t\t\tif (leaf.startsWith(root)) {\n\t\t\t\t\trootLeaves.set(root, rootLeaves.get(root)! + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// The number of leaves except those of the root with the most leaves:\n\t\treturn [...rootLeaves.values()].sort((a,b) => a-b).slice(0,-1).reduce((sum,n) => sum+n, 0);\n\t}\n}\nexport namespace Lang {\n\t/**\n\t * Every constructor function (class literal) implementing the\n\t * `Lang` class must implement this interface.\n\t */\n\texport interface ClassIf {\n\t\tnew (weightScaling: Lang.WeightExaggeration): Lang;\n\t\t/** Note: Does not need to handle caching */\n\t\tBUILD(): ForwardDict;\n\t}\n\n\t/**\n\t * @returns `undefined` if no such language descriptor is found.\n\t */\n\texport function GetDesc(langId: Lang.Desc[\"id\"]): Lang.Desc {\n\t\treturn LangDescs[langId]!;\n\t}\n\tObject.freeze(GetDesc);\n\n\t/** */\n\texport async function Import(langId: Lang.Desc[\"id\"]): Promise<Lang.ClassIf> {\n\t\tconst desc = LangDescs[langId]!;\n\t\tconst module = await import(\n\t\t\t/* webpackChunkName: \"lang/[request]\" */\n\t\t\t`./impl/${desc.module}.ts`\n\t\t);\n\t\treturn desc.export.split(\".\").reduce(\n\t\t\t(nsps, propName) => nsps[propName],\n\t\t\tmodule[desc.module],\n\t\t);\n\t}\n\tObject.freeze(Import);\n\n\t/** */\n\texport function GetWeightScalingFn(\n\t\tweightScaling: Lang.WeightExaggeration,\n\t\tavgUnscaledWeight: number,\n\t): (ogWeight: number) => number {\n\t\tif (weightScaling === 0) return GetWeightScalingFn.UNIFORM;\n\t\tif (weightScaling === 1) return GetWeightScalingFn.IDENTITY;\n\t\treturn (originalWeight: number) => Math.pow(originalWeight / avgUnscaledWeight, weightScaling);\n\t}\n\texport namespace GetWeightScalingFn {\n\t\t// Cache the compiled code by extracting the declaration.\n\t\texport function UNIFORM(): 1 { return 1; }\n\t\texport function IDENTITY(ogWeight: number): number { return ogWeight; }\n\t}\n\tObject.freeze(GetWeightScalingFn);\n\n\t/**\n\t * Does not handle caching.\n\t */\n\texport function CreateCspsArray(forwardDict: Lang.ForwardDict): readonly Lang.Csp.Weighted[] {\n\t\treturn Object.entries(forwardDict).freeze().map(([char, {seq, weight: unscaledWt}]) => {\n\t\t\treturn Object.freeze({ char, seq, unscaledWt });\n\t\t})\n\t\t.seal()\n\t\t.sort((a,b) => b.unscaledWt - a.unscaledWt)\n\t\t// ^Note: Enforcing sort order here is not technically required\n\t\t// as long as forwardDict is deterministic in insertion order.\n\t\t.freeze();\n\t}\n\tObject.freeze(CreateCspsArray);\n\n\t/** Somewhat arbitrary. Greater than one. */\n\texport const RESET_NUM_HITS = 10;\n\n\texport function EitherPrefixesOther(a: string, b: string): boolean {\n\t\treturn (a.length > b.length) ? a.startsWith(b) : b.startsWith(a);\n\t}\n\n\t/**\n\t * Utility functions for implementations to use in their static\n\t * `.BUILD` function.\n\t */\n\texport namespace BuildUtils {\n\t\texport function WORD_FOR_WORD(seq2Weight: Record<Lang.Seq,number>): Lang.ForwardDict {\n\t\t\treturn Object.entries(seq2Weight).freeze().reduce<Lang.ForwardDict>(\n\t\t\t\t(accumulator, [char,weight]) => {\n\t\t\t\t\taccumulator[char] = { seq: char, weight };\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}, {},\n\t\t\t);\n\t\t}\n\t\tObject.freeze(WORD_FOR_WORD);\n\t}\n\n\t/**\n\t * An atomic unit in a written language that constitutes a single\n\t * character. It is completely unique in its language, and has a\n\t * single corresponding sequence (string) typeable on a keyboard.\n\t */\n\texport type Char = string;\n\n\t/**\n\t * A sequence of characters each matching {@link SEQ_REGEXP}\n\t * that represent the intermediate interface between an Operator\n\t * and a `LangChar`. The immediate interface is through the `Lang`\n\t * implementation's {@link Lang#remapKey} method.\n\t */\n\texport type Seq = string;\n\n\t/**\n\t * A key-value pair containing a `LangChar` and its corresponding\n\t * `LangSeq`.\n\t */\n\texport interface Csp {\n\t\treadonly char: Lang.Char,\n\t\treadonly seq:  Lang.Seq,\n\t}\n\texport namespace Csp {\n\t\texport interface Weighted extends Csp {\n\t\t\t/** Unscaled weight. */\n\t\t\treadonly unscaledWt: number;\n\t\t}\n\t}\n\n\t/**\n\t * A map from written characters to their corresponding typeable\n\t * keyboard sequence and relative spawn weight.\n\t *\n\t * Shape that must be passed in to the static tree producer. The\n\t * `Record` type enforces the invariant that {@link Lang.Char}s are\n\t * unique in a {@link Lang}. \"CSP\" is short for {@link Lang.Csp}.\n\t */\n\texport type ForwardDict = Record<\n\t\tLang.Char,\n\t\tReadonly<{seq: Lang.Seq, weight: number}>\n\t>;\n\n\t/**\n\t * A value used to scale the variance in weights. Passing zero will\n\t * cause all weights to be adjusted to equal the average weight.\n\t * Passing `1` will cause no adjustment to be made to the weights.\n\t * Passing a value greater than one will cause an exaggeration of\n\t * the weight distribution.\n\t */\n\texport type WeightExaggeration = _Lang.WeightExaggeration;\n\n\texport type Desc = _Lang.Desc;\n}\nObject.freeze(Lang);\nObject.freeze(Lang.prototype);","var map = {\n\t\"./Chinese.ts\": [\n\t\t7,\n\t\t7,\n\t\t330\n\t],\n\t\"./Emote.ts\": [\n\t\t427,\n\t\t9,\n\t\t858\n\t],\n\t\"./English.ts\": [\n\t\t468,\n\t\t9,\n\t\t184\n\t],\n\t\"./Japanese.ts\": [\n\t\t855,\n\t\t9,\n\t\t410\n\t],\n\t\"./Korean.ts\": [\n\t\t55,\n\t\t9,\n\t\t227\n\t],\n\t\"./Ngrams.ts\": [\n\t\t805,\n\t\t9,\n\t\t273\n\t],\n\t\"./Numpad.ts\": [\n\t\t283,\n\t\t9,\n\t\t683\n\t],\n\t\"./Shell.ts\": [\n\t\t433,\n\t\t9,\n\t\t159\n\t],\n\t\"./defs/Chinese.ts\": [\n\t\t944,\n\t\t7,\n\t\t704\n\t],\n\t\"./defs/English100.ts\": [\n\t\t104,\n\t\t9,\n\t\t885\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 59;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"chunk/\" + {\"159\":\"lang/Shell-ts\",\"184\":\"lang/English-ts\",\"227\":\"lang/Korean-ts\",\"273\":\"lang/Ngrams-ts\",\"330\":\"lang/Chinese-ts\",\"410\":\"lang/Japanese-ts\",\"683\":\"lang/Numpad-ts\",\"704\":\"lang/defs-Chinese-ts\",\"858\":\"lang/Emote-ts\",\"885\":\"lang/defs-English100-ts\"}[chunkId] + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","/// <reference types=\"node\" />\nimport fs from \"fs\";\nimport path from \"path\";\n\nObject.defineProperties(Array.prototype, {\n\tfreeze: { value: function freeze() { return Object.freeze(this); }, enumerable: true, },\n\tseal: { value: function seal() { return Object.seal(this); }, enumerable: true },\n});\n// In-House `--frozen-intrinsics`:\n(<(keyof typeof globalThis)[]>[\n\t\"Object\", \"String\", \"Number\", \"RegExp\", \"Date\",\n\t\"Array\", \"Map\", \"Set\", \"WeakMap\", \"WeakSet\",\n])\n.forEach((key) => {\n\tObject.defineProperty(globalThis, key, {\n\t\tenumerable: true,\n\t\twritable: false,\n\t\tconfigurable: false,\n\t});\n\tObject.freeze((globalThis as any)[key]);\n\tif (key === \"Object\") {\n\t\t// Handle Object.toString specially.\n\t\tObject.seal((globalThis as any)[key].prototype);\n\t\tfor (const prop of Object.getOwnPropertyNames(Object.prototype)) {\n\t\t\tObject.defineProperty(Object.prototype, prop, {\n\t\t\t\tconfigurable: false, enumerable: false, writable: (prop === \"toString\"),\n\t\t\t});\n\t\t}\n\t} else {\n\t\tObject.freeze((globalThis as any)[key].prototype);\n\t}\n});\n\n// Override stack trace to shorten file paths:\nprocess.on(\"uncaughtException\", function processOnUncaughtException(err) {\n\tconst ROOT = path.resolve(__dirname, \"../..\");\n\tconsole.error(\"\\n\\n\");\n\tif (err.stack !== undefined) {\n\t\terr.stack = err.stack.replace(new RegExp(ROOT.replace(/\\\\/g, \"\\\\\\\\\"), \"g\"), \":\")\n\t\t\t.split(\"\\n\").map(frame => {\n\t\t\t\tconst fn = frame.indexOf(\"(\");\n\t\t\t\treturn fn < 0 ? frame : frame.substring(0, fn) + \" \".repeat(Math.max(0, 35-fn)) + frame.substring(fn);\n\t\t\t}).join(\"\\n\");\n\t\tfs.writeSync(process.stderr.fd, err.stack);\n\t}\n\tconsole.error(\"\\n\\n\");\n\tprocess.exit(1);\n});\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"koa\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"koa-static\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ws\");","import type { Player } from \":defs/TypeDefs\";\nimport type NodeWebSocket from \"ws\";\n\n/** Serverside-only. */\nexport function SOCKET_ID(socket: NodeWebSocket): string | never {\n\t// What has it got it its socketses?\n\t// STRING!? or NOTHING!\n\tif (_socketIds.has(socket)) {\n\t\treturn _socketIds.get(socket)!;\n\t} else {\n\t\tthrow new Error(\"never\");\n\t}\n}\nexport function SET_SOCKET_ID(socket: NodeWebSocket, id: string): void {\n\t_socketIds.set(socket, id);\n}\nconst _socketIds = new WeakMap<NodeWebSocket, string>();\n\n\n/** */\nexport abstract class Group { }\nexport namespace Group {\n\texport type Name = string;\n\texport namespace Name {\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]+)$/;\n\t\texport const MaxLength = 30;\n\t}\n\texport type Passphrase = string;\n\texport namespace Passphrase {\n\t\texport const REGEXP = /^(?:[a-zA-Z0-9:-]*)$/;\n\t\texport const MaxLength = 30;\n\t}\n\texport const GameServerReconnectionAttempts = 2;\n\texport const DEFAULT_TTL = 20; // seconds\n}\nObject.freeze(Group);\nObject.freeze(Group.prototype);\n\n\n/** */\nexport namespace JoinerEv {\n\t/** */\n\texport namespace Create {\n\t\texport const NAME = \"joiner/create\";\n\t\texport interface Req {\n\t\t\treadonly groupName: Group.Name,\n\t\t\treadonly passphrase: Group.Passphrase,\n\t\t}\n\t\texport type Res = boolean;\n\t}\n\t/** */\n\texport namespace Exist {\n\t\texport const NAME = \"joiner/exist\";\n\t\t/** Downstream only. */\n\t\texport type Sse = {\n\t\t\treadonly [groupName : string]: Status;\n\t\t};\n\t\texport const enum Status {\n\t\t\tIN_LOBBY = \"in-lobby\",\n\t\t\tIN_GAME  = \"in-game\",\n\t\t\tDELETE   = \"delete\",\n\t\t}\n\t}\n\t/** */\n\texport namespace TryJoin {\n\t\texport const NAME = \"joiner/try-join\";\n\t\texport interface Req {\n\t\t\treadonly groupName: Group.Name;\n\t\t\treadonly passphrase: Group.Passphrase;\n\t\t\treadonly userInfo: Player.UserInfo;\n\t\t}\n\t\texport type Res = boolean;\n\t}\n}\nObject.freeze(JoinerEv);\n\n\n/** */\nexport namespace GroupEv {\n\t/** */\n\texport namespace UserInfo {\n\t\texport const NAME = \"group/user-info-change\";\n\t\texport type Req = Player.UserInfo;\n\t\texport type Res = Record<string, Player.UserInfo | null>;\n\t}\n\n\t/** A broadcast originating from the group host. */\n\texport const CREATE_GAME = \"group/create-game\";\n}\nObject.freeze(GroupEv);\n\n\n/** */\nexport const enum GameEv {\n\t/**\n\t * Upon constructing a _new_ game, the server waits for all clients\n\t * to send this event to indicate that they have finished building\n\t * any necessary HTML, and are now ready to receive the serialized\n\t * reset-state.\n\t */\n\tRESET = \"game/reset\",\n\n\t/**\n\t * Client uses this event during reset procedure after receiving\n\t * the serialized reset-state to indicate that it is ready for\n\t * the game to be un-paused.\n\t */\n\tUNPAUSE = \"game/unpause\",\n\n\t/** */\n\tPAUSE = \"game/pause\",\n\n\t/** */\n\tIN_GAME = \"game/ingame\",\n\n\t/**\n\t * The server will send this event with no arguments to indicate\n\t * that everyone must now return to the lobby, or with a socket\n\t * ID as an argument to indicate that all players operated by\n\t * a client with that socket ID are out of the game.\n\t */\n\tRETURN_TO_LOBBY = \"game/return-to-lobby\",\n}","import type { Lang } from \":lang/Lang\";\nimport type { Coord } from \":floor/Tile\";\nimport type { Grid } from \":floor/Grid\";\nimport type { Player } from \"./player/Player\";\nimport type { ClientPlayer } from \"./player/ClientPlayer\";\nimport type { GameMirror } from \"./gameparts/GameMirror\";\n\n/**\n * **Important** To be properly disposed of, a game must first have\n * either naturally ended, or be paused- both operations of which will\n * properly cancel all internal scheduled callbacks (the callbacks\n * refer to players, which refer to their game, which refers to a\n * whole lot of other things such as the language dictionary, which\n * in some cases may be quite large.)\n *\n * Players can only join a game before it starts. Reconfiguration\n * requires creating a completely new game.\n *\n * There are overlaps between what each implementation needs to do:\n * - Offline and Server games maintain and control the master-game-state.\n * - Offline and Client games display the game-state to a client.\n * - Client  and Server games use network operations to communicate.\n */\nexport namespace Game {\n\n\t/**\n\t * Unlike CtorArgs, these are not passed as no-prototype objects\n\t * (possibly over the network) from the game manager to clients.\n\t * These are abstract handles to game-implementation-dependant\n\t * components.\n\t */\n\texport type ImplArgs = {\n\t\tgridClassLookup<S extends Coord.System>(coordSys: S): Grid.ClassIf<S>;\n\t\tClientPlayer: typeof ClientPlayer | undefined;\n\t\tRobotPlayer: (_this: GameMirror, desc: Player._CtorArgs[Player.RobotFamily]) => Player;\n\t\tonGameBecomeOver: () => void;\n\t};\n\n\tinterface _CtorArgsBase<S extends Coord.System> {\n\t\treadonly coordSys: S;\n\t\treadonly gridDimensions: Grid.Dimensions[S];\n\t\treadonly langId: Lang.Desc[\"id\"];\n\t\treadonly langWeightExaggeration: Lang.WeightExaggeration;\n\t}\n\n\t/**\n\t * Game Constructor Arguments\n\t *\n\t * Important internal note: Upon modification, make appropriate\n\t * changes to GameManager's function for verifying validity of\n\t * client input on the server side.\n\t *\n\t * @template S\n\t * The coordinate system to use. The literal value must also be\n\t * passed as the field `coordSys`.\n\t */\n\texport interface CtorArgs<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\n\t\treadonly players: readonly Player.CtorArgs[];\n\t}\n\texport namespace CtorArgs {\n\t\texport interface UnFin<S extends Coord.System = Coord.System> extends _CtorArgsBase<S> {\n\t\t\treadonly players: readonly Player.CtorArgs.UnFin[];\n\t\t}\n\t\t/** */\n\t\texport type FailureReasons = {\n\t\t\tmissingFields: Array<keyof CtorArgs<Coord.System>>;\n\t\t};\n\t}\n\n\t/**\n\t * Serialization of the Game State after a reset.\n\t *\n\t * Only contains state information that would not be known by a\n\t * non-Game Manager.\n\t */\n\texport interface ResetSer {\n\t\t/**\n\t\t * Indexed by index according to `Grid.forEach` - not by the\n\t\t * `Tile.coord`s of `Grid.forEach` (they may differ).\n\t\t */\n\t\treadonly csps: readonly Lang.Csp[];\n\t\t/**\n\t\t * A map from player ID's to their starting coordinates.\n\t\t */\n\t\treadonly playerCoords: readonly Coord[];\n\t}\n\n\t/**\n\t * - **`PLAYING`** can go to:\n\t *   - `PAUSED`: when a pause request initiated by a player is accepted.\n\t *   - `OVER`:  when certain conditions of players being downed are met.\n\t * - **`PAUSED`** can go to:\n\t *   - `PLAYING`: similar to PLAYING->PAUSED.\n\t * - **`OVER`** can go to:\n\t *   - `PLAYING`: via resetting the game.\n\t */\n\texport enum Status {\n\t\tPLAYING = \"PLAYING\",\n\t\tPAUSED  = \"PAUSED\",\n\t\tOVER    = \"OVER\",\n\t}\n\tObject.freeze(Status);\n\n\t/**\n\t * Global, Game-Setup-Agnostic constants for tuning game behaviour.\n\t *\n\t * Keys beginning with an underscore are probably of no interest to\n\t * people playing the game.\n\t */\n\texport const K = Object.freeze(<const>{\n\t\t/**\n\t\t * A value in `(0,1]`. If `1`, then players can (on average),\n\t\t * boost indefinitely. If close to zero, then players virtually\n\t\t * cannot boost, no matter how much health they have. If `0.3`,\n\t\t * players can boost for roughly 30% of the movements they make.\n\t\t *\n\t\t * This value assumes that the player moves around aimlessly\n\t\t * and randomly. Adjustments for more rational assumptions are\n\t\t * not to be made _here_.\n\t\t */\n\t\tPORTION_OF_MOVES_THAT_ARE_BOOST: 0.4,\n\n\t\t/** A ratio of number of players over grid area. */\n\t\tMAX_PLAYER_CROWDEDNESS: 0.5,\n\n\t\t/**\n\t\t * A strictly-positive integer. Indicates the maximum number\n\t\t * of requests which a clientside player can buffer.\n\t\t */\n\t\t_REQUEST_BUFFER_LENGTH: 5,\n\n\t\t/**\n\t\t * How many times a Decisive RobotPlayer can reuse its cached\n\t\t * target before it will do another cold analysis of its\n\t\t * surroundings.\n\t\t */\n\t\t_ROBOT_PRIORITY_MAX_REUSES: 4,\n\t});\n}\nObject.freeze(Game);","import { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\n\nimport type { Coord }        from \":floor/Tile\";\nimport type { StateChange }  from \":game/StateChange\";\nimport { Player as _Player } from \":defs/TypeDefs\";\n\n/**\n * Used on the clientside to buffer requests when there is network\n * delay. If a request gets rejected, the whole buffer is invalidated.\n */\nexport class RequestBuffer {\n\n\t#lastRejectId = 0; public get lastRejectId(): number { return this.#lastRejectId; }\n\tprivate size = 0;\n\tpublic predictedCoord: Coord;\n\n\tpublic reset(coord: Coord): void {\n\t\tthis.#lastRejectId = 0;\n\t\tthis.size = 0;\n\t\tthis.predictedCoord = coord;\n\t}\n\n\tpublic get isFull(): boolean {\n\t\treturn this.size === Game.K._REQUEST_BUFFER_LENGTH;\n\t}\n\n\t/** @requires `!this.isFull` */\n\tpublic signRequest(req: StateChange.Req): StateChange.Req {\n\t\tif (DEF.DevAssert && this.isFull) {\n\t\t\tthrow new Error(\"never\");\n\t\t}\n\t\tthis.size++;\n\t\tthis.predictedCoord = req.moveDest;\n\t\treturn req;\n\t}\n\n\tpublic getNextRejectId(): number {\n\t\t// return (this.lastRejectId === 0) ? 1 : 0;\n\t\t// Above option returns an \"elegant\" value.\n\t\t// Below returns a hard-to-guess value.\n\t\treturn (this.lastRejectId + ((99 * Math.random()) | 0)) % 100;\n\t}\n\t/**\n\t * Every request signed with the previous rejectId will be\n\t * silently dropped by the game manager.\n\t */\n\tpublic reject(rejectId: number, realCoord: number): void {\n\t\tthis.#lastRejectId = rejectId;\n\t\tthis.size = 0;\n\t\tthis.predictedCoord = realCoord;\n\t}\n\tpublic acceptOldest(): void {\n\t\tthis.size--;\n\t}\n}\nObject.freeze(RequestBuffer);\nObject.freeze(RequestBuffer.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Player } from \"./Player\";\n\n/**\n * @final\n */\nexport class Team {\n\n\t/**\n\t * @returns\n\t * Indicates the order (relative to other teams) in which this\n\t * team was to have all its members downed at the same time at\n\t * least once. Once a team is soft-eliminated, they can continue\n\t * playing as normal, but there is no going back. The game ends\n\t * when all teams but one have been eliminated.\n\t *\n\t * ### Semantics\n\t *\n\t * A comparatively smaller value denotes having been\n\t * eliminated at an earlier point in the game. **The value zero\n\t * denotes _not-having-been-eliminated-yet_**.\n\t */\n\tpublic elimOrder: number = Team.ElimOrder.STANDING;\n\n\tpublic constructor(\n\t\tpublic readonly id: Team.Id,\n\t\tpublic readonly members: readonly Player[],\n\t) {\n\t\tJsUtils.propNoWrite(this as Team, \"id\", \"members\");\n\t\tObject.seal(this); //🧊\n\t\tif (members.length === 0) {\n\t\t\tthrow new Error(\"Teams must have at least one member.\");\n\t\t}\n\n\t}\n\n\tpublic reset(): void {\n\t\tthis.elimOrder = Team.ElimOrder.STANDING;\n\t}\n}\nexport namespace Team {\n\n\texport type Id = number;\n\n\texport type ElimOrder = number;\n\n\t// Special values:\n\texport namespace ElimOrder {\n\t\t/**\n\t\t * A team that is not invincible starts off with such a value.\n\t\t */\n\t\texport const STANDING = 0;\n\t}\n}\nObject.freeze(Team);\nObject.freeze(Team.prototype);","import type * as WebSocket from \"ws\";\nimport { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\n\nimport type { Coord }       from \":floor/Tile\";\nimport type { RobotPlayer } from \"./robot/RobotPlayer\";\nimport type { GameMirror }  from \":game/gameparts/GameMirror\";\n\nimport { RequestBuffer } from \"./RequestBuffer\";\nimport { Player as _Player } from \":defs/TypeDefs\";\nimport { Team } from \"./Team\";\n\n/** */\nexport class Player extends _Player implements _Player.UserInfo {\n\n\tpublic readonly playerId: Player.Id;\n\tpublic readonly familyId: Player.Family;\n\tpublic readonly teamId:   Team.Id;\n\tpublic readonly username: Player.Username;\n\tpublic readonly avatar:   Player.Avatar;\n\n\tprotected readonly game: GameMirror<any>;\n\tpublic readonly reqBuffer: RequestBuffer;\n\t#coord: Coord = 0;\n\t#boosts = 0.0;\n\n\tpublic prevCoord: Coord = undefined!;\n\n\tpublic get team(): Team        { return this.game.teams[this.teamId]!; }\n\tpublic get coord(): Coord      { return this.#coord; }\n\tpublic get boosts(): number    { return this.#boosts; }\n\tpublic get isDowned(): boolean { return this.boosts < 0.0; } // TODO.design decouple from boost.\n\n\tpublic isTeamedWith(other: Player): boolean {\n\t\treturn this.team.members.includes(other);\n\t}\n\n\t/** */\n\tpublic constructor(game: GameMirror<any>, desc: Player.CtorArgs) {\n\t\tsuper();\n\n\t\tthis.playerId = desc.playerId;\n\t\tthis.familyId = desc.familyId;\n\t\tthis.teamId   = desc.teamId;\n\t\tthis.username = desc.username;\n\t\tthis.avatar   = desc.avatar;\n\n\t\tthis.game = game;\n\t\tthis.reqBuffer = new RequestBuffer();\n\n\t\tJsUtils.instNoEnum (this as Player, \"game\");\n\t\tJsUtils.propNoWrite(this as Player, \"game\",\n\t\t\t\"playerId\", \"familyId\", \"teamId\",\n\t\t\t\"username\", \"avatar\", \"reqBuffer\",\n\t\t);\n\t\tif (new.target === Player) {\n\t\t\tObject.seal(this); //🧊\n\t\t}\n\t}\n\n\t/** @virtual */\n\tpublic _onTeamsBootstrapped(): void { void 0; }\n\n\t/** Must be called _after_ the grid has been reset. */\n\tpublic reset(coord: Coord): void {\n\t\tthis.#coord = coord;\n\t\tthis.prevCoord = coord;\n\t\tthis.game.grid.moveEntity(this.playerId, coord, coord);\n\t\tthis.#boosts = 0.0;\n\t\tthis.reqBuffer.reset(coord);\n\t}\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGamePlaying(): void { void 0; }\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGamePaused(): void { void 0; }\n\n\t/** @virtual The default implementation does nothing. */\n\tpublic onGameOver(): void { void 0; }\n\n\t/** @final */\n\tprotected makeMovementRequest(dest: Coord, type: Player.MoveType): void {\n\t\tif (DEF.DevAssert) {\n\t\t\tif (this.game.status !== Game.Status.PLAYING) {\n\t\t\t\t// This is not a necessary precondition, but we're doing it anyway.\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t}\n\t\tif (this.reqBuffer.isFull) return; //⚡\n\n\t\tthis.game.requestStateChange(this.reqBuffer.signRequest({\n\t\t\tauthor: this.playerId,\n\t\t\tlastRejectId: this.reqBuffer.lastRejectId,\n\t\t\tmoveType: type,\n\t\t\tmoveDest: dest,\n\t\t}));\n\t}\n\n\t/**\n\t * Notify this Player.\n\t *\n\t * Causes this Player to update its internal state.\n\t * @virtual\n\t */\n\tpublic _setCoord(dest: Coord): void {\n\t\tthis.prevCoord = this.coord;\n\t\tthis.#coord = dest;\n\t}\n\n\tpublic set boosts(newHealth: number) {\n\t\tconst oldIsDowned = this.isDowned;\n\t\tthis.#boosts = newHealth;\n\n\t\tif (oldIsDowned || !this.isDowned) return;\n\t\tconst team  = this.team;\n\t\tconst teams = this.game.teams;\n\t\tif (team.elimOrder !== Team.ElimOrder.STANDING) {\n\t\t\treturn;\n\t\t}\n\t\t// Right before this downing event, the team has not been\n\t\t// soft-eliminated yet, but it might be now. Check it:\n\t\tif (team.members.every((player) => player.isDowned)) {\n\t\t\t// All players are downed! The team is now eliminated:\n\t\t\tconst numNonStandingTeams\n\t\t\t\t= 1 + teams.filter((team) => {\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\n\t\t\t}).length;\n\n\t\t\tteam.elimOrder = 1 + teams.filter((team) => {\n\t\t\t\treturn team.elimOrder !== Team.ElimOrder.STANDING;\n\t\t\t}).length;\n\t\t\t// Now that a team is newly-eliminated, check if the\n\t\t\t// game should end:\n\t\t\tif (numNonStandingTeams === teams.length) {\n\t\t\t\tthis.game.statusBecomeOver();\n\t\t\t}\n\t\t}\n\t}\n}\nexport namespace Player {\n\n\texport type Family = _Player.Family;\n\texport type RobotFamily = TU.Xcld<_Player.Family, \"Human\">;\n\n\texport type Id = _Player.Id;\n\n\texport type Username = _Player.Username;\n\texport type Avatar   = _Player.Avatar;\n\texport type UserInfo = _Player.UserInfo;\n\n\t/** @enum */\n\texport type MoveType = keyof typeof MoveType;\n\texport const MoveType = Object.freeze(<const>{\n\t\tNORMAL: \"NORMAL\",\n\t\tBOOST:  \"BOOST\",\n\t});\n\tMoveType as { [ key in MoveType ]: key };\n\n\t/** */\n\texport type Changes = {\n\t\treadonly coord?: Coord,\n\t\treadonly boosts: number,\n\t};\n\n\t/**\n\t * Player Constructor Arguments\n\t */\n\texport type CtorArgs = _CtorArgs[Player.Family];\n\texport type _CtorArgs = {\n\t\t[F in Player.Family]: _PreIdAssignmentDict[F] & Readonly<{\n\t\t\tplayerId: Player.Id;\n\t\t}>;\n\t};\n\n\ttype _PreIdAssignmentDict = {\n\t\t[F in Player.Family]: UserInfo & ({\n\t\t\treadonly familyId: F;\n\t\t}) & (\n\t\t\tF extends typeof Player.Family.Human\n\t\t\t\t? { readonly socket: WebSocket | undefined; }\n\t\t\t\t: { readonly familyArgs: RobotPlayer.FamilySpecificPart[Exclude<F, \"Human\">]; }\n\t\t);\n\t};\n\n\texport namespace CtorArgs {\n\n\t\texport type UnFin = _PreIdAssignmentDict[Player.Family];\n\n\t\t/**\n\t\t * Mutates the game descriptor to finalize the players field.\n\t\t *\n\t\t * Squashes teamId fields to be suitable for array indices.\n\t\t */\n\t\texport function finalize<S extends Coord.System>(\n\t\t\tgameDesc: Game.CtorArgs.UnFin<S>,\n\t\t): asserts gameDesc is Game.CtorArgs<S>\n\t\t{\n\t\t\t// Map team ID's to consecutive numbers\n\t\t\t// (to play nice with array representations):\n\t\t\tconst teamIdCleaner: readonly Team.Id[]\n\t\t\t\t= Array.from(new Set(gameDesc.players.map((p) => p.teamId)))\n\t\t\t\t.seal().sort((a, b) => a - b) // This is not a representation requirement.\n\t\t\t\t.freeze().reduce((prev, originalId, squashedId) => {\n\t\t\t\t\tprev[originalId] = squashedId;\n\t\t\t\t\treturn prev;\n\t\t\t\t}, [] as Team.Id[]);\n\n\t\t\t// @ts-expect-error : RO=\n\t\t\tgameDesc.players\n\t\t\t\t= gameDesc.players.slice()\n\t\t\t\t.seal().sort((a,b) => teamIdCleaner[a.teamId]! - teamIdCleaner[b.teamId]!)\n\t\t\t\t.freeze().map<CtorArgs>((p, index) => ({ ...p,\n\t\t\t\t\tplayerId: index,\n\t\t\t\t\tteamId:   teamIdCleaner[p.teamId]!,\n\t\t\t\t\tavatar:   p.avatar ?? Player.Avatar.GET_RANDOM(),\n\t\t\t\t}))\n\t\t\t\t.freeze();\n\t\t}\n\t}\n\tObject.freeze(CtorArgs);\n}\nJsUtils.protoNoEnum(Player,\n\t\"onGamePlaying\", \"onGamePaused\", \"onGameOver\",\n\t\"_onTeamsBootstrapped\",\n);\nObject.freeze(Player);\nObject.freeze(Player.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport { Player } from \"../player/Player\";\n\n\n/**\n * Information about each Player's scores and statistics since the\n * last Game reset. This is separated from Player instances since\n * non-GameManagers have no need to maintain such records throughout\n * the game.\n *\n * @final\n */\nexport class ScoreInfo {\n\n\t/**\n\t * A map from player ID's to information about their scores.\n\t */\n\tpublic readonly entries: readonly ScoreInfo.Entry[];\n\n\tpublic constructor(playerIds: readonly Player.Id[]) {\n\t\tconst entries: Array<ScoreInfo.Entry> = [];\n\t\tfor (const id of playerIds) {\n\t\t\tentries[id] = new ScoreInfo.Entry();\n\t\t}\n\t\tthis.entries = entries;\n\t\tJsUtils.propNoWrite(this as ScoreInfo, \"entries\");\n\t\tObject.seal(this); //🧊\n\t}\n\n\tpublic reset(): void {\n\t\tfor (const entry of this.entries) {\n\t\t\tentry.reset();\n\t\t}\n\t}\n}\nexport namespace ScoreInfo {\n\t/**\n\t */\n\texport class Entry {\n\n\t\tpublic readonly moveCounts: {[M in Player.MoveType]: number};\n\n\t\t// TODO.design how to send this info to the game manager?\n\t\t// It is currently checked on the client side.\n\t\t//public invalidKeyPresses\n\n\t\tpublic constructor() {\n\t\t\tthis.moveCounts = {} as any; // This will be initialized during reset.\n\t\t}\n\n\t\tpublic reset(): void {\n\t\t\t(Object.getOwnPropertyNames(Player.MoveType) as\n\t\t\t\tArray<Player.MoveType>).forEach((key) => {\n\t\t\t\tthis.moveCounts[key] = 0;\n\t\t\t});\n\t\t}\n\t}\n\tObject.freeze(Entry);\n\tObject.freeze(Entry.prototype);\n}\nObject.freeze(ScoreInfo);\nObject.freeze(ScoreInfo.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord, Tile } from \"./Tile\";\nimport type { Player } from \":defs/TypeDefs\";\n\nimport type { WrappedEuclid2 } from \"./impl/Euclid2\";\nimport type { Beehive } from \"./impl/Beehive\";\n\n/**\n * A Collection of Tiles.\n */\nexport abstract class Grid<S extends Coord.System> {\n\n\t// A type-annotated alias to this.constructor.\n\tpublic readonly static: Grid.ClassIf<S>;\n\n\tpublic readonly dimensions: Grid.Dimensions[S];\n\n\tpublic readonly area: number;\n\n\t/**\n\t * Protected. See `Grid.getImplementation` for how to access class\n\t * literals for construction.\n\t */\n\tprotected constructor(desc: Grid.CtorArgs<S>) {\n\t\tObject.freeze(desc);\n\t\tthis.static = desc.Grid;\n\t\tthis.dimensions = desc.dimensions;\n\t\tthis.area = desc.Grid.getArea(desc.dimensions);\n\t\tJsUtils.propNoWrite(this as Grid<S>, \"static\", \"dimensions\");\n\t}\n\n\t/** @virtual */\n\tpublic reset(): void {\n\t\tthis.forEach((tile) => {\n\t\t\tthis.write(tile.coord, {\n\t\t\t\tchar: \"\", seq: \"\",\n\t\t\t});\n\t\t});\n\t}\n\n\t/** */\n\tpublic abstract write(coord: Coord, changes: Tile.Changes): void;\n\n\t/** */\n\tpublic abstract moveEntity(entityId: Player.Id, from: Coord, to: Coord): void;\n\n\t/** */\n\tpublic renderChangeOperatedPlayer(playerId: Player.Id, coord: Coord, prevPlayerCoord: Coord | undefined): void { void 0; }\n\n\t/**\n\t * For BaseGame's implementation of SER/DES to work, the traversal\n\t * order taken by an implementation of this method must depend\n\t * only on the dimensions of the instance. The index is not required\n\t * to equal the tile's coord.\n\t */\n\tpublic abstract forEach(callback: (tile: Tile, index: number) => void): void;\n\n\tpublic abstract forEachShuffled(callback: (tile: Tile, index: number) => void): void;\n\n\t/**\n\t * @returns\n\t * One of the closest unoccupied neighbouring tiles toward the\n\t * direction of `intendedDest`. When possible, ties are encouraged\n\t * to be broken in such a way that imitates movement in a straight\n\t * path (visually speaking).\n\t *\n\t * **Important:** If All destinations from sourceCoord are occupied\n\t * (which includes `sourceCoord` itself), the implementation must\n\t * return `sourceCoord`.\n\t *\n\t * @param intendedDest\n\t *\n\t * @param sourceCoord\n\t * The coordinate from which to find the next hop.\n\t */\n\tpublic abstract getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord;\n\n\t/**\n\t * The opposite of `getUntToward`.\n\t *\n\t * Behaviour is undefined when both arguments are the same.\n\t */\n\tpublic abstract getUntAwayFrom(avoidCoord: Coord, sourceCoord: Coord): Coord;\n\n\t/**\n\t * The returned array should be assumed to contain shallow copies\n\t * of the corresponding Tile objects.\n\t *\n\t * This action is commonly performed by the GameManager when\n\t * shuffling in new CSP's to its grid.\n\t *\n\t * Implementations with wrapping edges must make sure that the\n\t * return value does not contain duplicate tile entries.\n\t *\n\t * @virtual\n\t * Grid implementations are encouraged to override this if they\n\t * have a more efficient way to produce the same result.\n\t */\n\tpublic getAllAltDestsThan(origin: Coord): readonly Tile[] {\n\t\tconst dests = new Map<Coord,Tile>();\n\t\tthis.tileSourcesTo(origin)\n\t\t.flatMap((srcToOrigin) => this.tileDestsFrom(srcToOrigin.coord))\n\t\t.forEach((dest) => {\n\t\t\tif (!dests.has(dest.coord)) { dests.set(dest.coord, dest); }\n\t\t});\n\t\treturn Array.from(dests.values()).freeze();\n\t}\n\n\tpublic getRandomCoord(): Coord {\n\t\treturn this.static.getRandomCoord(this.dimensions);\n\t}\n\n\t/**\n\t * A coord that is at most `radius` movements away from `origin`.\n\t * The returned value does not necessarily need to be within this\n\t * grid's dimensions as long as the returned coordinate can be\n\t * meaningfully truncated by `getUntToward` when passing `origin`\n\t * as the `sourceCoord` argument.\n\t *\n\t * The returned value should follow a uniform distribution.\n\t */\n\tpublic abstract getRandomCoordAround(origin: Coord, radius: number): Coord;\n\n\t/** */\n\tpublic abstract isOccupied(coord: Coord): boolean;\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileAt(coord: Coord): Tile;\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileDestsFrom(coord: Coord): readonly Tile[];\n\t/** Treat the result as a state snapshot. */\n\tpublic abstract tileSourcesTo(coord: Coord): readonly Tile[];\n\n\t/**\n\t * The returned value must be consistent with results from the\n\t * methods `_getTileDestsFrom` and `_getTileSourcesTo`.\n\t */\n\tpublic abstract dist(source: Coord, dest: Coord): number;\n\n\t/**\n\t * @virtual\n\t * Implementations are free to override this to spawn players in\n\t * pretty patterns.\n\t */\n\tpublic static getSpawnCoords(\n\t\tteamSizes: readonly number[],\n\t\tdimensions: Grid.Dimensions[Coord.System],\n\t): readonly (readonly Coord[])[] {\n\t\tconst avoidSet = new Set<Coord>();\n\t\treturn teamSizes.map((numMembers: number) => {\n\t\t\tconst teamSpawnCoords: Array<Coord> = [];\n\t\t\twhile (numMembers > 0) {\n\t\t\t\tlet coord: Coord;\n\t\t\t\tdo {\n\t\t\t\t\tcoord = (this as unknown as Grid.ClassIf<any>).getRandomCoord(dimensions);\n\t\t\t\t} while (avoidSet.has(coord));\n\t\t\t\tteamSpawnCoords.push(coord);\n\t\t\t\tavoidSet.add(coord);\n\t\t\t\tnumMembers--;\n\t\t\t}\n\t\t\treturn teamSpawnCoords.freeze();\n\t\t}).freeze();\n\t}\n}\nexport namespace Grid {\n\n\t/** */\n\texport interface Dimensions {\n\t\t[Coord.System.W_EUCLID2]: WrappedEuclid2.Grid.Dimensions;\n\t\t[Coord.System.BEEHIVE]: Beehive.Grid.Dimensions;\n\t}\n\n\t// ==============================================================\n\t// Note: The below exports do not require any modifications with\n\t// the additions of new coordinate systems.\n\t// ==============================================================\n\n\texport type CtorArgs<S extends Coord.System> = Readonly<{\n\t\tGrid: Grid.ClassIf<S>;\n\t\tsystem: S;\n\t\tdimensions: Dimensions[S];\n\t\tlangCharFontScaling: number;\n\t\tplayers: readonly Player.UserInfo[];\n\t}>;\n\n\t/** Used to simulate abstract static methods. */\n\texport interface ClassIf<S extends Coord.System> {\n\n\t\t/** Constructor */\n\t\tnew(desc: CtorArgs<S>): Grid<S>;\n\n\t\t/**\n\t\t * @returns\n\t\t * The minimum number of leaf nodes a language must have to be\n\t\t * playable with this coordinate system's grid.\n\t\t *\n\t\t * Definition: The maximum possible number- for any tile in the\n\t\t * grid- of all destinations from sources to itself, excluding\n\t\t * itself.\n\t\t */\n\t\tambiguityThreshold: number;\n\n\t\t/** @see Grid.DimensionBounds */\n\t\tsizeLimits: Grid.DimensionBounds<S>;\n\n\t\t/**\n\t\t * @returns\n\t\t * The number of Tiles that could fit in a Grid of such bounds.\n\t\t */\n\t\tgetArea(bounds: Dimensions[S]): number;\n\n\t\t/**\n\t\t * \\*Assuming the grid is lattice-like and is partitioned into\n\t\t * highly similar patches where each patch has a center, and\n\t\t * all tiles in the patch are closer to that center tile than\n\t\t * to any other patch's center tile. Returns the minimum number\n\t\t * of tiles that must be visited to get from the center of one\n\t\t * patch to any neighbouring patch.\n\t\t */\n\t\tgetLatticePatchDiameter(area: number): number;\n\n\t\t/**\n\t\t * @returns\n\t\t * A coordinate with random, integer-valued fields within the\n\t\t * specified upper limits\n\t\t */\n\t\tgetRandomCoord(bounds: Dimensions[S]): Coord;\n\n\t\t/**\n\t\t * Return values do not need to be the same for repeated calls\n\t\t * with identical arguments. None of the returned coordinates\n\t\t * should be the same.\n\t\t */\n\t\tgetSpawnCoords(\n\t\t\tteamSizes: readonly number[],\n\t\t\tdimensions: Dimensions[S],\n\t\t): readonly (readonly Coord[])[];\n\t}\n\n\t/**\n\t * Bounds are inclusive. Ie. the specified values are _just_ allowed.\n\t *\n\t * Upper and lower bounds must be strictly positive integer values.\n\t */\n\texport type DimensionBounds<S extends Coord.System> = {\n\t\t[P in keyof Dimensions[S]]: Dimensions[S][P] extends number ? {\n\t\t\treadonly min: number;\n\t\t\treadonly max: number;\n\t\t} : undefined;\n\t};\n}\n// Grid gets frozen in PostInit after _Constructors get initialized.\nObject.freeze(Grid);\nObject.freeze(Grid.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord as BaseCoord, Coord, Tile } from \":floor/Tile\";\nimport type { Player } from \":defs/TypeDefs\";\nimport { Grid as AbstractGrid } from \":floor/Grid\";\ntype S = BaseCoord.System.W_EUCLID2;\n\nexport type Dim = {\n\treadonly height: number;\n\treadonly width:  number;\n\treadonly _render: {\n\t\twrapX: number | \"autoscroll\";\n\t\twrapY: number | \"autoscroll\";\n\t};\n};\n\n/**\n * Euclid2 Internal Augmented Coord\n *\n * Immutable.\n */\nexport class IAC {\n\tpublic constructor(\n\t\tpublic readonly x: number,\n\t\tpublic readonly y: number,\n\t) {\n\t\tObject.freeze(this);\n\t}\n\tpublic static from(dimensions: Dim, coord: Coord): IAC {\n\t\treturn new IAC(coord % dimensions.width, ((coord / dimensions.width) | 0));\n\t}\n\tpublic toCoord(dimensions: Dim): Coord {\n\t\treturn (this.y * dimensions.width) + this.x;\n\t}\n\n\tpublic static distX(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = Math.abs(i1.x - i2.x);\n\t\treturn (dx < dim.width / 2) ? dx : (dim.width - dx);\n\t}\n\tpublic static distY(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dy = Math.abs(i1.y - i2.y);\n\t\treturn (dy < dim.height / 2) ? dy : (dim.height - dy);\n\t}\n\tpublic static oneNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn dx + dy;\n\t}\n\tpublic static infNorm(dim: Dim, i1: IAC.Bare, i2: IAC.Bare): number {\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn Math.max(dx, dy);\n\t}\n\t/** Returns wrapping information as signums. */\n\tpublic static wrapInfo(dim: Dim, from: IAC.Bare, to: IAC.Bare): IAC.Bare {\n\t\treturn Object.freeze({\n\t\t\tx: (Math.abs(to.x - from.x) < dim.width  / 2) ? 0 : (to.x < from.x) ? -1 : 1,\n\t\t\ty: (Math.abs(to.y - from.y) < dim.height / 2) ? 0 : (to.y < from.y) ? -1 : 1,\n\t\t});\n\t}\n\t/**\n\t * @returns\n\t * A number in the range (0, 1). `One` means the x and y\n\t * coordinates align to the x or y axis, and `Zero` means they\n\t * are 45 degrees from the x or y axis.\n\t *\n\t * ```latex\n\t * \\frac{\\left|\\left|x\\right|-\\left|y\\right|\\right|}{\\left|x\\right|+\\left|y\\right|}=a\n\t * ```\n\t */\n\tpublic static axialAlignment(dim: Dim, _i1: Coord, _i2: Coord): number {\n\t\tconst i1 = IAC.from(dim, _i1), i2 = IAC.from(dim, _i2);\n\t\tconst dx = IAC.distX(dim,i1,i2), dy = IAC.distY(dim,i1,i2);\n\t\treturn (Math.abs(dx - dy)) / (dx + dy);\n\t}\n\n\tpublic add(other: IAC.Bare): IAC {\n\t\treturn new IAC(\n\t\t\tthis.x + other.x,\n\t\t\tthis.y + other.y,\n\t\t);\n\t}\n\tpublic sub(other: IAC.Bare): IAC {\n\t\treturn new IAC(\n\t\t\tthis.x - other.x,\n\t\t\tthis.y - other.y,\n\t\t);\n\t}\n\tpublic iSub(other: IAC.Bare): IAC {\n\t\treturn this.add(this.sub(other));\n\t}\n\tpublic mul(scalar: number): IAC {\n\t\treturn new IAC(\n\t\t\tscalar * this.x,\n\t\t\tscalar * this.y,\n\t\t);\n\t}\n\tpublic mod(dim: Dim): IAC {\n\t\tlet {x,y} = this;\n\t\twhile (x < 0) x += dim.width;\n\t\twhile (y < 0) y += dim.height;\n\t\tx %= dim.width;\n\t\ty %= dim.height;\n\t\treturn new IAC(x,y);\n\t}\n}\nexport namespace IAC {\n\texport type Bare = {\n\t\treadonly x: number;\n\t\treadonly y: number;\n\t};\n}\nObject.freeze(IAC);\nObject.freeze(IAC.prototype);\n\n\n/**\n * Edges are wrapped.\n */\nexport namespace WrappedEuclid2 {\n\n\t/**\n\t * Euclid2 Grid\n\t */\n\texport class Grid extends AbstractGrid<S> {\n\n\t\tpublic static ambiguityThreshold = 24;\n\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = JsUtils.deepFreeze({\n\t\t\theight: { min: 5, max: 51 },\n\t\t\twidth:  { min: 5, max: 51 },\n\t\t\t_render: undefined,\n\t\t});\n\n\t\tprivate readonly _grid: SealedArray<Tile>;\n\t\treadonly #occ: Uint8Array;\n\n\t\tprotected readonly iacCache: readonly IAC[];\n\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\n\t\t\tsuper(desc);\n\n\t\t\tthis.#occ = new Uint8Array(this.area);\n\t\t\tconst grid: Tile[] = [];\n\t\t\tfor (let y = 0; y < this.dimensions.height; y++) {\n\t\t\t\tfor (let x = 0; x < this.dimensions.width; x++) {\n\t\t\t\t\tgrid.push({ coord: (y * this.dimensions.width) + x, seq: \"\" });\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._grid = grid.seal();\n\n\t\t\tconst iacCache = [];\n\t\t\tfor (let y = 0; y < desc.dimensions.height; y++) {\n\t\t\t\tfor (let x = 0; x < desc.dimensions.width; x++) {\n\t\t\t\t\tiacCache.push(new IAC(x,y));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.iacCache = iacCache.freeze();\n\t\t\tJsUtils.instNoEnum(this as Grid, \"iacCache\");\n\t\t\tJsUtils.propNoWrite(this as Grid, \"_grid\", \"iacCache\");\n\t\t\tif (new.target === Grid) {\n\t\t\t\tObject.seal(this); //🧊\n\t\t\t}\n\t\t}\n\n\t\tpublic override reset(): void {\n\t\t\tsuper.reset();\n\t\t\tthis.#occ.fill(0);\n\t\t}\n\n\t\tpublic override write(coord: Coord, changes: Tile.Changes): void {\n\t\t\tthis._grid[coord] = Object.freeze(Object.assign(\n\t\t\t\t{}, this._grid[coord], changes,\n\t\t\t));\n\t\t}\n\n\t\tpublic override moveEntity(entityId: Player.Id, from: Coord, to: Coord): void {\n\t\t\tthis.#occ[from] = 0;\n\t\t\tthis.#occ[to] = 1;\n\t\t}\n\n\t\tpublic override forEach(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tfor (let i = 0; i < this.area; i++) {\n\t\t\t\tconsumer(this._grid[i]!, i);\n\t\t\t}\n\t\t}\n\t\tpublic override forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tconst indices = new Uint16Array(this.area);\n\t\t\tfor (let i = 0; i < this.area; i++) {\n\t\t\t\tindices[i] = i;\n\t\t\t}\n\t\t\tindices.sort(() => Math.random() - 0.5);\n\t\t\tfor (const index of indices) {\n\t\t\t\tconsumer(this._grid[index]!, index);\n\t\t\t}\n\t\t}\n\n\t\tpublic override getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord {\n\t\t\tconst options = this.tileDestsFrom(sourceCoord)\n\t\t\t.filter((tile) => !this.isOccupied(tile.coord))\n\t\t\t.map((tile) => {\n\t\t\t\tconst tileIac = this.iacCache[tile.coord]!;\n\t\t\t\tconst destIac = this.iacCache[intendedDest]!;\n\t\t\t\treturn {\n\t\t\t\t\ttile, iac: tileIac,\n\t\t\t\t\tinfNorm: IAC.infNorm(this.dimensions, tileIac, destIac),\n\t\t\t\t\toneNorm: IAC.oneNorm(this.dimensions, tileIac, destIac),\n\t\t\t\t};\n\t\t\t});\n\t\t\tif (options.length === 0) {\n\t\t\t\treturn sourceCoord;\n\t\t\t}\n\t\t\toptions.sort((ta, tb) =>  ta.infNorm - tb.infNorm);\n\t\t\toptions.length = 3;\n\t\t\toptions.sort((ta, tb) => ta.oneNorm - tb.oneNorm);\n\t\t\tconst best = options[0]!;\n\t\t\t// Filter out non-optimal options:\n\t\t\tfor (let i = 1; i < options.length; i++) {\n\t\t\t\tif (options[i]!.infNorm > best.infNorm) {\n\t\t\t\t\toptions.splice(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (options.length === 1) {\n\t\t\t\t// Minor optimization:\n\t\t\t\treturn best.tile.coord;\n\t\t\t}\n\t\t\t// Choose one of the most favourable using some randomness\n\t\t\t// weighted to follow a straight-looking path of movement.\n\t\t\tif (best.infNorm === best.oneNorm) {\n\t\t\t\t// (the axial option (if it exists) should be the first\n\t\t\t\t// due to the previous sort's tie-breaker.\n\t\t\t\tif (IAC.axialAlignment(this.dimensions, sourceCoord, intendedDest) > 0.5) {\n\t\t\t\t\t// The path is aligned more with the x or y axis than\n\t\t\t\t\t// it is with those axes rotated 45 degrees.\n\t\t\t\t\treturn best.tile.coord;\n\t\t\t\t} else {\n\t\t\t\t\t// Ignore the axial option in further computations:\n\t\t\t\t\toptions.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Choose a random non-axial option:\n\t\t\treturn options[((options.length * Math.random()) | 0)]!.tile.coord;\n\t\t}\n\t\tpublic override getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Coord {\n\t\t\tconst avoid = this.iacCache[_avoidCoord]!;\n\t\t\tconst src = this.iacCache[_sourceCoord]!;\n\t\t\tconst dest = src.iSub(avoid).mod(this.dimensions);\n\t\t\treturn dest.toCoord(this.dimensions);\n\t\t}\n\n\t\tpublic override getAllAltDestsThan(originCoord: Coord): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\n\t\t}\n\n\t\tpublic override getRandomCoordAround(_origin: Coord, radius: number): Coord {\n\t\t\tconst origin = this.iacCache[_origin]!;\n\t\t\treturn new IAC(\n\t\t\t\torigin.x + ((2 * radius * (Math.random() - 0.5) | 0)),\n\t\t\t\torigin.y + ((2 * radius * (Math.random() - 0.5) | 0)),\n\t\t\t).mod(this.dimensions).toCoord(this.dimensions);\n\t\t}\n\n\t\tpublic override dist(source: Coord, dest: Coord): number {\n\t\t\treturn IAC.infNorm(this.dimensions,\n\t\t\t\tthis.iacCache[source]!,\n\t\t\t\tthis.iacCache[dest]!,\n\t\t\t);\n\t\t}\n\n\t\tpublic override isOccupied(coord: Coord): boolean {\n\t\t\treturn this.#occ[coord]! !== 0;\n\t\t}\n\t\tpublic override tileAt(coord: Coord): Tile {\n\t\t\treturn this._grid[coord]!;\n\t\t}\n\t\tpublic override tileDestsFrom(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\tconst iac = this.iacCache[coord]!;\n\t\t\tlet wrapX = false, wrapY = false;\n\t\t\tconst W = this.dimensions.width, H = this.dimensions.height;\n\t\t\tlet t = (iac.y - radius);    if (t < 0) { t += H; wrapY = true; }\n\t\t\tlet l = (iac.x - radius);    if (l < 0) { l += W; wrapX = true; }\n\t\t\tlet b = (iac.y + radius +1); if (b > H) { b -= H; wrapY = true; }\n\t\t\tlet r = (iac.x + radius +1); if (r > W) { r -= W; wrapX = true; }\n\t\t\t// ^Adjusted so that t and l can be treated as non-wrapped.\n\t\t\tconst dests: Array<Tile> = [];\n\t\t\tif (wrapX) {\n\t\t\t\tconst _t = t * W;\n\t\t\t\tdests.push(...this._grid.slice(_t, _t+r).freeze());\n\t\t\t\tif (wrapY) {\n\t\t\t\t\tdests.push(...this._grid.slice(0, r).freeze());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst b1 = wrapY ? H : b;\n\t\t\tconst sliceLength = (radius * 2) + 1;\n\t\t\tfor (let y = t; y < b1; y++) {\n\t\t\t\tconst begin = (y * W) + l;\n\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength).freeze());\n\t\t\t}\n\t\t\tif (wrapX && !wrapY && (b !== H)) { dests.length -= r; }\n\t\t\tif (wrapY) {\n\t\t\t\tfor (let y = 0; y < b; y++) {\n\t\t\t\t\tconst begin = (y * W) + l;\n\t\t\t\t\tdests.push(...this._grid.slice(begin, begin+sliceLength).freeze());\n\t\t\t\t}\n\t\t\t\tif (wrapX) { dests.length -= r; }\n\t\t\t}\n\t\t\t// TODO.impl use a set when radius > 2 to prevent duplicate entries?\n\t\t\treturn dests.freeze();\n\t\t}\n\t\tpublic override tileSourcesTo(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(coord, radius);\n\t\t}\n\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\n\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\n\t\t\treturn dim.height * dim.width;\n\t\t}\n\n\t\tpublic static getLatticePatchDiameter(area: number): number {\n\t\t\treturn Math.sqrt(area);\n\t\t}\n\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\n\t\t\tconst x = ((dimensions.width  * Math.random()) | 0);\n\t\t\tconst y = ((dimensions.height * Math.random()) | 0);\n\t\t\treturn (y * dimensions.width) + x;\n\t\t}\n\n\t\t/** @internal */\n\t\tpublic _assertSomeInvariants(): void {\n\t\t\tconst bad = this._grid.map((t,i) => {\n\t\t\t\tconst arr = this.getAllAltDestsThan(t.coord).map(t => t.coord).sort().freeze();\n\t\t\t\treturn { i, arr };\n\t\t\t}).filter(o => o.arr.length !== 25).freeze();\n\t\t\tif (bad.length) {\n\t\t\t\tconsole.error(bad);\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t}\n\t}\n\texport namespace Grid {\n\t\t/**\n\t\t * If `width` is not specified, `height` is taken as its default value.\n\t\t */\n\t\texport type Dimensions = Dim;\n\t}\n\tGrid.prototype.tileSourcesTo = Grid.prototype.tileDestsFrom;\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\n\tObject.freeze(Grid);\n\tObject.freeze(Grid.prototype);\n}\nObject.freeze(WrappedEuclid2);","import { JsUtils } from \":defs/JsUtils\";\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { Player } from \":defs/TypeDefs\";\nimport { Grid as AbstractGrid } from \":floor/Grid\";\ntype S = Coord.System.BEEHIVE;\n\n\n\n\n\n// TODO: refactor to use dash and fash (forward slash). the current way (dash and bash) requires\n// negative values of dash, and I feel like the mental load is lighter if everything is positive\n// in the regular case.\n\n\n\n\n\n/**\n * Beehive Internal Augmented Coord\n */\nexport class IAC {\n\n\t/** 🕒 3'o'clock direction */\n\tpublic readonly dash: number;\n\n\t/** 🕔 5'o'clock direction */\n\tpublic readonly bash: number;\n\n\tpublic constructor(desc: IAC.Bare) {\n\t\tthis.dash = desc.dash;\n\t\tthis.bash = desc.bash;\n\t\tObject.freeze(this); //🧊\n\t}\n\tpublic toCoord(): Coord {\n\t\t// TODO.impl\n\t\treturn undefined!;\n\t}\n\n\tpublic round(): IAC {\n\t\t// I'm pretty proud of this despite the fact that I don't\n\t\t// think there's anything very impressive about it.\n\t\tconst floorDash = Math.floor(this.dash);\n\t\tconst floorBash = Math.floor(this.bash);\n\t\tconst d = floorDash - this.dash;\n\t\tconst b = floorBash - this.bash;\n\t\tif (d > 2 * b) {\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash   });\n\t\t} else if (d < 0.5 * b) {\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash+1 });\n\t\t} else if (Math.min(d, b) > 0.5) {\n\t\t\treturn new IAC({ dash: floorDash+1, bash: floorBash+1 });\n\t\t} else {\n\t\t\treturn new IAC({ dash: floorDash  , bash: floorBash   });\n\t\t}\n\t}\n\tpublic add(other: IAC.Bare): IAC {\n\t\treturn new IAC({\n\t\t\tdash: this.dash + other.dash,\n\t\t\tbash: this.bash + other.bash,\n\t\t});\n\t}\n\tpublic sub(other: IAC.Bare): IAC {\n\t\treturn new IAC({\n\t\t\tdash: this.dash - other.dash,\n\t\t\tbash: this.bash - other.bash,\n\t\t});\n\t}\n\tpublic mul(scalar: number): IAC {\n\t\treturn new IAC({\n\t\t\tdash: scalar * this.dash,\n\t\t\tbash: scalar * this.bash,\n\t\t});\n\t}\n}\nexport namespace IAC {\n\texport type Bare = Readonly<{\n\t\tdash: number;\n\t\tbash: number;\n\t}>;\n}\nObject.freeze(IAC);\nObject.freeze(IAC.prototype);\n\n\n/**\n * ### 🐝 BEES !\n *\n * ## 🐝 BEES !\n *\n * # 🐝 BEES !\n *\n * ```text\n *   ___   ___\n *  //  \\_//  \\__\n *  \\\\__/  \\__/  \\\n *     \\\\__/ \\\\__/\n * ```\n *\n * [(bees)](https://giphy.com/gifs/oprah-bees-VhFps32TlNgsg)\n * [(Hexagons)](https://www.youtube.com/watch?v=thOifuHs6eY)\n */\nexport namespace Beehive {\n\t/**\n\t * Beehive Grid\n\t */\n\texport class Grid extends AbstractGrid<S> {\n\n\t\tpublic static ambiguityThreshold = 18;\n\n\t\tpublic static sizeLimits: AbstractGrid.DimensionBounds<S> = JsUtils.deepFreeze({\n\t\t\tdash:    { min: 10, max: 50 },\n\t\t\tbslash:  { min: 10, max: 50 },\n\t\t\tfslash:  { min: 10, max: 50 },\n\t\t});\n\n\t\t/**\n\t\t */\n\t\t// TODO.design determine spec for indexing\n\t\t// Then initialize the field in the constructor\n\t\t// Also design HTML representation and initialize in Grid.Visible\n\t\tprivate readonly grid: readonly (readonly Tile[])[];\n\n\t\tpublic constructor(desc: AbstractGrid.CtorArgs<S>) {\n\t\t\tsuper(desc);\n\n\t\t\t// Initialize `grid`:\n\t\t\tconst grid: any[] = undefined!;\n\t\t\tthis.grid = grid.freeze();\n\t\t\tif (new.target === Grid) {\n\t\t\t\tObject.seal(this); //🧊\n\t\t\t}\n\t\t}\n\n\t\tpublic override write(coord: Coord, changes: Tile.Changes): void {\n\t\t\t// TODO.impl\n\t\t}\n\n\t\tpublic override moveEntity(entityId: Player.Id, from: Coord, to: Coord): void {\n\n\t\t}\n\n\t\tpublic override forEach(consumer: (tile: Tile, index: number) => void): void {\n\t\t\tlet i = 0;\n\t\t\tfor (const row of this.grid) {\n\t\t\t\tfor (const tile of row) {\n\t\t\t\t\tconsumer(tile, i++);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic override forEachShuffled(consumer: (tile: Tile, index: number) => void): void {\n\t\t\t// const indices: Array<number> = new Array(this.area);\n\t\t\t// for (let i = 0; i < this.area; i++) {\n\t\t\t// \tindices[i] = i;\n\t\t\t// }\n\t\t\t// indices.sort((a,b) => Math.random() - 0.5);\n\t\t\t// Object.freeze(indices);\n\t\t\t// for (const index of indices) {\n\t\t\t// \tconsumer(this.grid[index]!, index);\n\t\t\t// }\n\t\t}\n\n\t\tpublic override getUntToward(intendedDest: Coord, sourceCoord: Coord): Coord {\n\t\t\treturn undefined!;\n\t\t}\n\t\tpublic override getUntAwayFrom(_avoidCoord: Coord, _sourceCoord: Coord): Coord {\n\t\t\t// return this.getUntToward(\n\t\t\t// \tsourceCoord.add(sourceCoord.sub(avoidCoord)),\n\t\t\t// \tsourceCoord,\n\t\t\t// );\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic override getAllAltDestsThan(originCoord: Coord): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(originCoord, 2);\n\t\t}\n\n\t\tpublic override getRandomCoordAround(origin: Coord, radius: number): Coord {\n\t\t\t// Note to self when I implement this:\n\t\t\t// Be careful about getting proper uniform random distribution!\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic override dist(source: Coord, dest: Coord): number {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic override isOccupied(coord: Coord): boolean {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic override tileAt(coord: Coord): Tile {\n\t\t\treturn undefined!;\n\t\t}\n\n\t\tpublic override tileDestsFrom(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\tconst result: Array<Tile> = [];\n\t\t\treturn result.freeze();\n\t\t}\n\n\t\tpublic override tileSourcesTo(coord: Coord, radius = 1): readonly Tile[] {\n\t\t\treturn this.tileDestsFrom(coord, radius);\n\t\t}\n\n\t\tdeclare public static getSpawnCoords: AbstractGrid.ClassIf<S>[\"getSpawnCoords\"];\n\n\t\tpublic static getArea(dim: Grid.Dimensions): number {\n\t\t\tconst shorterSide = Math.min(dim.fslash, dim.bslash);\n\t\t\tconst longerSide  = Math.max(dim.fslash, dim.bslash);\n\t\t\tconst width = (-1) + dim.dash + shorterSide;\n\t\t\tlet area = 2 * shorterSide * (dim.dash + width);\n\t\t\tarea += (longerSide - shorterSide - 1) * width;\n\t\t\treturn area;\n\t\t}\n\n\t\tpublic static getLatticePatchDiameter(area: number): number {\n\t\t\tif (area < 0.25) {\n\t\t\t\tthrow new RangeError(\"determinant of a radical will be strictly negative.\");\n\t\t\t}\n\t\t\t// Given radius `r` and diameter = `1 + 2*r`, the area is\n\t\t\t// `1 + 6*r*(1+r)/2`. Rearrange to solve for `d` given the\n\t\t\t// area: `0 = 3r^2 + 3r + (1-a)`. Use quadratic formula.\n\t\t\tconst radius = ((-3) + Math.sqrt(9 - (12 * (1 - area)))) / 6;\n\t\t\treturn 1 + (2 * radius);\n\t\t}\n\n\t\tpublic static getRandomCoord(dimensions: Grid.Dimensions): Coord {\n\t\t\treturn new IAC(undefined!).toCoord();\n\t\t}\n\t}\n\texport namespace Grid {\n\t\texport type Dimensions = {\n\t\t\tdash: number;\n\t\t\tbslash: number;\n\t\t\tfslash: number;\n\t\t};\n\t}\n\tGrid.prototype.tileSourcesTo = Grid.prototype.tileDestsFrom;\n\tJsUtils.protoNoEnum(Grid, \"tileAt\", \"tileDestsFrom\", \"tileSourcesTo\");\n\tObject.freeze(Grid);\n\tObject.freeze(Grid.prototype);\n}\nObject.freeze(Beehive);","import type { Coord } from \"./Tile\";\nimport type { Grid } from \":floor/Grid\";\nimport { WrappedEuclid2 } from \"./impl/Euclid2\";\nimport { Beehive } from \"./impl/Beehive\";\n\nexport { Grid } from \"./Grid\";\n\n// Each implementation must register itself into this dictionary.\n// See CmapManager.ts.\nconst Dict: { readonly [S in Coord.System]: Grid.ClassIf<S> } = Object.freeze({\n\t// These are initialized later to avoid bootstrapping issues.\n\t[ \"Euclid2\" ]: WrappedEuclid2.Grid,\n\t[ \"Beehive\" ]: Beehive.Grid,\n});\n\n/**\n * @returns\n * A Grid class for the specified coordinate system, or undefined if\n * no such implementation exists.\n */\nexport const GetGridImpl = <S extends Coord.System>(coordSys: S): Grid.ClassIf<S> => {\n\t// Note: At the time of writing this, separating this into\n\t// two lines is necessary (otherwise Typescript will feel\n\t// overwhelmed)\n\tconst ctor = Dict[coordSys];\n\treturn ctor as unknown as Grid.ClassIf<S>;\n};","import { JsUtils} from \":defs/JsUtils\";\nimport { Game } from \"../Game\";\nimport { Lang } from \":lang/Lang\";\n\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { StateChange } from \"../StateChange\";\nimport type { Grid } from \":floor/Grid\";\nimport type { ClientPlayer } from \"../player/ClientPlayer\";\n\nimport { Player } from \"../player/Player\";\nimport { Team } from \"../player/Team\";\n\n/** */\nexport abstract class GameMirror<S extends Coord.System = Coord.System> {\n\n\tpublic readonly grid: Grid<S>;\n\treadonly #onGameBecomeOver: () => void;\n\n\tpublic readonly players: readonly Player[];\n\tpublic readonly clientPlayers: readonly ClientPlayer[];\n\t#currentClientPlayer: ClientPlayer;\n\t/** Indexable by team ID's. */\n\tpublic readonly teams: readonly Team[];\n\n\t#status: Game.Status;\n\n\t/** */\n\tpublic constructor(args: {\n\t\treadonly impl: Game.ImplArgs,\n\t\treadonly desc: Game.CtorArgs<S>,\n\t\treadonly clientPlayerIds: readonly Player.Id[],\n\t}) {\n\t\tconst { impl, desc, clientPlayerIds } = args;\n\t\tObject.freeze(desc);\n\t\tObject.freeze(desc.players);\n\t\tdesc.players.forEach((desc) => Object.freeze(desc));\n\t\tObject.freeze(clientPlayerIds);\n\n\t\tconst langDesc = Lang.GetDesc(args.desc.langId);\n\t\tconst gridClass = impl.gridClassLookup(desc.coordSys);\n\t\tthis.grid = new (gridClass)({\n\t\t\tGrid: gridClass,\n\t\t\tsystem: desc.coordSys,\n\t\t\tdimensions: desc.gridDimensions,\n\t\t\tlangCharFontScaling: langDesc.fontZoom,\n\t\t\tplayers: desc.players,\n\t\t}) as GameMirror<S>[\"grid\"];\n\n\t\tthis.#onGameBecomeOver = impl.onGameBecomeOver;\n\n\t\t// Construct players:\n\t\tconst players = this.#createPlayers(desc, impl, clientPlayerIds, langDesc);\n\t\tthis.players  = players.players;\n\t\tthis.clientPlayers = players.client;\n\t\t{\n\t\t\tconst teams: Player[][] = [];\n\t\t\tthis.players.forEach((player) => {\n\t\t\t\tif (!teams[player.teamId]) {\n\t\t\t\t\tteams[player.teamId] = [];\n\t\t\t\t}\n\t\t\t\tteams[player.teamId]!.push(player);\n\t\t\t});\n\t\t\tthis.teams = teams.map((teammateArray, teamId) => {\n\t\t\t\treturn new Team(teamId, teammateArray);\n\t\t\t});\n\t\t}\n\t\tJsUtils.propNoWrite(this as GameMirror<S>,\n\t\t\t\"grid\", \"players\", \"clientPlayers\", \"teams\",\n\t\t);\n\t\tthis.players.forEach((player) => player._onTeamsBootstrapped());\n\t\tthis.setCurrentClientPlayer(0);\n\t}\n\n\t/** */\n\tpublic reset(): void {\n\t\tthis.grid.reset();\n\n\t\t// We must reset status to PAUSED to pass a state-transition\n\t\t// assertion when changing status later to PLAYING.\n\t\tthis.#status = Game.Status.PAUSED;\n\t}\n\n\n\t/** Helper for the constructor. */\n\t#createPlayers(\n\t\tgameDesc: Game.CtorArgs<S>,\n\t\timplArgs: Game.ImplArgs,\n\t\tclientPlayerIds: readonly Player.Id[],\n\t\tlangDesc: Lang.Desc,\n\t): {\n\t\tplayers: readonly Player[],\n\t\tclient: readonly ClientPlayer[],\n\t} {\n\t\tconst players = gameDesc.players.map((pDesc) => {\n\t\t\tif (pDesc.familyId === Player.Family.Human) {\n\t\t\t\treturn (clientPlayerIds.includes(pDesc.playerId))\n\t\t\t\t\t? new implArgs.ClientPlayer!(this, pDesc, langDesc)\n\t\t\t\t\t: new Player(this, pDesc);\n\t\t\t} else {\n\t\t\t\treturn implArgs.RobotPlayer(\n\t\t\t\t\tthis as GameMirror<any>,\n\t\t\t\t\tpDesc,\n\t\t\t\t);\n\t\t\t}\n\t\t}).freeze();\n\t\treturn Object.freeze({\n\t\t\tplayers,\n\t\t\tclient: clientPlayerIds.map((playerId) => players[playerId] as ClientPlayer).freeze(),\n\t\t});\n\t}\n\n\t/** @final */\n\tpublic deserializeResetState(ser: Game.ResetSer): void {\n\t\tJsUtils.deepFreeze(ser);\n\n\t\tthis.grid.forEach((tile, index) => {\n\t\t\tthis.grid.write(tile.coord, ser.csps[index]!);\n\t\t});\n\t\tser.playerCoords.forEach((coord, playerId) => {\n\t\t\tthis.players[playerId]!.reset(coord);\n\t\t});\n\t}\n\n\tpublic get currentClientPlayer(): ClientPlayer {\n\t\treturn this.#currentClientPlayer;\n\t}\n\t/** @param index - The index into `this.clientPlayers` */\n\tpublic setCurrentClientPlayer(index: number): void {\n\t\tconst next = this.clientPlayers[index]!;\n\t\tif (!DEF.DevAssert && next === undefined) { throw new Error(\"never\"); }\n\t\tif (this.currentClientPlayer !== next) {\n\t\t\tthis.grid.renderChangeOperatedPlayer(next.playerId, next.coord, this.#currentClientPlayer?.coord);\n\t\t\tthis.#currentClientPlayer = next;\n\t\t}\n\t}\n\n\n\tpublic get status(): Game.Status {\n\t\treturn this.#status;\n\t}\n\n\t/**\n\t * On the client side, this should only be accessed through a\n\t * wrapper function that also makes UI-related changes.\n\t *\n\t * If the game is already playing, this does nothing.\n\t */\n\tpublic statusBecomePlaying(): void {\n\t\tif (this.status === Game.Status.PLAYING) {\n\t\t\tconsole.info(\"[statusBecomePlaying]: Game is already playing\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.status !== Game.Status.PAUSED) {\n\t\t\tthrow new Error(\"Can only resume a game that is currently paused.\");\n\t\t}\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGamePlaying();\n\t\t});\n\t\tthis.#status = Game.Status.PLAYING;\n\t}\n\n\t/**\n\t * On the client side, this should only be accessed through a\n\t * wrapper function that also makes UI-related changes.\n\t *\n\t * If the game is already paused, this does nothing.\n\t */\n\tpublic statusBecomePaused(): void {\n\t\tif (this.status === Game.Status.PAUSED) {\n\t\t\tconsole.info(\"[statusBecomePaused]: Game is already paused\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.status === Game.Status.OVER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGamePaused();\n\t\t});\n\t\tthis.#status = Game.Status.PAUSED;\n\t}\n\n\t/**\n\t * This should be called when all teams have been eliminated.\n\t * A team becomes (and subsequently and unconditionally stays)\n\t * eliminated when all their members are in a downed state at\n\t * the same time.\n\t *\n\t * This should not be controllable by UI input elements. Instead,\n\t * The UI layer can pass a callback to the constructor.\n\t */\n\tpublic statusBecomeOver(): void {\n\t\tif (this.status === Game.Status.OVER) return;\n\t\tthis.players.forEach((player) => {\n\t\t\tplayer.onGameOver();\n\t\t});\n\t\tthis.#status = Game.Status.OVER;\n\t\tthis.#onGameBecomeOver();\n\t\tconsole.info(\"game is over!\");\n\t}\n\n\t/**\n\t * Must eventually result in a call to commitStateChange.\n\t * Crosses the network boundary for online games.\n\t */\n\tpublic abstract requestStateChange(desc: StateChange.Req, authorSock?: any): void;\n\n\t/** @virtual */\n\tprotected commitTileMods(coord: Coord, changes: Tile.Changes): void {\n\t\t// JsUtils.deepFreeze(changes); // <- already done by caller.\n\t\tif (changes.seq !== undefined) {\n\t\t\tconst sources = this.grid.tileSourcesTo(coord);\n\t\t\tthis.clientPlayers.forEach((p) => {\n\t\t\t\t// Refresh the client player's `seqBuffer` (maintain invariant) for new CSP:\n\t\t\t\tif (sources.some((src) => src.coord === p.coord)) {\n\t\t\t\t\tp.seqBufferAcceptKey(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.grid.write(coord, changes);\n\t}\n\n\t/** @virtual */\n\tprotected commitStateChange(desc: StateChange.Res, authorSock?: WebSocket): void {\n\t\tJsUtils.deepFreeze(desc);\n\t\tconst author = this.players[desc.author]!;\n\n\t\tif (desc.rejectId !== undefined) {\n\t\t\tauthor.reqBuffer.reject(desc.rejectId, author.coord);\n\t\t\treturn; //⚡\n\t\t}\n\t\tauthor.reqBuffer.acceptOldest();\n\n\t\tfor (const [coord, changes] of Object.entries(desc.tiles).freeze()) {\n\t\t\tthis.commitTileMods(parseInt(coord), changes);\n\t\t}\n\t\tfor (const [pid, changes] of Object.entries(desc.players).freeze()) {\n\t\t\tconst p = this.players[parseInt(pid)]!;\n\t\t\tp.boosts = changes.boosts;\n\n\t\t\tif (changes.coord !== undefined) {\n\t\t\t\tconst prevCoord = p.coord;\n\t\t\t\t// note: the order of the below lines does not matter.\n\t\t\t\tthis.grid.moveEntity(p.playerId, prevCoord, changes.coord);\n\t\t\t\tp._setCoord(changes.coord);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** */\n\tpublic setTimeout(callback: TimerHandler, millis: number, ...args: any[]): number {\n\t\treturn setTimeout(callback, millis, args);\n\t}\n\n\t/** */\n\tpublic cancelTimeout(handle: number): void {\n\t\tclearTimeout(handle);\n\t}\n}\nObject.freeze(GameMirror);\nObject.freeze(GameMirror.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport { Lang, LangDescs } from \":lang/Lang\";\nimport { Game } from \"../Game\";\n\nimport type { Coord } from \":floor/Tile\";\nimport type { StateChange } from \"../StateChange\";\nimport { Player } from \"../player/Player\";\nimport { ScoreInfo } from \"./ScoreInfo\";\nimport { GetGridImpl } from \":floor/ImplBarrel\";\n\nimport { GameMirror } from \"./GameMirror\";\n\n/** */\nexport abstract class GameManager<\n\tS extends Coord.System = Coord.System,\n> extends GameMirror<S> {\n\n\tpublic readonly lang: Lang = undefined!;\n\treadonly #langImportPromise: Promise<Lang>;\n\n\tprivate readonly scoreInfo: ScoreInfo;\n\n\t/** */\n\tpublic constructor(args: {\n\t\treadonly impl: Game.ImplArgs,\n\t\treadonly desc: Game.CtorArgs<S>,\n\t\treadonly clientPlayerIds: readonly Player.Id[],\n\t}) {\n\t\tsuper(args);\n\n\t\tthis.scoreInfo = new ScoreInfo(this.players.map((player) => player.playerId));\n\t\tJsUtils.propNoWrite(this as GameManager<S>, \"scoreInfo\");\n\n\t\t// https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import\n\t\tthis.#langImportPromise = Lang.Import(args.desc.langId).then((LangConstructor) => {\n\t\t\t// @ts-expect-error : RO=\n\t\t\tthis.lang = new LangConstructor(args.desc.langWeightExaggeration);\n\t\t\tJsUtils.propNoWrite(this as GameManager<S>, \"lang\");\n\n\t\t\tif (DEF.DevAssert && (LangDescs[args.desc.langId]!.isolatedMinOpts < this.grid.static.ambiguityThreshold)) {\n\t\t\t\t// Enforced By: clientside UI and `CHECK_VALID_CTOR_ARGS`.\n\t\t\t\tthrow new Error(\"never\");\n\t\t\t}\n\t\t\treturn this.lang;\n\t\t});\n\t}\n\n\t/** */\n\tpublic override async reset(): Promise<Game.ResetSer> {\n\t\t// Reset the grid and event record:\n\t\tsuper.reset();\n\t\tconst resetSer = Object.freeze({\n\t\t\tplayerCoords: [] as Coord[],\n\t\t\tcsps: [] as Lang.Csp[],\n\t\t});\n\n\t\t// Reset hit-counters in the current language:\n\t\t// This must be done before shuffling so that the previous\n\t\t// history of shuffle-ins has no effects on the new pairs.\n\t\tawait this.#langImportPromise;\n\t\tthis.lang.reset();\n\t\tthis.grid.forEachShuffled((tile, index) => {\n\t\t\tconst csp = this.dryRunShuffleLangCspAt(tile.coord);\n\t\t\tthis.grid.write(tile.coord, csp);\n\t\t\tresetSer.csps[index] = csp;\n\t\t});\n\n\t\t// Reset and spawn players:\n\t\tthis.teams.forEach((team) => team.reset());\n\t\tconst spawnPoints = this.grid.static.getSpawnCoords(\n\t\t\tthis.teams.map((team) => team.members.length),\n\t\t\tthis.grid.dimensions,\n\t\t);\n\t\tthis.teams.forEach((team, teamIndex) => {\n\t\t\tteam.members.forEach((member, memberIndex) => {\n\t\t\t\tconst coord = spawnPoints[teamIndex]![memberIndex]!;\n\t\t\t\tmember.reset(coord);\n\t\t\t\tresetSer.playerCoords[member.playerId] = coord;\n\t\t\t});\n\t\t});\n\t\tthis.scoreInfo.reset();\n\n\t\treturn resetSer;\n\t}\n\n\n\t/**\n\t * **Important:** Nullifies the existing values at `tile` and does\n\t * not consume the returned values, which must be done externally.\n\t *\n\t * @param coord\n\t *\n\t * @returns\n\t * A {@link Lang.Csp} that can be used as a replacement for that\n\t * currently in `tile`.\n\t */\n\tprivate dryRunShuffleLangCspAt(coord: Coord): Lang.Csp {\n\t\t// First, clear values for the target tile so its current\n\t\t// (to-be-previous) values don't get unnecessarily avoided.\n\t\tthis.grid.write(coord, { seq: \"\" });\n\n\t\tconst avoid = this.grid\n\t\t\t.getAllAltDestsThan(coord)\n\t\t\t.map((tile) => tile.seq)\n\t\t\t.freeze();\n\t\treturn this.lang.getNonConflictingChar(avoid);\n\t}\n\n\t/**\n\t * @param authorSock - Only passed on the server.\n\t */\n\tpublic override requestStateChange(req: StateChange.Req, authorSock?: WebSocket): void {\n\t\tconst author = this.players[req.author]!;\n\t\tif (req.lastRejectId !== author.reqBuffer.lastRejectId) {\n\t\t\t// client hasn't received previously sent reject ID yet.\n\t\t\treturn; //⚡\n\t\t}\n\t\tif (this.status !== Game.Status.PLAYING || this.grid.isOccupied(req.moveDest)) {\n\t\t\tthis.commitStateChange({\n\t\t\t\trejectId: author.reqBuffer.getNextRejectId(),\n\t\t\t\tauthor: req.author,\n\t\t\t}, authorSock);\n\t\t\treturn; //⚡\n\t\t}\n\t\tconst moveIsBoost = (req.moveType === Player.MoveType.BOOST);\n\t\tconst authorNewBoosts = author.boosts + (moveIsBoost ? -1 : Game.K.PORTION_OF_MOVES_THAT_ARE_BOOST);\n\t\tif (moveIsBoost && authorNewBoosts < 0) {\n\t\t\tthis.commitStateChange({\n\t\t\t\trejectId: author.reqBuffer.getNextRejectId(),\n\t\t\t\tauthor: req.author,\n\t\t\t}, authorSock);\n\t\t\treturn; //⚡\n\t\t}\n\n\t\t// Update stats records:\n\t\tconst scoreInfo = this.scoreInfo.entries[author.playerId]!;\n\t\tscoreInfo.moveCounts[req.moveType] += 1;\n\n\t\t// Set response fields according to spec in `PlayerMovementEvent`:\n\t\tthis.commitStateChange(<StateChange.Res.Accepted>{\n\t\t\tauthor: req.author,\n\t\t\tmoveType: req.moveType,\n\t\t\tplayers: {\n\t\t\t\t[author.playerId]: {\n\t\t\t\t\tboosts: authorNewBoosts,\n\t\t\t\t\tcoord: req.moveDest,\n\t\t\t\t},\n\t\t\t},\n\t\t\ttiles: {\n\t\t\t\t[req.moveDest]: this.dryRunShuffleLangCspAt(req.moveDest),\n\t\t\t},\n\t\t}, authorSock);\n\t}\n}\nexport namespace GameManager {\n\t/**\n\t * If cleaning can be appropriately performed, this function will\n\t * do so. If not, it will indicate invalidities in its return value.\n\t */\n\texport function CHECK_VALID_CTOR_ARGS(args: TU.NoRo<Game.CtorArgs.UnFin>): string[] {\n\t\t//#region\n\t\tconst bad: string[] = [];\n\t\ttype Key = keyof Game.CtorArgs.UnFin;\n\t\tconst requiredFields = Object.freeze(<{[K in Key]: any}>{\n\t\t\tcoordSys: 0, gridDimensions: 0,\n\t\t\tlangId: 0, langWeightExaggeration: 0, players: 0,\n\t\t});\n\t\tconst missingFields: Key[] = [];\n\t\tfor (const fieldName in requiredFields) {\n\t\t\tconst field = args[fieldName as Key];\n\t\t\tif (field === undefined || field === null) {\n\t\t\t\tmissingFields.push(fieldName as Key);\n\t\t\t}\n\t\t}\n\t\tif (missingFields.length) {\n\t\t\tbad.push(\"Missing the following arguments: \" + missingFields);\n\t\t}\n\n\t\t// Check lang-floor compatibility:\n\t\tconst langDesc = Lang.GetDesc(args.langId);\n\t\tconst gridClass = GetGridImpl(args.coordSys);\n\t\tif (langDesc === undefined) {\n\t\t\tbad.push(`No language with the ID \\`${args.langId}\\` exists.`);\n\t\t} else if (gridClass === undefined) {\n\t\t\tbad.push(`No grid with the system ID \\`${args.coordSys}\\` exists.`);\n\t\t} else {\n\t\t\tif (langDesc.isolatedMinOpts < gridClass.ambiguityThreshold) {\n\t\t\t\tbad.push(\"The provided language does not have enough sequences\"\n\t\t\t\t+\"\\nto ensure that a shuffling operation will always succeed when\"\n\t\t\t\t+\"\\npaired with the provided grid system.\");\n\t\t\t}\n\t\t}\n\n\t\tif (typeof args.langWeightExaggeration !== \"number\") {\n\t\t\tbad.push(`Language Weight Exaggeration expected a number, but`\n\t\t\t+` \\`${args.langWeightExaggeration}\\` is not a number.`);\n\t\t} else {\n\t\t\targs.langWeightExaggeration = Math.max(0, parseFloat(\n\t\t\t\targs.langWeightExaggeration as any\n\t\t\t));\n\t\t}\n\n\t\tObject.entries(gridClass.sizeLimits as Record<string, {min:number,max:number}>).forEach(([dimension, limits]) => {\n\t\t\tif (limits === undefined) return;\n\t\t\tconst val = (args.gridDimensions as any)[dimension];\n\t\t\tif (typeof val !== \"number\") {\n\t\t\t\tbad.push(`Expected a number for dimension \"${dimension}\" of grid dimensions.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (val < limits.min || val > limits.max) {\n\t\t\t\tbad.push(`Expected a number within [${limits.min}, ${limits.max}] but got ${val}.`);\n\t\t\t}\n\t\t\tconst area = gridClass.getArea(args.gridDimensions);\n\t\t\tconst numPlayers = args.players.length;\n\t\t\tif (numPlayers / area > Game.K.MAX_PLAYER_CROWDEDNESS) {\n\t\t\t\tbad.push(`To have ${numPlayers} players, the grid's area must be greater`\n\t\t\t\t+` than ${numPlayers / Game.K.MAX_PLAYER_CROWDEDNESS}, but got ${area}.`);\n\t\t\t}\n\t\t});\n\t\t// TODO.impl check all the rest of the things.\n\t\t// if (!(Player.Username.REGEXP.test(desc.username))) {\n\t\t//     throw new RangeError(`Username \\\"${desc.username}\\\"`\n\t\t//     + ` does not match the required regular expression,`\n\t\t//     + ` \\\"${Player.Username.REGEXP.source}\\\".`\n\t\t//     );\n\t\t// }\n\t\treturn bad;\n\t\t//#endregion\n\t}\n}\nObject.freeze(GameManager);\nObject.freeze(GameManager.prototype);","import { JsUtils } from \":defs/JsUtils\";\nimport { Game } from \":game/Game\";\nimport type { Coord, Tile } from \":floor/Tile\";\nimport type { GameMirror } from \":game/gameparts/GameMirror\";\n\nexport { JsUtils };\nexport type { Coord, Tile };\nexport { GameMirror } from \":game/gameparts/GameMirror\";\n\n// Implementations:\nimport type { Chaser } from \"./impl/Chaser\";\n\nimport { Player } from \"../Player\";\nexport { Player };\n\n\n/**\n * Unlike {@link ClientPlayer}s, these are not guided by human input.\n * Instead, they are essentially defined by how often they move, and\n * where they decide to move toward each time they move.\n *\n * Can be paused and un-paused by the Game Manager.\n */\nexport abstract class RobotPlayer extends Player {\n\n\t#nextMovementTimerMultiplier: number = undefined!;\n\n\t#scheduledMovementCallbackId: number = undefined!;\n\n\t/**\n\t * @see RobotPlayer.of for the public, non-abstract interface.\n\t */\n\tprotected constructor(game: GameMirror<any>, desc: Player.CtorArgs) {\n\t\tsuper(game, desc);\n\t}\n\n\t/**\n\t * Returns a {@link Pos} representing an absolute coordinate (ie.\n\t * one that is relative to the {@link Game}'s origin position')\n\t * that this `RobotPlayer` intends to move toward in its next\n\t * movement request. Pos may contain non-integer coordinate values,\n\t * and it does not have to be inside the bounds of the {@link Grid}.\n\t */\n\tprotected abstract computeDesiredDest(): Coord;\n\n\tprotected abstract getNextMoveType(): Player.MoveType;\n\n\t/** Units are in milliseconds. */\n\tprotected abstract computeNextMovementTimer(): number;\n\n\tpublic override onGamePlaying(): void {\n\t\tthis.#delayedMovementContinue();\n\t}\n\tpublic override onGamePaused(): void {\n\t\tthis.game.cancelTimeout(this.#scheduledMovementCallbackId);\n\t\tthis.#scheduledMovementCallbackId = undefined!;\n\t}\n\tpublic override onGameOver(): void {\n\t\tthis.game.cancelTimeout(this.#scheduledMovementCallbackId);\n\t\tthis.#scheduledMovementCallbackId = undefined!;\n\t}\n\n\t/**\n\t * Executes a single movement and then calls `delayedMovementContinue`.\n\t */\n\t#movementContinue(): void {\n\t\tconst desiredDest = this.computeDesiredDest();\n\t\t// This is a little different than how human players experience\n\t\t// \"penalties\" when moving to tiles with long language-sequences-\n\t\t// humans must pay the penalty before landing on the tile, but\n\t\t// in the implementation here, it's much easier to simulate such\n\t\t// a penalty if it applies _after_ landing on the tile.\n\t\tthis.#nextMovementTimerMultiplier = this.game.grid.tileAt(desiredDest).seq.length;\n\n\t\tthis.makeMovementRequest(\n\t\t\tthis.game.grid.getUntToward(desiredDest, this.coord),\n\t\t\tthis.getNextMoveType(),\n\t\t);\n\t\t// Schedule a task to do this again:\n\t\tthis.#delayedMovementContinue();\n\t}\n\n\t/** Schedules a call to `movementContinue`. */\n\t#delayedMovementContinue(): void {\n\t\t// Schedule the next movement.\n\t\tthis.#scheduledMovementCallbackId = this.game.setTimeout(\n\t\t\tthis.#movementContinue.bind(this),\n\t\t\tthis.computeNextMovementTimer() * this.#nextMovementTimerMultiplier,\n\t\t\t// * Callback function arguments go here.\n\t\t);\n\t}\n}\nexport namespace RobotPlayer {\n\n\texport interface FamilySpecificPart {\n\t\t[Player.Family.Chaser]: Partial<Chaser.Behaviour>;\n\t}\n\n\t/**\n\t * Provides slightly higher level abstractions for computing the\n\t * desired destination for the next movement.\n\t */\n\texport abstract class Decisive extends RobotPlayer {\n\n\t\t/**\n\t\t * Entries may return undefined to indicate that the condition\n\t\t * for using that behaviour was not met, and the next behaviour\n\t\t * should be tried.\n\t\t *\n\t\t * @requires\n\t\t * The last behaviour must never return `undefined`.\n\t\t */\n\t\tprotected abstract get _behaviours(): readonly Decisive.Behaviour[];\n\n\t\treadonly #cache = {\n\t\t\twhich:  0,\n\t\t\treuses: 0,\n\t\t\ttarget: undefined as number | undefined,\n\t\t};\n\n\t\tpublic override reset(coord: Coord): void {\n\t\t\tsuper.reset(coord);\n\t\t\tthis.#cache.which  = 0;\n\t\t\tthis.#cache.reuses = 0;\n\t\t\tthis.#cache.target = undefined;\n\t\t}\n\n\t\t/** @final */\n\t\tprotected computeDesiredDest(): Coord {\n\t\t\tconst c = this.#cache;\n\t\t\tif (c.target !== undefined && c.reuses <= Game.K._ROBOT_PRIORITY_MAX_REUSES) {\n\t\t\t\tconst next = this._behaviours[c.which]!.call(this, c.target);\n\t\t\t\tif (next !== undefined) {\n\t\t\t\t\tc.reuses++;\n\t\t\t\t\treturn next.dest; //⚡\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.reuses = 0;\n\t\t\tfor (let i = 0; i < this._behaviours.length; i++) {\n\t\t\t\tconst next = this._behaviours[i]!.call(this);\n\t\t\t\tif (next !== undefined) {\n\t\t\t\t\tc.which = i;\n\t\t\t\t\tc.target = next.target;\n\t\t\t\t\treturn next.dest;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new Error(\"never\");\n\t\t}\n\t}\n\texport namespace Decisive {\n\t\texport type Next = undefined | {\n\t\t\tdest: Coord;\n\t\t\t/**\n\t\t\t * This could be anything a behaviour wants. Ex. A player\n\t\t\t * ID, a coord, etc.\n\t\t\t *\n\t\t\t * It is assumed to be unchanged when successfully reusing\n\t\t\t * a behaviour.\n\t\t\t * */\n\t\t\ttarget?: number;\n\t\t};\n\t\texport type Behaviour = (target?: number) => Next;\n\t}\n\tObject.freeze(Decisive);\n\tObject.freeze(Decisive.prototype);\n}\n// RobotPlayer is frozen in PostInit after _Constructors get initialized.\nObject.seal(RobotPlayer);\nObject.freeze(RobotPlayer.prototype);","import {\n\tJsUtils, Coord, Tile,\n\tGameMirror, Player, RobotPlayer,\n} from \"../RobotPlayer\";\n\n/**\n * @final\n */\nexport class Chaser extends RobotPlayer.Decisive {\n\n\tprivate readonly pred: SealedArray<Player> = [];\n\tprivate readonly prey: Array<Player> = [];\n\n\tprivate readonly params: Readonly<Chaser.Behaviour>;\n\tdeclare protected readonly _behaviours: readonly RobotPlayer.Decisive.Behaviour[];\n\n\tprivate readonly grid: Chaser[\"game\"][\"grid\"];\n\n\tpublic constructor(game: GameMirror<any>, desc: Player._CtorArgs[\"Chaser\"]) {\n\t\tsuper(game, desc);\n\t\tthis.params = Object.freeze({\n\t\t\t...Chaser.Behaviour.DEFAULT,\n\t\t\t...desc.familyArgs,\n\t\t});\n\t\tthis.grid = this.game.grid;\n\t\tObject.seal(this); //🧊\n\t\tJsUtils.propNoWrite(this as Chaser,\n\t\t\t\"params\", \"grid\",\n\t\t);\n\t}\n\n\tpublic override _onTeamsBootstrapped(): void {\n\t\tsuper._onTeamsBootstrapped();\n\t\t// We need to cast off read-only-ness below.\n\t\t// @ts-expect-error : RO=\n\t\tthis.pred = this.game.teams\n\t\t\t.filter((team) => team.id !== this.teamId)\n\t\t\t.flatMap((team) => team.members)\n\t\t\t.seal();\n\n\t\t// @ts-expect-error : RO=\n\t\tthis.prey = [...this.pred].seal();\n\n\t\tJsUtils.propNoWrite(this as Chaser,\n\t\t\t\"pred\", \"prey\",\n\t\t);\n\t}\n\n\tprivate _bhvrEvadePred(cachedPred?: Player.Id): RobotPlayer.Decisive.Next {\n\t\tif (cachedPred !== undefined) { return {\n\t\t\tdest: this.grid.getUntAwayFrom(this.game.players[cachedPred]!.coord, this.coord),\n\t\t};}\n\t\t// Check if there is anyone to run away from:\n\t\tthis.pred.sort((pa,pb) => {\n\t\t\treturn this.grid.dist(pa.coord, this.coord)\n\t\t\t\t - this.grid.dist(pb.coord, this.coord);\n\t\t});\n\t\tfor (const pred of this.pred) {\n\t\t\tif (this.grid.dist(pred.coord, this.coord)\n\t\t\t\t> this.params.fearDistance) break;\n\t\t\tif (pred.isDowned) continue;\n\t\t\tif (pred.boosts > this.boosts) {\n\t\t\t\t// TODO.design Something that avoids getting cornered.\n\t\t\t\treturn {\n\t\t\t\t\tdest: this.grid.getUntAwayFrom(pred.coord, this.coord),\n\t\t\t\t\ttarget: pred.playerId,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\tprivate _bhvrChasePrey(cachedPrey?: Player.Id): RobotPlayer.Decisive.Next {\n\t\tif (cachedPrey !== undefined) { return {\n\t\t\tdest: this.game.players[cachedPrey]!.coord,\n\t\t};}\n\t\t// If there is nobody to run away from,\n\t\t// Check if there is anyone we want to attack:\n\t\tthis.prey.sort((pa,pb) => {\n\t\t\treturn this.grid.dist(this.coord, pa.coord)\n\t\t\t\t-  this.grid.dist(this.coord, pb.coord);\n\t\t});\n\t\tif (this.isDowned) { // TODO.design <-- what's this? I think I meant to check that the prey is not downed.\n\t\t\tfor (const prey of this.prey) {\n\t\t\t\tif (this.grid.dist(this.coord, prey.coord)\n\t\t\t\t\t> this.params.bloodThirstDistance) break;\n\t\t\t\tif (prey.boosts < this.boosts - this.params.healthReserve) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdest: prey.coord,\n\t\t\t\t\t\ttarget: prey.playerId,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\tprivate _bhvrGotoHealthElseWander(cachedHealthCoord?: Coord): RobotPlayer.Decisive.Next {\n\t\t/* if (cachedHealthCoord !== undefined && this.game.health.tiles.has(cachedHealthCoord)) {\n\t\t\treturn { dest: cachedHealthCoord };\n\t\t} */\n\t\t// If there is nobody we want to chase after to attack,\n\t\t// Head toward the nearest free health if it exists.\n\t\t//if (true) {\n\t\t\t// No tiles close by. Wander around:\n\t\t\tif (Math.random() < this.params.wanderingAimlessness) {\n\t\t\t\t// Big direction change:\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(this.coord, 3) };\n\t\t\t} else {\n\t\t\t\t// Continue wandering with a subtle, random direction:\n\t\t\t\tconst awayFn = this.grid.getUntAwayFrom.bind(this.grid, this.prevCoord);\n\t\t\t\treturn { dest: this.grid.getRandomCoordAround(\n\t\t\t\t\tawayFn(awayFn(this.coord)), 1,\n\t\t\t\t)};\n\t\t\t}\n\t\t//}\n\t\t/* let closestFht: Tile = undefined!;\n\t\tlet closestFhtDistance = Infinity;\n\t\tfor (const fht of this.game.health.tiles.values()) {\n\t\t\tconst distance = this.grid.dist(this.coord, fht.coord);\n\t\t\tif (distance < closestFhtDistance) {\n\t\t\t\tclosestFht = fht;\n\t\t\t\tclosestFhtDistance = distance;\n\t\t\t}\n\t\t}\n\t\treturn { dest: closestFht.coord, target: closestFht.coord }; */\n\t}\n\n\tprotected getNextMoveType(): Player.MoveType {\n\t\treturn Player.MoveType.NORMAL;\n\t}\n\n\tprotected computeNextMovementTimer(): number {\n\t\treturn 1000 / this.params.keyPressesPerSecond;\n\t}\n}\nexport namespace Chaser {\n\t/**\n\t */\n\texport type Behaviour = {\n\t\t/**\n\t\t * If the number of moves it would take for an opponent with\n\t\t * more health than this player to reach this player is less\n\t\t * than or equal to this value, then this player will try to\n\t\t * run away to safety.\n\t\t */\n\t\tfearDistance: number;\n\t\t/**\n\t\t * If the number of moves it would take for this player to reach\n\t\t * an opponent with less health is greater than this value,\n\t\t * this player will not even consider pursuing them in attack.\n\t\t */\n\t\tbloodThirstDistance: number;\n\t\t/**\n\t\t * The minimum amount of leftover health this player would try\n\t\t * to ensure having before going after an opponent. Negative\n\t\t * values are allowed, in which case, the player will go after\n\t\t * opponents even if they would end up being downed as a result.\n\t\t */\n\t\thealthReserve: number;\n\t\t/**\n\t\t * How often this player moves in units of moves-per-second.\n\t\t */\n\t\tkeyPressesPerSecond: number;\n\t\t/**\n\t\t * A value between zero and one. How often this player will\n\t\t * make a drastic random change in direction when wandering.\n\t\t */\n\t\twanderingAimlessness: number;\n\t};\n\texport namespace Behaviour {\n\t\texport const DEFAULT: Readonly<Behaviour> = Object.freeze({\n\t\t\tfearDistance: 5,\n\t\t\tbloodThirstDistance: 7,\n\t\t\thealthReserve: 3.0,\n\t\t\tkeyPressesPerSecond: 1.8,\n\t\t\twanderingAimlessness: 0.2,\n\t\t});\n\t}\n}\n// @ts-expect-error : RO=\nChaser.prototype._behaviours\n= Object.freeze([\n\tChaser.prototype[\"_bhvrEvadePred\"],\n\tChaser.prototype[\"_bhvrChasePrey\"],\n\tChaser.prototype[\"_bhvrGotoHealthElseWander\"],\n]);\nJsUtils.protoNoEnum(Chaser, \"_onTeamsBootstrapped\");\nObject.freeze(Chaser);\nObject.freeze(Chaser.prototype);","import type { GameMirror } from \":game/gameparts/GameMirror\";\nimport type { Player } from \"../Player\";\nimport type { RobotPlayer } from \"./RobotPlayer\";\nimport { Chaser } from \"./impl/Chaser\";\n\nconst Dict: {\n\treadonly [ F in Player.RobotFamily ]: {\n\t\tnew(\n\t\t\tgame: GameMirror,\n\t\t\tdesc: Player._CtorArgs[F]\n\t\t): RobotPlayer;\n\t};\n} = {\n\t[ \"Chaser\" ]: Chaser,\n};\n\n/** */\nexport function GetRobotImpl(\n\tgame: GameMirror,\n\tplayerDesc: Player._CtorArgs[Player.RobotFamily],\n): RobotPlayer {\n\tconst familyId = playerDesc.familyId as Player.RobotFamily;\n\tif (DEF.DevAssert) {\n\t\t// Enforced By: Caller adherence to contract.\n\t\tif (!Object.getOwnPropertyNames(Dict).includes(familyId)) {\n\t\t\tthrow new RangeError(familyId + \" is not a valid robot player family id.\");\n\t\t}\n\t}\n\treturn new (Dict[familyId])(game, playerDesc);\n}","import type WebSocket from \"ws\";\n\nimport { JsUtils } from \":defs/JsUtils\";\nimport { SOCKET_ID, GroupEv, GameEv } from \":defs/OnlineDefs\";\nimport type { Game } from \":game/Game\";\nimport type { Coord } from \":floor/Tile\";\nimport type { StateChange } from \":game/StateChange\";\nimport { Player } from \":game/player/Player\";\nimport { GetRobotImpl } from \":game/player/robot/ImplBarrel\";\nimport { GetGridImpl } from \":floor/ImplBarrel\";\n\nimport { GameManager } from \":game/gameparts/GameManager\";\n\n/** @this ServerGame */\nfunction gameOnSocketMessage<S extends Coord.System>(this: ServerGame<S>, ev: WebSocket.MessageEvent): void {\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\tconst socket = ev.target;\n\tswitch (evName) {\n\t\tcase GameEv.IN_GAME: this.requestStateChange(args[0], socket); break;\n\t\tcase GameEv.PAUSE:   this.statusBecomePaused(); break;\n\t\tcase GameEv.UNPAUSE: this.statusBecomePlaying(); break;\n\t\tcase GameEv.RETURN_TO_LOBBY:\n\t\t\tif (socket === this.groupHostSocket) {\n\t\t\t\tthis.statusBecomeOver();\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY]);\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket && s.readyState === s.OPEN) { s.send(data); }});\n\t\t\t\tthis._terminate();\n\t\t\t} else {\n\t\t\t\tconst data = JSON.stringify([GameEv.RETURN_TO_LOBBY, SOCKET_ID(socket)]);\n\t\t\t\tthis.sockets.forEach((s) => { if (s !== socket && s.readyState === s.OPEN) s.send(data); });\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: break;\n\t}\n}\n\n/**\n * Handles game-related events and attaches listeners to each client\n * socket.\n * @final\n */\nexport class ServerGame<S extends Coord.System = Coord.System> extends GameManager<S> {\n\n\treadonly #deleteExternalRefs: () => void;\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\n\n\tprotected readonly sockets: Set<WebSocket>;\n\tprotected readonly groupHostSocket: WebSocket;\n\n\tpublic override get currentClientPlayer(): never {\n\t\tthrow new Error(\"never\");\n\t}\n\n\t/** */\n\tpublic constructor(args: Readonly<{\n\t\tsockets: IterableIterator<WebSocket>,\n\t\tgroupHostSocket: WebSocket,\n\t\tdeleteExternalRefs: () => void,\n\t\tgameDesc: Game.CtorArgs.UnFin<S>,\n\t}>) {\n\t\tsuper({\n\t\t\timpl: {\n\t\t\t\tgridClassLookup: GetGridImpl,\n\t\t\t\tClientPlayer: undefined,\n\t\t\t\tRobotPlayer: GetRobotImpl,\n\t\t\t\tonGameBecomeOver: () => {},\n\t\t\t},\n\t\t\tdesc: (() => {\n\t\t\t\tPlayer.CtorArgs.finalize(args.gameDesc); // <- mutation\n\t\t\t\treturn args.gameDesc;\n\t\t\t})(),\n\t\t\tclientPlayerIds: [],\n\t\t});\n\t\tthis.sockets = new Set(args.sockets); // shallow copy\n\t\tthis.groupHostSocket = args.groupHostSocket;\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\n\t\tJsUtils.instNoEnum (this as ServerGame<S>, \"clientPlayers\");\n\t\tJsUtils.propNoWrite(this as ServerGame<S>, \"sockets\", \"groupHostSocket\");\n\t\tthis.#wsMessageCb = gameOnSocketMessage.bind(this as ServerGame<any>);\n\t\tObject.seal(this); //🧊\n\n\t\tthis.sockets.forEach((s) => {\n\t\t\ts.addEventListener(\"message\", this.#wsMessageCb);\n\t\t\ts.addEventListener(\"close\", () => {\n\t\t\t\tif (this.sockets.size === 1) {\n\t\t\t\t\tthis._terminate();\n\t\t\t\t}\n\t\t\t}, { once: true });\n\t\t});\n\t\tthis.#greetGameSockets(args.gameDesc);\n\t}\n\n\t/** Helper for the constructor */\n\t#greetGameSockets(gameDesc: Game.CtorArgs<S>): void {\n\t\t// The below cast is safe because GamepartBase reassigns\n\t\t// `gameDesc.playerDescs` the result of `Player.finalize`.\n\t\tconst humans = (\n\t\t\t(gameDesc.players).filter((player) => player.familyId === \"Human\") as Player._CtorArgs[\"Human\"][]\n\t\t).freeze();\n\t\t// Pass on Game constructor arguments to each client:\n\t\tPromise.all(Array.from(this.sockets, (s) =>\n\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t// TODO.impl timeouts to handle edge-cases of users leaving. Also in reset().\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.RESET) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, { once: true });\n\t\t\t})\n\t\t).freeze()).then(() =>\n\t\t\tthis.reset() //👂 \"reset time!\"\n\t\t);\n\t\tthis.sockets.forEach((s) => {\n\t\t\tconst clientPlayerIds = humans\n\t\t\t\t.filter((desc) => desc.socket === s)\n\t\t\t\t.map((desc) => desc.playerId).freeze();\n\t\t\tconst data = JSON.stringify([GroupEv.CREATE_GAME, gameDesc, clientPlayerIds]);\n\t\t\tif (s.readyState === s.OPEN) { s.send(data); } //📢 \"get ready for reset\"\n\t\t});\n\t}\n\n\tpublic override async reset(): Promise<Game.ResetSer> {\n\t\t// Be ready for clients to indicate readiness to unpause.\n\t\tPromise.all(Array.from(this.sockets, (s) =>\n\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\ts.addEventListener(\"message\", (ev) => {\n\t\t\t\t\tif (JSON.parse(ev.data)[0] === GameEv.UNPAUSE) { // <- clients send this upon receiving resetSer\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, { once: true });\n\t\t\t})\n\t\t).freeze()).then(() => {\n\t\t\tthis.statusBecomePlaying(); //👂 \"play time!\"\n\t\t});\n\n\t\tconst resetSer = await super.reset();\n\t\tconst data = JSON.stringify([GameEv.RESET, resetSer]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }}); //📢 \"get ready for playing!\"\n\t\treturn resetSer;\n\t}\n\n\tpublic override setCurrentClientPlayer(index: number): void {\n\t\t// no-op\n\t}\n\n\n\tpublic override setTimeout(callback: () => void, millis: number, ...args: any[]): number {\n\t\treturn setTimeout(callback, millis, args).unref() as unknown as number;\n\t}\n\n\tpublic override cancelTimeout(handle: number): void {\n\t\tclearTimeout(handle as unknown as NodeJS.Timer);\n\t}\n\n\tpublic override statusBecomePlaying(): void {\n\t\tsuper.statusBecomePlaying();\n\t\tconst data = JSON.stringify([GameEv.UNPAUSE]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\tpublic override statusBecomePaused(): void {\n\t\tsuper.statusBecomePaused();\n\t\tconst data = JSON.stringify([GameEv.PAUSE]);\n\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\tpublic override commitStateChange(desc: StateChange.Res, authorSock?: WebSocket): void {\n\t\tsuper.commitStateChange(desc, authorSock);\n\n\t\tif (desc.rejectId) {\n\t\t\t// The request was rejected- Notify the requester.\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\n\t\t\tauthorSock?.send(data);\n\t\t} else {\n\t\t\tconst data = JSON.stringify([GameEv.IN_GAME, desc]);\n\t\t\tthis.sockets.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t}\n\t}\n\n\tprotected _terminate(): void {\n\t\tthis.sockets.forEach((s) => {\n\t\t\ts.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t});\n\t\tthis.#deleteExternalRefs();\n\t}\n}\nJsUtils.protoNoEnum(ServerGame,\n\t\"setCurrentClientPlayer\", \"_terminate\",\n);\nObject.freeze(ServerGame);\nObject.freeze(ServerGame.prototype);","import type WebSocket from \"ws\";\nimport { JsUtils } from \":defs/JsUtils\";\nimport { SOCKET_ID, JoinerEv, GroupEv } from \":defs/OnlineDefs\";\n\nimport type { Game } from \":game/Game\";\nimport type { Coord } from \":floor/Tile\";\nimport type { Player } from \":game/player/Player\";\nimport { GameManager } from \":game/gameparts/GameManager\";\nimport { ServerGame } from \"./ServerGame\";\n\nimport { Group as _Group } from \":defs/OnlineDefs\";\n\n/**\n * Manages communication between the server, and clients who play in\n * the same game together.\n */\nexport class Group extends _Group {\n\n\tpublic readonly name: _Group.Name;\n\tpublic readonly passphrase: _Group.Passphrase;\n\n\t#currentGame: ServerGame<any> | undefined;\n\tpublic get isCurrentlyPlayingAGame(): boolean {\n\t\treturn this.#currentGame !== undefined;\n\t}\n\n\tdeclare private readonly wssBroadcast: (evName: string, ...data: any[]) => void;\n\tprivate readonly sockets = new Map<WebSocket, Player.UserInfo>();\n\tprivate groupHostSocket: WebSocket;\n\n\treadonly #initialTtlTimeout: NodeJS.Timeout;\n\treadonly #deleteExternalRefs: () => void;\n\treadonly #wsMessageCb: (ev: WebSocket.MessageEvent) => void;\n\treadonly #wsLeaveCb: (ev: WebSocket.CloseEvent) => void;\n\n\t/** */\n\tpublic constructor(args: Readonly<{\n\t\twssBroadcast: (evName: string, ...data: any[]) => void,\n\t\tname: _Group.Name,\n\t\tpassphrase: _Group.Passphrase,\n\t\tdeleteExternalRefs: () => void,\n\t}>) {\n\t\tsuper();\n\t\tObject.defineProperty(this, \"wssBroadcast\", { value: args.wssBroadcast });\n\t\tthis.name = args.name;\n\t\tthis.passphrase = args.passphrase;\n\t\tJsUtils.propNoWrite(this as Group, \"name\", \"passphrase\");\n\t\tthis.#currentGame = undefined;\n\n\t\tthis.#deleteExternalRefs = args.deleteExternalRefs;\n\t\tthis.#initialTtlTimeout = setTimeout(() => {\n\t\t\tif (this.sockets.size === 0) {\n\t\t\t\tthis.terminate();\n\t\t\t}\n\t\t}, (Group.DEFAULT_TTL * 1000)).unref();\n\n\t\tthis.#wsMessageCb = (ev: WebSocket.MessageEvent): void => {\n\t\t\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\t\t\tswitch (evName) {\n\t\t\t\tcase GroupEv.UserInfo.NAME: this.#wsOnUserInfoChange(ev.target, args[0]); break;\n\t\t\t\tcase GroupEv.CREATE_GAME: if (ev.target === this.groupHostSocket) this.#wsOnHostCreateGame(args[0]); break;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t};\n\t\tthis.#wsLeaveCb = (ev: WebSocket.CloseEvent): void => {\n\t\t\tif (ev.target === this.groupHostSocket || this.sockets.size === 1) {\n\t\t\t\t// If the host disconnects, end the session.\n\t\t\t\tthis.terminate(); // TODO.design\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.sockets.delete(ev.target);\n\t\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\n\t\t\t\t[SOCKET_ID(ev.target)]: null,\n\t\t\t}]);\n\t\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t};\n\t}\n\n\t/** Let someone into this group */\n\tpublic admitSocket(ws: WebSocket, userInfo: Player.UserInfo): void {\n\t\tif (this.sockets.has(ws)) {\n\t\t\treturn; //⚡\n\t\t}\n\t\tconsole.info(`socket connect (group):  ${SOCKET_ID(ws)}`);\n\t\tif (this.#currentGame) {\n\t\t\t// no-op\n\t\t}\n\t\t{\n\t\t\ttype Res = GroupEv.UserInfo.Res;\n\t\t\tconst EVENT_NAME = GroupEv.UserInfo.NAME;\n\t\t\t{\n\t\t\t\t// Notify all other clients in this group of the new player:\n\t\t\t\t// NOTE: broadcast modifier not used since socket is not yet in this.sockets.\n\t\t\t\tconst data = JSON.stringify([EVENT_NAME, <Res>{[SOCKET_ID(ws)]: userInfo}]);\n\t\t\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t\t\t}\n\t\t\t// Notify the new player of all other players:\n\t\t\tconst res: Res = {};\n\t\t\tthis.sockets.forEach((u,s) => {\n\t\t\t\tres[SOCKET_ID(s)] = u;\n\t\t\t});\n\t\t\tws.send(JSON.stringify([EVENT_NAME, res]));\n\t\t}\n\n\t\t/** The first socket becomes the session host. */\n\t\tif (this.sockets.size === 0) {\n\t\t\tclearTimeout(this.#initialTtlTimeout);\n\t\t\t// @ts-expect-error : RO=\n\t\t\tthis.#initialTtlTimeout = undefined!;\n\t\t\tthis.groupHostSocket = ws;\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_LOBBY,\n\t\t\t});\n\t\t}\n\t\tws.addEventListener(\"close\", this.#wsLeaveCb);\n\t\tws.addEventListener(\"message\", this.#wsMessageCb);\n\t\tthis.sockets.set(ws, userInfo);\n\t}\n\n\t/** Kick someone from this group. */\n\tpublic kickSocket(ws: WebSocket): boolean {\n\t\tif (this.sockets.delete(ws)) {\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** */\n\t#wsOnUserInfoChange(ws: WebSocket, req: GroupEv.UserInfo.Req): void {\n\t\tif (typeof req.username !== \"string\"\n\t\t || typeof req.teamId   !== \"number\"\n\t\t || typeof req.avatar   !== \"string\") {\n\t\t\t// User arguments did not match expected format.\n\t\t\tconsole.info(`bad format: username: \\`${req.username}\\``\n\t\t\t+ `, teamId: \\`${req.teamId}\\`, avatar: \\`${req.avatar}\\`.`);\n\t\t\treturn;\n\t\t}\n\t\tthis.sockets.set(ws, req);\n\t\tconst data = JSON.stringify([GroupEv.UserInfo.NAME, <GroupEv.UserInfo.Res>{\n\t\t\t[SOCKET_ID(ws)]: req,\n\t\t}]);\n\t\tthis.sockets.forEach((u,s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n\t}\n\n\t/** */\n\t#wsOnHostCreateGame<S extends Coord.System>(\n\t\tctorArgs: Game.CtorArgs.UnFin<S>\n\t): void {\n\t\tconst failureReasons = this._createGameInstance(ctorArgs);\n\t\tif (failureReasons.length) {\n\t\t\t// TODO.impl handle failure reasons.\n\t\t\tconsole.info(failureReasons);\n\t\t} else {\n\t\t\t// Broadcast to the joiner namespace of this group's change in state:\n\t\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t\t[this.name]: JoinerEv.Exist.Status.IN_GAME,\n\t\t\t});\n\t\t\tconsole.info(`group ${this.name} new game`);\n\t\t}\n\t}\n\t/**\n\t * @param ctorArgs\n\t * The `playerDescs` field only contains descriptors for artificial\n\t * players. Those for operated players are included by this method.\n\t *\n\t * @returns\n\t * An array of any failure reasons. Empty if none.\n\t */\n\tprivate _createGameInstance<S extends Coord.System>(\n\t\tctorArgs: Game.CtorArgs.UnFin<S>,\n\t): readonly string[] {\n\t\tconst failureReasons = [];\n\t\tif (this.isCurrentlyPlayingAGame) {\n\t\t\tfailureReasons.push(\"a game is already in session for this group\");\n\t\t\treturn failureReasons;\n\t\t}\n\t\tfailureReasons.push(...GameManager.CHECK_VALID_CTOR_ARGS(ctorArgs));\n\t\tif (failureReasons.length) {\n\t\t\treturn failureReasons;\n\t\t}\n\t\t// Everything needed to create a game exists. Let's do it!\n\t\t// @ts-expect-error : RO=\n\t\tctorArgs.players = [\n\t\t\t...ctorArgs.players,\n\t\t\t...Array.from(this.sockets.keys(), (ws) => {\n\t\t\t\tconst userInfo = this.sockets.get(ws)!;\n\t\t\t\treturn Object.freeze(<Player._CtorArgs[\"Human\"]>{\n\t\t\t\t\tsocket:   ws,\n\t\t\t\t\tfamilyId: \"Human\",\n\t\t\t\t\tusername: userInfo.username,\n\t\t\t\t\tteamId:   userInfo.teamId,\n\t\t\t\t\tavatar:   userInfo.avatar,\n\t\t\t\t});\n\t\t\t}),\n\t\t].freeze();\n\t\tthis.#currentGame = new ServerGame({\n\t\t\tsockets: this.sockets.keys(),\n\t\t\tgroupHostSocket: this.groupHostSocket,\n\t\t\tdeleteExternalRefs: () => { this.#currentGame = undefined; },\n\t\t\tgameDesc: ctorArgs,\n\t\t});\n\t\treturn [];\n\t}\n\n\t/**\n\t * - Deletes its own reference to its game (if it exists).\n\t * - Disconnects each client.\n\t * - Removes all listeners from this namespace.\n\t * - Deletes the enclosed Socket.IO namespace from the Server.\n\t * - Deletes the only external reference so this can be garbage collected.\n\t */\n\tprotected terminate(): void {\n\t\tfor (const ws of this.sockets.keys()) {\n\t\t\tws.removeEventListener(\"close\", this.#wsLeaveCb);\n\t\t\tws.removeEventListener(\"message\", this.#wsMessageCb);\n\t\t}\n\t\tif (this.#currentGame !== undefined) {\n\t\t\t// TODO.design need to terminate game?\n\t\t\tthis.#currentGame = undefined;\n\t\t}\n\t\tthis.#deleteExternalRefs();\n\n\t\tthis.wssBroadcast(JoinerEv.Exist.NAME, {\n\t\t\t[this.name]: JoinerEv.Exist.Status.DELETE,\n\t\t});\n\t\tconsole.info(`terminated group: \\`${this.name}\\``);\n\t}\n}\nObject.freeze(Group);\nObject.freeze(Group.prototype);","import type WebSocket from \"ws\";\nimport { GroupEv, JoinerEv } from \":defs/OnlineDefs\";\nimport { Group } from \"./Group\";\nimport { wss } from \"./index\";\n\n/** */\nexport const groups = new Map<string, Group>();\nfunction eraseGroup(groupName: string): void { groups.delete(groupName); }\n\n/** */\nfunction _isReqValid(desc: JoinerEv.Create.Req): boolean {\n\treturn (desc.groupName !== undefined)\n\t&& desc.groupName.length <= Group.Name.MaxLength\n\t&& Group.Name.REGEXP.test(desc.groupName)\n\t&& desc.passphrase.length <= Group.Passphrase.MaxLength\n\t&& Group.Passphrase.REGEXP.test(desc.passphrase);\n}\n/** */\nfunction wssBroadcast(evName: string, _data: any): void {\n\tconst data = JSON.stringify([evName, _data]);\n\twss.clients.forEach((s) => { if (s.readyState === s.OPEN) { s.send(data); }});\n}\n/** */\nexport function wsMessageCb(ev: WebSocket.MessageEvent): void {\n\tconst [evName, ...args] = JSON.parse(ev.data as string) as [string, ...any[]];\n\tswitch (evName) {\n\t/** */\n\tcase JoinerEv.Create.NAME: {\n\t\tfunction _res(val: JoinerEv.Create.Res): void {\n\t\t\tev.target.send(JSON.stringify([JoinerEv.Create.NAME, val]));\n\t\t}\n\t\tconst desc = args[0] as JoinerEv.Create.Req;\n\t\tif (!_isReqValid(desc) || groups.has(desc.groupName)) {\n\t\t\t_res(false); return; //⚡\n\t\t}\n\t\tgroups.set(\n\t\t\tdesc.groupName,\n\t\t\tnew Group(Object.freeze({\n\t\t\t\twssBroadcast: wssBroadcast,\n\t\t\t\tname: desc.groupName,\n\t\t\t\tpassphrase: desc.passphrase,\n\t\t\t\tdeleteExternalRefs: eraseGroup.bind(null, desc.groupName),\n\t\t\t})),\n\t\t);\n\t\t// Note that existence of the new group is broadcasted only\n\t\t// once the creator of thr group has joined it.\n\t\t_res(true); break;\n\t}\n\t/** */\n\tcase JoinerEv.TryJoin.NAME: {\n\t\tfunction _res(val: JoinerEv.TryJoin.Res): void {\n\t\t\tev.target.send(JSON.stringify([JoinerEv.TryJoin.NAME, val]));\n\t\t}\n\t\tconst req = args[0] as JoinerEv.TryJoin.Req;\n\t\tconst group = groups.get(req.groupName);\n\t\tif (\n\t\t\tgroup === undefined\n\t\t\t|| req.passphrase !== group.passphrase\n\t\t) {\n\t\t\t_res(false); return; //⚡\n\t\t}\n\t\tconst userInfo = req.userInfo;\n\t\tif (userInfo === undefined || userInfo.teamId !== 0) {\n\t\t\tthrow new Error(`a socket attempted to connect to group`\n\t\t\t+` \\`${group.name}\\` without providing userInfo.`);\n\t\t}\n\t\t// NOTE: I could make a WeakMap from sockets to their groups,\n\t\t// but that would be another global state to manage. Checking\n\t\t// every group is kind of stupid, but it's simple and it works.\n\t\tfor (const group of groups.values()) {\n\t\t\tif (group.kickSocket(ev.target)) break;\n\t\t}\n\t\tgroup.admitSocket(ev.target, userInfo);\n\t\t_res(true); break;\n\t}\n\t/** */\n\tdefault: break;\n\t}\n}","import \"my-type-utils/ModNodePlatform\";\n\n// =========================================\nimport os from \"os\";\nimport path from \"path\";\nimport http from \"http\";\nimport Koa from \"koa\";\nimport koaStatic from \"koa-static\";\nimport WebSocket from \"ws\";\nimport type net from \"net\";\nimport { SET_SOCKET_ID, SOCKET_ID, JoinerEv } from \":defs/OnlineDefs\";\n\n/** EXPRESS ROOT */\n// At runtime, __dirname resolves to \":/dist/server/\"\nconst CLIENT_ROOT = path.resolve(__dirname, \"../client\");\n\n\nconst app = new Koa()\n.use(koaStatic(CLIENT_ROOT, {\n\tbrotli: DEF.PRODUCTION, //🚩 This must match the value in the webpack config.\n\tformat: false,\n\tsetHeaders: (res, path, stats) => {\n\t\tres.removeHeader(\"x-powered-by\");\n\t\tres.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n\t},\n\t// TODO.build enable this when lang term caching is configured for webpack.\n\tmaxAge: 0,\n\timmutable: false, // DEF.PRODUCTION\n}));\n\n\nconst server = http.createServer({}, app.callback());\n\n\nexport const wss = new WebSocket.Server({\n\tserver: server,\n});\nimport { groups, wsMessageCb } from \"./joinerCb\";\nwss.on(\"connection\", function onWsConnect(ws, req): void {\n\t//req.socket.remoteAddress // <- how to get the client's IP address.\n\t// Upon connection, immediately send a list of existing groups:\n\tconst data = JSON.stringify([\n\t\tJoinerEv.Exist.NAME,\n\t\t(() => {\n\t\t\t// TODO.design current implementation may suffer when there are many many groups.\n\t\t\tconst build: TU.NoRo<JoinerEv.Exist.Sse> = {};\n\t\t\tfor (const [groupName, group] of groups) {\n\t\t\t\tbuild[groupName] = (group.isCurrentlyPlayingAGame)\n\t\t\t\t? JoinerEv.Exist.Status.IN_GAME\n\t\t\t\t: JoinerEv.Exist.Status.IN_LOBBY;\n\t\t\t}\n\t\t\treturn build;\n\t\t})(),\n\t]);\n\tSET_SOCKET_ID(ws, `${Date.now().toString()}_${(Math.random() * 100) % 100}`);\n\tconsole.info(`socket connect (server): ${SOCKET_ID(ws)}`);\n\tws.send(data);\n\tws.addEventListener(\"message\", wsMessageCb);\n});\n\n\n/** HTTP LISTEN */\nserver.listen(<net.ListenOptions>{\n\tport: DEF.PRODUCTION ? 443 : 8080, // TODO.impl there must be a smarter way to do this.\n\thost: \"0.0.0.0\",\n}, function onServerListening(): void {\n\tconst info = <net.AddressInfo>server.address();\n\tconsole.info(\n\t\t`\\n\\nServer mounted to: \\`${info.address}:${info.port}\\` using ${info.family}.\\n`\n\t\t+\"This host can be reached at any of the following addresses:\\n\"\n\t);\n\tchooseIPAddress().sort().forEach((address) => {\n\t\tconsole.info(/* ${SkServer.PROTOCOL} */`${address}:${info.port}`);\n\t\t// ^We can exclude the protocol since it will get defaulted by the client side.\n\t});\n\tconsole.info(\"\");\n});\n\n\n/**\n * @returns An array of non-internal IP addresses from any of the\n * local host's network interfaces.\n *\n * https://en.wikipedia.org/wiki/Private_network\n */\n// TODO: change to return a map from each of \"public\" and \"private\" to a list of addresses\nexport const chooseIPAddress = (): Array<string> => {\n\treturn (Object.values(os.networkInterfaces()).flat() as os.NetworkInterfaceInfo[])\n\t.filter((info) => {\n\t\treturn !(info.internal); /* && info.family === \"IPv4\" */\n\t})\n\t.map((info) => {\n\t\tif (info.family === \"IPv6\") {\n\t\t\treturn `[${info.address}]`;\n\t\t} else {\n\t\t\treturn info.address;\n\t\t}\n\t});\n};"],"names":["leafPrototypes","getProto","installedChunks","NO_ENUM","Object","freeze","enumerable","NO_WRITE","writable","_onclickNoButtonRepeat","ev","repeat","preventDefault","JsUtils","obj","key","getOwnPropertyNames","val","_deepFreeze","descriptor","inst","propNames","propName","defineProperty","Web","deepFreeze","hasProp","prototype","hasOwnProperty","call","protoNoEnum","ctor","forEach","instNoEnum","_configProp","bind","propNoWrite","camelCaseTransforms","camelCaseName","spaceyLowercase","replace","letter","toLowerCase","spaceyUppercase","toUpperCase","spaceyCapitalized","split","map","word","charAt","substring","join","prependComment","node","commentStr","parentNode","insertBefore","document","createComment","adoptStyleSheet","root","href","appendChild","html","rel","_makeSmartStorage","localPrefix","storage","example","smart","keys","storageKey","defaultValue","get","getItem","JSON","parse","set","setItem","stringify","tagName","classNames","domProps","el","createElement","seal","e","length","classList","add","type","addEventListener","capture","draggable","assign","svg","createElementNS","behavior","block","inline","Id","Username","Avatar","Family","Human","Chaser","NULL","REGEXP","MAX_LENGTH","Values","emoji","GET_RANDOM","Math","random","Player","Seq","WeightExaggeration","RegExp","MAX","CHAR_HIT_COUNT_SEED_CEILING","Lang","REMAP","IDENT","input","LOWER","LangDescs","id","module","export","isolatedMinOpts","avgWeight","remapFunc","fontZoom","displayName","blurb","entries","desc","CSP_CACHE","Map","constructor","weightExaggeration","super","this","GetDesc","csps","has","buildDict","getPrototypeOf","BUILD","cspCache","CreateCspsArray","scaleWeight","GetWeightScalingFn","Float32Array","from","csp","unscaledWt","Float64Array","Uint16Array","reset","i","RESET_NUM_HITS","sorter","cspsIndex","push","_hits","Infinity","sort","a","b","sortI","getNonConflictingChar","avoid","filter","seq","next","prev","some","avoidSeq","EitherPrefixesOther","newPrev","Error","_assertInvariants","visited","hits","_i","flag","_calcIsolatedMinOpts","allSeqs","n","leafSeqs","reverse","leaf","startsWith","rootSeqs","rootLeaves","values","slice","reduce","sum","langId","nsps","weightScaling","avgUnscaledWeight","UNIFORM","IDENTITY","originalWeight","pow","forwardDict","char","weight","BuildUtils","Import","ogWeight","seq2Weight","accumulator","WORD_FOR_WORD","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","code","ids","t","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","m","getter","__esModule","d","value","mode","ns","create","r","def","current","indexOf","definition","f","chunkId","all","promises","u","prop","Symbol","toStringTag","require","chunk","moreModules","modules","chunkIds","runtime","installChunk","defineProperties","Array","globalThis","configurable","process","on","err","ROOT","__dirname","console","error","stack","frame","fn","max","stderr","fd","exit","SOCKET_ID","socket","_socketIds","WeakMap","JoinerEv","GroupEv","Name","Passphrase","MaxLength","GameServerReconnectionAttempts","DEFAULT_TTL","Group","Create","Exist","TryJoin","NAME","Status","UserInfo","CREATE_GAME","Game","GameEv","K","PORTION_OF_MOVES_THAT_ARE_BOOST","MAX_PLAYER_CROWDEDNESS","_REQUEST_BUFFER_LENGTH","_ROBOT_PRIORITY_MAX_REUSES","RequestBuffer","size","lastRejectId","coord","predictedCoord","isFull","signRequest","moveDest","getNextRejectId","reject","rejectId","realCoord","acceptOldest","Team","members","elimOrder","ElimOrder","STANDING","game","prevCoord","playerId","familyId","teamId","username","avatar","reqBuffer","team","teams","boosts","isDowned","isTeamedWith","other","includes","_onTeamsBootstrapped","grid","moveEntity","onGamePlaying","onGamePaused","onGameOver","makeMovementRequest","dest","requestStateChange","author","moveType","_setCoord","newHealth","oldIsDowned","every","player","numNonStandingTeams","statusBecomeOver","CtorArgs","MoveType","NORMAL","BOOST","finalize","gameDesc","teamIdCleaner","Set","players","p","originalId","squashedId","index","ScoreInfo","playerIds","Entry","entry","moveCounts","static","Grid","dimensions","area","getArea","tile","write","renderChangeOperatedPlayer","prevPlayerCoord","getAllAltDestsThan","origin","dests","tileSourcesTo","flatMap","srcToOrigin","tileDestsFrom","getRandomCoord","teamSizes","avoidSet","numMembers","teamSpawnCoords","WrappedEuclid2","Beehive","IAC","x","y","width","toCoord","dim","i1","i2","dx","abs","dy","height","distX","distY","to","_i1","_i2","sub","iSub","mul","scalar","mod","Uint8Array","_grid","iacCache","fill","changes","entityId","consumer","forEachShuffled","indices","getUntToward","intendedDest","sourceCoord","options","isOccupied","tileIac","destIac","iac","infNorm","oneNorm","ta","tb","best","splice","axialAlignment","shift","getUntAwayFrom","_avoidCoord","_sourceCoord","originCoord","getRandomCoordAround","_origin","radius","dist","source","tileAt","wrapX","wrapY","W","H","l","_t","b1","sliceLength","begin","sqrt","_assertSomeInvariants","bad","arr","ambiguityThreshold","sizeLimits","min","_render","dash","bash","round","floorDash","floor","floorBash","row","shorterSide","fslash","bslash","longerSide","RangeError","Dict","GetGridImpl","coordSys","args","impl","clientPlayerIds","langDesc","gridClass","gridClassLookup","system","gridDimensions","langCharFontScaling","onGameBecomeOver","clientPlayers","client","teammateArray","setCurrentClientPlayer","PAUSED","deserializeResetState","ser","playerCoords","currentClientPlayer","status","statusBecomePlaying","PLAYING","info","statusBecomePaused","OVER","commitTileMods","sources","src","seqBufferAcceptKey","commitStateChange","authorSock","tiles","parseInt","pid","setTimeout","callback","millis","cancelTimeout","handle","clearTimeout","implArgs","pDesc","ClientPlayer","RobotPlayer","GameMirror","lang","scoreInfo","LangConstructor","langWeightExaggeration","resetSer","dryRunShuffleLangCspAt","spawnPoints","getSpawnCoords","teamIndex","member","memberIndex","moveIsBoost","authorNewBoosts","GameManager","CHECK_VALID_CTOR_ARGS","requiredFields","missingFields","fieldName","field","parseFloat","dimension","limits","numPlayers","desiredDest","computeDesiredDest","getNextMoveType","computeNextMovementTimer","which","reuses","target","c","_behaviours","Decisive","pred","prey","params","Behaviour","DEFAULT","familyArgs","_bhvrEvadePred","cachedPred","pa","pb","fearDistance","_bhvrChasePrey","cachedPrey","bloodThirstDistance","healthReserve","_bhvrGotoHealthElseWander","cachedHealthCoord","wanderingAimlessness","awayFn","keyPressesPerSecond","GetRobotImpl","playerDesc","gameOnSocketMessage","evName","data","IN_GAME","PAUSE","UNPAUSE","RETURN_TO_LOBBY","groupHostSocket","sockets","s","readyState","OPEN","send","_terminate","ServerGame","deleteExternalRefs","once","RESET","unref","removeEventListener","humans","wssBroadcast","name","passphrase","terminate","delete","isCurrentlyPlayingAGame","admitSocket","ws","userInfo","EVENT_NAME","res","IN_LOBBY","kickSocket","_createGameInstance","ctorArgs","failureReasons","DELETE","groups","eraseGroup","groupName","_data","wss","wsMessageCb","_res","_isReqValid","group","CLIENT_ROOT","app","use","brotli","format","setHeaders","stats","removeHeader","setHeader","maxAge","immutable","server","build","Date","now","toString","listen","port","host","address","family","chooseIPAddress","flat","internal"],"sourceRoot":""}
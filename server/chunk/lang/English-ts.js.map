{"version":3,"sources":[".././src/base/lang/impl/English.ts?"],"names":["English","weightScaling","super","LETTER_FREQUENCY","Lowercase","Object","freeze","prototype","initializer","addMappings","charSeqTransform","entries","reduce","accumulator","_char","weight","char","seq","cs","toLowerCase","toUpperCase","OldCellphone","Morse","MixedCase","index","NUMPAD","Encode","flatMap","val","idx","button","numpadKey","toString","str","length","push","JSON","parse","LETTER_FREQUENCY_EXT","assign","freq","\"","i","sum","key","dict","plain","cipher","Dict","replace","Decode"],"mappings":"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","file":"chunk/lang/English-ts.js","sourcesContent":["import { Lang } from \"../Lang\";\r\n\r\n/**\r\n */\r\nexport namespace English {\r\n\r\n\t/**\r\n\t * Lowercase (QWERTY)\r\n\t *\r\n\t * https://wikipedia.org/wiki/Keyboard_layout#QWERTY\r\n\t */\r\n\texport class Lowercase extends Lang {\r\n\t\t// TODO.learn see https://wikipedia.org/wiki/Keyboard_layout#Dvorak\r\n\t\t// and https://wikipedia.org/wiki/Keyboard_layout#Colemak\r\n\t\tpublic constructor(weightScaling: number) {\r\n\t\t\tsuper(\"engl-low\", weightScaling);\r\n\t\t}\r\n\t\tpublic static BUILD(): Lang.WeightedForwardMap {\r\n\t\t\treturn Lang.BuildUtils.WORD_FOR_WORD(LETTER_FREQUENCY);\r\n\t\t}\r\n\t}\r\n\tLowercase as Lang.ClassIf;\r\n\tObject.freeze(Lowercase);\r\n\tObject.freeze(Lowercase.prototype);\r\n\r\n\r\n\t/**\r\n\t * Mixed-Case (QWERTY)\r\n\t *\r\n\t * https://wikipedia.org/wiki/Keyboard_layout#QWERTY\r\n\t */\r\n\texport class MixedCase extends Lang {\r\n\t\tpublic constructor(weightScaling: number) {\r\n\t\t\tsuper(\"engl-mix\", weightScaling);\r\n\t\t}\r\n\t\tpublic static BUILD(): Lang.WeightedForwardMap {\r\n\t\t\tlet initializer: Lang.WeightedForwardMap = {};\r\n\t\t\tconst addMappings = (charSeqTransform: (cs: string) => string): void => {\r\n\t\t\t\tinitializer = Object.entries(LETTER_FREQUENCY).freeze().reduce(\r\n\t\t\t\t\t(accumulator, [_char,weight]) => {\r\n\t\t\t\t\t\tconst char: Lang.Char = charSeqTransform(_char);\r\n\t\t\t\t\t\taccumulator[char] = { seq: char, weight };\r\n\t\t\t\t\t\treturn accumulator;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinitializer,\r\n\t\t\t\t);\r\n\t\t\t};\r\n\t\t\taddMappings((cs) => cs.toLowerCase());\r\n\t\t\taddMappings((cs) => cs.toUpperCase());\r\n\t\t\treturn initializer;\r\n\t\t}\r\n\t}\r\n\tMixedCase as Lang.ClassIf;\r\n\tObject.freeze(MixedCase);\r\n\tObject.freeze(MixedCase.prototype);\r\n\r\n\r\n\texport namespace OldCellphone {\r\n\t\t/**\r\n\t\t * You see letters and type as if on an old cellphone's numeric keypad.\r\n\t\t */\r\n\t\texport class Encode extends Lang {\r\n\t\t\tpublic constructor(weightScaling: number) {\r\n\t\t\t\tsuper(\"engl-cell-enc\", weightScaling);\r\n\t\t\t}\r\n\t\t\tpublic static BUILD(): Lang.WeightedForwardMap {\r\n\t\t\t\treturn Object.entries(LETTER_FREQUENCY).freeze().reduce<Lang.WeightedForwardMap>(\r\n\t\t\t\t\t(accumulator, [char,weight], index) => {\r\n\t\t\t\t\t\taccumulator[char] = { seq: NUMPAD[index]!, weight };\r\n\t\t\t\t\t\treturn accumulator;\r\n\t\t\t\t\t}, {},\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tEncode as Lang.ClassIf;\r\n\t\tObject.freeze(Encode);\r\n\t\tObject.freeze(Encode.prototype);\r\n\r\n\t\tconst NUMPAD = [3,3,3,3,3,4,3,4]\r\n\t\t\t.flatMap((val, idx) => {\r\n\t\t\t\tconst button = [];\r\n\t\t\t\tconst numpadKey = (1+idx).toString();\r\n\t\t\t\tfor (let str = numpadKey; str.length <= val; str += numpadKey) {\r\n\t\t\t\t\tbutton.push(str);\r\n\t\t\t\t}\r\n\t\t\t\treturn button;\r\n\t\t\t})\r\n\t\t\t.freeze();\r\n\t}\r\n\tObject.freeze(OldCellphone);\r\n\r\n\r\n\t/**\r\n\t * Values obtained from https://wikipedia.org/wiki/Letter_frequency\r\n\t */\r\n\texport const LETTER_FREQUENCY = Object.freeze(<Record<string,number>>JSON.parse(`{\r\n\t\t\"a\": 8.167, \"b\": 1.492, \"c\": 2.202, \"d\": 4.253,\r\n\t\t\"e\":12.702, \"f\": 2.228, \"g\": 2.015, \"h\": 6.094,\r\n\t\t\"i\": 6.966, \"j\": 0.153, \"k\": 1.292, \"l\": 4.025,\r\n\t\t\"m\": 2.406, \"n\": 6.749, \"o\": 7.507, \"p\": 1.929,\r\n\t\t\"q\": 0.095, \"r\": 5.987, \"s\": 6.327, \"t\": 9.356,\r\n\t\t\"u\": 2.758, \"v\": 0.978, \"w\": 2.560, \"x\": 0.150,\r\n\t\t\"y\": 1.994, \"z\": 0.077\r\n\t}`));\r\n\texport const LETTER_FREQUENCY_EXT = Object.freeze(Object.assign(\r\n\t\t(() => {\r\n\t\t\tconst freq: Record<string, number> = {\r\n\t\t\t\t\".\": 65.3, \",\": 61.3, \"\\\"\": 26.7, \"'\": 24.3, \"-\": 15.3,\r\n\t\t\t\t\"?\": 5.6, \":\": 3.4, \"!\": 3.3, \";\": 3.2,\r\n\t\t\t};\r\n\t\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\t\tfreq[i.toString()] = 10; // TODO.learn what's a good value to use here?\r\n\t\t\t}\r\n\t\t\tlet sum = 0;\r\n\t\t\tfor (const key in freq) {\r\n\t\t\t\tsum += freq[key]!;\r\n\t\t\t}\r\n\t\t\tfor (const key in freq) {\r\n\t\t\t\tfreq[key as keyof typeof freq] *= 8 / sum;\r\n\t\t\t\t// ^ above constant: 8 is between the 3rd and 4th top\r\n\t\t\t\t// frequencies of alphabet letters in LETTER_FREQUENCY.\r\n\t\t\t}\r\n\t\t\treturn freq;\r\n\t\t})(),\r\n\t\tLETTER_FREQUENCY,\r\n\t));\r\n\r\n\t/**\r\n\t */\r\n\texport namespace Morse {\r\n\t\t/**\r\n\t\t * You see letters and numbers and you type sequences of dots and dashes.\r\n\t\t */\r\n\t\texport class Encode extends Lang {\r\n\t\t\tpublic constructor(weightScaling: number) {\r\n\t\t\t\tsuper(\"mors-enc\", weightScaling);\r\n\t\t\t}\r\n\t\t\tpublic static BUILD(): Lang.WeightedForwardMap {\r\n\t\t\t\tconst dict: Lang.WeightedForwardMap = {};\r\n\t\t\t\tfor (const [plain,cipher] of Object.entries(Dict).freeze()) {\r\n\t\t\t\t\tdict[plain] = { seq: cipher, weight: English.LETTER_FREQUENCY_EXT[plain]! };\r\n\t\t\t\t}\r\n\t\t\t\treturn dict;\r\n\t\t\t}\r\n\t\t}\r\n\t\tEncode as Lang.ClassIf;\r\n\t\tObject.freeze(Encode);\r\n\t\tObject.freeze(Encode.prototype);\r\n\r\n\r\n\t\t/**\r\n\t\t * You see dots and dashes and you type alphanumeric characters.\r\n\t\t */\r\n\t\texport class Decode extends Lang {\r\n\t\t\tpublic constructor(weightScaling: number) {\r\n\t\t\t\tsuper(\"mors-dec\", weightScaling);\r\n\t\t\t}\r\n\t\t\tpublic static BUILD(): Lang.WeightedForwardMap {\r\n\t\t\t\tconst dict: Lang.WeightedForwardMap = {};\r\n\t\t\t\tfor (const [plain,cipher] of Object.entries(Dict).freeze()) {\r\n\t\t\t\t\tconst morse = cipher.replace(/\\./g,\"•\").replace(/\\-/g,\"−\");\r\n\t\t\t\t\tdict[morse] = { seq: plain, weight: English.LETTER_FREQUENCY_EXT[plain]! };\r\n\t\t\t\t}\r\n\t\t\t\treturn dict;\r\n\t\t\t}\r\n\t\t}\r\n\t\tDecode as Lang.ClassIf;\r\n\t\tObject.freeze(Decode);\r\n\t\tObject.freeze(Decode.prototype);\r\n\r\n\t\t// Also see https://en.wikipedia.org/wiki/Prosigns_for_Morse_code\r\n\t\texport const Dict = Object.freeze(<Record<string,string>>JSON.parse(`{\r\n\t\t\t\"0\": \"-----\", \"5\": \".....\",\r\n\t\t\t\"1\": \".----\", \"6\": \"-....\",\r\n\t\t\t\"2\": \"..---\", \"7\": \"--...\",\r\n\t\t\t\"3\": \"...--\", \"8\": \"---..\",\r\n\t\t\t\"4\": \"....-\", \"9\": \"----.\",\r\n\r\n\t\t\t\"a\": \".-\"   , \"n\": \"-.\"   ,\r\n\t\t\t\"b\": \"-...\" , \"o\": \"---\"  ,\r\n\t\t\t\"c\": \"-.-.\" , \"p\": \".--.\" ,\r\n\t\t\t\"d\": \"-..\"  , \"q\": \"--.-\" ,\r\n\t\t\t\"e\": \".\"    , \"r\": \".-.\"  ,\r\n\t\t\t\"f\": \"..-.\" , \"s\": \"...\"  ,\r\n\t\t\t\"g\": \"--.\"  , \"t\": \"-\"    ,\r\n\t\t\t\"h\": \"....\" , \"u\": \"..-\"  ,\r\n\t\t\t\"i\": \"..\"   , \"v\": \"...-\" ,\r\n\t\t\t\"j\": \".---\" , \"w\": \".--\"  ,\r\n\t\t\t\"k\": \"-.-\"  , \"x\": \"-..-\" ,\r\n\t\t\t\"l\": \".-..\" , \"y\": \"-.--\" ,\r\n\t\t\t\"m\": \"--\"   , \"z\": \"--..\" ,\r\n\r\n\t\t\t\".\": \".-.-.-\",\r\n\t\t\t\",\": \"--..--\",\r\n\t\t\t\"?\": \"..--..\",\r\n\t\t\t\"!\": \"-.-.--\",\r\n\t\t\t\"-\": \"-....-\"\r\n\t\t}`));\r\n\t\t// \"/\": \"-..-.\",\r\n\t\t// \"@\": \".--.-.\",\r\n\t\t// \"(\": \"-.--.\",\r\n\t\t// \")\": \"-.--.-\"\r\n\t}\r\n\tObject.freeze(Morse);\r\n}\r\nObject.freeze(English);"],"sourceRoot":""}
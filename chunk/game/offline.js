/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksnakey3"] = self["webpackChunksnakey3"] || []).push([["game/offline"],{

/***/ "./src/base/game/ScoreInfo.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ScoreInfo\": () => /* binding */ ScoreInfo\n/* harmony export */ });\n/* harmony import */ var defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/defs/JsUtils.ts\");\n/* harmony import */ var defs_TypeDefs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/defs/TypeDefs.ts\");\n\r\n\r\n/**\r\n * Information about each Player's scores and statistics since the\r\n * last Game reset. This is separated from Player instances since\r\n * non-GameManagers have no need to maintain such records throughout\r\n * the game.\r\n */\r\nclass ScoreInfo {\r\n    constructor(playerIds) {\r\n        const entries = [];\r\n        for (const id of playerIds) {\r\n            entries[id] = new ScoreInfo.Entry();\r\n        }\r\n        this.entries = entries;\r\n        defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.propNoWrite(this, [\"entries\"]);\r\n    }\r\n    reset() {\r\n        for (const entry of this.entries) {\r\n            entry.reset();\r\n        }\r\n    }\r\n}\r\n(function (ScoreInfo) {\r\n    /**\r\n     */\r\n    class Entry {\r\n        constructor() {\r\n            this.moveCounts = {}; // This will be initialized during reset.\r\n        }\r\n        reset() {\r\n            this.totalHealthPickedUp = 0.0;\r\n            Object.getOwnPropertyNames(defs_TypeDefs__WEBPACK_IMPORTED_MODULE_1__.Player.MoveType).forEach((key) => {\r\n                this.moveCounts[key] = 0;\r\n            });\r\n        }\r\n    }\r\n    ScoreInfo.Entry = Entry;\r\n    Object.freeze(Entry);\r\n    Object.freeze(Entry.prototype);\r\n})(ScoreInfo || (ScoreInfo = {}));\r\nObject.freeze(ScoreInfo);\r\nObject.freeze(ScoreInfo.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYmFzZS9nYW1lL1Njb3JlSW5mby50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3NuYWtleTMvLi9zcmMvYmFzZS9nYW1lL1Njb3JlSW5mby50cz9iZTRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzVXRpbHMgfSBmcm9tIFwiZGVmcy9Kc1V0aWxzXCI7XHJcbmltcG9ydCB7IFBsYXllciBhcyBfUGxheWVyIH0gZnJvbSBcImRlZnMvVHlwZURlZnNcIjtcclxuLyoqXHJcbiAqIEluZm9ybWF0aW9uIGFib3V0IGVhY2ggUGxheWVyJ3Mgc2NvcmVzIGFuZCBzdGF0aXN0aWNzIHNpbmNlIHRoZVxyXG4gKiBsYXN0IEdhbWUgcmVzZXQuIFRoaXMgaXMgc2VwYXJhdGVkIGZyb20gUGxheWVyIGluc3RhbmNlcyBzaW5jZVxyXG4gKiBub24tR2FtZU1hbmFnZXJzIGhhdmUgbm8gbmVlZCB0byBtYWludGFpbiBzdWNoIHJlY29yZHMgdGhyb3VnaG91dFxyXG4gKiB0aGUgZ2FtZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY29yZUluZm8ge1xyXG4gICAgY29uc3RydWN0b3IocGxheWVySWRzKSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgcGxheWVySWRzKSB7XHJcbiAgICAgICAgICAgIGVudHJpZXNbaWRdID0gbmV3IFNjb3JlSW5mby5FbnRyeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVudHJpZXMgPSBlbnRyaWVzO1xyXG4gICAgICAgIEpzVXRpbHMucHJvcE5vV3JpdGUodGhpcywgW1wiZW50cmllc1wiXSk7XHJcbiAgICB9XHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcykge1xyXG4gICAgICAgICAgICBlbnRyeS5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKFNjb3JlSW5mbykge1xyXG4gICAgLyoqXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIEVudHJ5IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlQ291bnRzID0ge307IC8vIFRoaXMgd2lsbCBiZSBpbml0aWFsaXplZCBkdXJpbmcgcmVzZXQuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc2V0KCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsSGVhbHRoUGlja2VkVXAgPSAwLjA7XHJcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKF9QbGF5ZXIuTW92ZVR5cGUpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ291bnRzW2tleV0gPSAwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTY29yZUluZm8uRW50cnkgPSBFbnRyeTtcclxuICAgIE9iamVjdC5mcmVlemUoRW50cnkpO1xyXG4gICAgT2JqZWN0LmZyZWV6ZShFbnRyeS5wcm90b3R5cGUpO1xyXG59KShTY29yZUluZm8gfHwgKFNjb3JlSW5mbyA9IHt9KSk7XHJcbk9iamVjdC5mcmVlemUoU2NvcmVJbmZvKTtcclxuT2JqZWN0LmZyZWV6ZShTY29yZUluZm8ucHJvdG90eXBlKTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/base/game/ScoreInfo.ts\n");

/***/ }),

/***/ "./src/base/game/ctormaps/CmapManager.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var floor_Grid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/floor/Grid.ts\");\n/* harmony import */ var floor_impl_Euclid2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/floor/impl/Euclid2.ts\");\n/* harmony import */ var floor_impl_Beehive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/base/floor/impl/Beehive.ts\");\n/* harmony import */ var _player_ArtificialPlayer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/base/game/player/ArtificialPlayer.ts\");\n/* harmony import */ var _player_artificials_Chaser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./src/base/game/player/artificials/Chaser.ts\");\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    {\r\n        // Non-Visible Grid Implementation Registry:\r\n        floor_Grid__WEBPACK_IMPORTED_MODULE_0__.Grid._Constructors\r\n            = Object.freeze({\r\n                [\"EUCLID2\"]: floor_impl_Euclid2__WEBPACK_IMPORTED_MODULE_1__.Euclid2.Grid,\r\n                [\"BEEHIVE\"]: floor_impl_Beehive__WEBPACK_IMPORTED_MODULE_2__.Beehive.Grid,\r\n            });\r\n        Object.freeze(floor_Grid__WEBPACK_IMPORTED_MODULE_0__.Grid);\r\n        Object.freeze(floor_Grid__WEBPACK_IMPORTED_MODULE_0__.Grid.prototype);\r\n    }\r\n    {\r\n        const AP = _player_ArtificialPlayer__WEBPACK_IMPORTED_MODULE_3__.ArtificialPlayer;\r\n        AP._Constructors\r\n            = Object.freeze({\r\n                CHASER: _player_artificials_Chaser__WEBPACK_IMPORTED_MODULE_4__.Chaser,\r\n            });\r\n        Object.freeze(AP);\r\n        Object.freeze(AP.prototype);\r\n    }\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYmFzZS9nYW1lL2N0b3JtYXBzL0NtYXBNYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25ha2V5My8uL3NyYy9iYXNlL2dhbWUvY3Rvcm1hcHMvQ21hcE1hbmFnZXIudHM/NTQ5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkIH0gZnJvbSBcImZsb29yL0dyaWRcIjtcclxuaW1wb3J0IHsgRXVjbGlkMiB9IGZyb20gXCJmbG9vci9pbXBsL0V1Y2xpZDJcIjtcclxuaW1wb3J0IHsgQmVlaGl2ZSB9IGZyb20gXCJmbG9vci9pbXBsL0JlZWhpdmVcIjtcclxuaW1wb3J0IHsgQXJ0aWZpY2lhbFBsYXllciB9IGZyb20gXCIuLi9wbGF5ZXIvQXJ0aWZpY2lhbFBsYXllclwiO1xyXG5pbXBvcnQgeyBDaGFzZXIgfSBmcm9tIFwiLi4vcGxheWVyL2FydGlmaWNpYWxzL0NoYXNlclwiO1xyXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XHJcbiAgICB7XHJcbiAgICAgICAgLy8gTm9uLVZpc2libGUgR3JpZCBJbXBsZW1lbnRhdGlvbiBSZWdpc3RyeTpcclxuICAgICAgICBHcmlkLl9Db25zdHJ1Y3RvcnNcclxuICAgICAgICAgICAgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgICAgIFtcIkVVQ0xJRDJcIl06IEV1Y2xpZDIuR3JpZCxcclxuICAgICAgICAgICAgICAgIFtcIkJFRUhJVkVcIl06IEJlZWhpdmUuR3JpZCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShHcmlkKTtcclxuICAgICAgICBPYmplY3QuZnJlZXplKEdyaWQucHJvdG90eXBlKTtcclxuICAgIH1cclxuICAgIHtcclxuICAgICAgICBjb25zdCBBUCA9IEFydGlmaWNpYWxQbGF5ZXI7XHJcbiAgICAgICAgQVAuX0NvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICAgICAgQ0hBU0VSOiBDaGFzZXIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5mcmVlemUoQVApO1xyXG4gICAgICAgIE9iamVjdC5mcmVlemUoQVAucHJvdG90eXBlKTtcclxuICAgIH1cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/base/game/ctormaps/CmapManager.ts\n");

/***/ }),

/***/ "./src/base/game/gameparts/GamepartManager.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GamepartManager\": () => /* binding */ GamepartManager\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/defs/JsUtils.ts\");\n/* harmony import */ var lang_Lang__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/lang/Lang.ts\");\n/* harmony import */ var game_Game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/base/game/Game.ts\");\n/* harmony import */ var floor_Coord__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/base/floor/Coord.ts\");\n/* harmony import */ var _player_Player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./src/base/game/player/Player.ts\");\n/* harmony import */ var _player_ArtificialPlayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./src/base/game/player/ArtificialPlayer.ts\");\n/* harmony import */ var _ScoreInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./src/base/game/ScoreInfo.ts\");\n/* harmony import */ var _GamepartEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./src/base/game/gameparts/GamepartEvents.ts\");\n/* harmony import */ var game_ctormaps_CmapManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./src/base/game/ctormaps/CmapManager.ts\");\nvar _currentFreeHealth, _freeHealthTiles, _langImportPromise;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // <- has side-effects.\r\n(0,game_ctormaps_CmapManager__WEBPACK_IMPORTED_MODULE_8__.default)();\r\n/**\r\n *\r\n */\r\nclass GamepartManager extends _GamepartEvents__WEBPACK_IMPORTED_MODULE_7__.GamepartEvents {\r\n    /**\r\n     * Performs the \"no invincible player\" check (See {@link Player#teamSet}).\r\n     *\r\n     * @param gameType -\r\n     * @param impl -\r\n     * @param desc -\r\n     */\r\n    constructor(gameType, impl, desc) {\r\n        super(gameType, impl, desc);\r\n        _currentFreeHealth.set(this, void 0);\r\n        _freeHealthTiles.set(this, void 0);\r\n        _langImportPromise.set(this, void 0);\r\n        this.averageFreeHealth = desc.averageFreeHealthPerTile * this.grid.area;\r\n        this.averageFreeHealthPerTile = desc.averageFreeHealthPerTile;\r\n        this.healthCostOfBoost = game_Game__WEBPACK_IMPORTED_MODULE_2__.Game.K.HEALTH_COST_OF_BOOST(this.averageFreeHealthPerTile, this.grid.static.getDiameterOfLatticePatchHavingArea);\r\n        (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldSet)(this, _freeHealthTiles, new Set());\r\n        this.scoreInfo = new _ScoreInfo__WEBPACK_IMPORTED_MODULE_6__.ScoreInfo(this.players.map((player) => player.playerId));\r\n        defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.propNoWrite(this, [\r\n            \"averageFreeHealth\", \"averageFreeHealthPerTile\", \"healthCostOfBoost\", \"scoreInfo\",\r\n        ]);\r\n        // https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import\r\n        (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldSet)(this, _langImportPromise, (__webpack_require__(\"./src/base/lang/impl lazy recursive ^\\\\.\\\\/.*\\\\.ts$\")(`./${this.langFrontend.module}.ts`)).then((langModule) => {\r\n            const LangConstructor = this.langFrontend.export.split(\".\").reduce((nsps, propName) => nsps[propName], langModule[this.langFrontend.module]);\r\n            // @ts-expect-error : RO=\r\n            this.lang = new LangConstructor(desc.langWeightExaggeration);\r\n            defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.propNoWrite(this, [\"lang\"]);\r\n            // TODO.impl Enforce this in the UI code by greying out unusable combos of lang and coord-sys.\r\n            const minLangLeaves = this.grid.static.getAmbiguityThreshold();\r\n            if (this.lang.numLeaves < minLangLeaves) {\r\n                throw new Error(`Found ${this.lang.numLeaves} leaves, but at`\r\n                    + ` least ${minLangLeaves} were required. The provided mappings`\r\n                    + ` composing the current Lang-under-construction are not`\r\n                    + ` sufficient to ensure that a shuffling operation will always`\r\n                    + ` be able to find a safe candidate to use as a replacement.`\r\n                    + ` Please see the spec for Lang.getNonConflictingChar.`);\r\n            }\r\n            return this.lang;\r\n        }));\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    reset() {\r\n        const _super = Object.create(null, {\r\n            reset: { get: () => super.reset }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {\r\n            // Reset the grid and event record:\r\n            yield _super.reset.call(this);\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldSet)(this, _currentFreeHealth, 0.0);\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _freeHealthTiles).clear();\r\n            // Reset hit-counters in the current language:\r\n            // This must be done before shuffling so that the previous\r\n            // history of shuffle-ins has no effects on the new pairs.\r\n            yield (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _langImportPromise);\r\n            this.lang.reset();\r\n            // Shuffle everything:\r\n            this.grid.shuffledForEachTile((tile) => {\r\n                tile.setLangCharSeqPair(this.dryRunShuffleLangCharSeqAt(tile));\r\n            });\r\n            // Reset and spawn players:\r\n            this.teams.forEach((team) => team.reset());\r\n            const spawnPoints = this.grid.static.getSpawnCoords(this.teams.map((team) => team.members.length), this.grid.dimensions);\r\n            this.teams.forEach((team, teamIndex) => {\r\n                team.members.forEach((member, memberIndex) => {\r\n                    member.reset(this.grid.tile.at(spawnPoints[teamIndex][memberIndex]));\r\n                });\r\n            });\r\n            this.scoreInfo.reset();\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    _createArtifPlayer(desc) {\r\n        return _player_ArtificialPlayer__WEBPACK_IMPORTED_MODULE_5__.ArtificialPlayer.of(this, desc);\r\n    }\r\n    /**\r\n     * **Important:** Nullifies the existing values at `tile` and does\r\n     * not consume the returned values, which must be done externally.\r\n     *\r\n     * @param targetTile\r\n     * The {@link Tile} to shuffle their {@link Lang.CharSeqPair}\r\n     * pair for.\r\n     *\r\n     * @param doCheckEmptyTiles\r\n     * Pass `true` when populating a grid which has been reset.\r\n     *\r\n     * @returns\r\n     * A {@link Lang.CharSeqPair} that can be used as a replacement\r\n     * for that currently being used by `tile`.\r\n     */\r\n    dryRunShuffleLangCharSeqAt(targetTile, doCheckEmptyTiles = false) {\r\n        // First, clear values for the target tile so its current\r\n        // (to-be-previous) values don't get unnecessarily avoided.\r\n        targetTile.setLangCharSeqPair(lang_Lang__WEBPACK_IMPORTED_MODULE_1__.Lang.CharSeqPair.NULL);\r\n        let avoid = this.grid\r\n            .getDestsFromSourcesTo(targetTile.coord)\r\n            .map((tile) => tile.langSeq);\r\n        // ^ Note: An array of CharSeq from unique Tiles. It is okay\r\n        // for those tiles to include `targetTile`, and it is okay for\r\n        // those\r\n        if (doCheckEmptyTiles) {\r\n            const nullSeq = lang_Lang__WEBPACK_IMPORTED_MODULE_1__.Lang.CharSeqPair.NULL.seq;\r\n            avoid = avoid.filter((seq) => seq !== nullSeq);\r\n        }\r\n        return this.lang.getNonConflictingChar(avoid);\r\n    }\r\n    get currentFreeHealth() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _currentFreeHealth);\r\n    }\r\n    get freeHealthTiles() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _freeHealthTiles);\r\n    }\r\n    /**\r\n     * @returns\r\n     * A descriptor of changes to make to tiles regarding health spawning.\r\n     *\r\n     * **`IMPORTANT`**: This method does not have any override structure\r\n     * where the Server additionally notifies clients of the changes. It\r\n     * is intended to be wrapped inside other events with such behaviour.\r\n     *\r\n     * Note that this will seem to have a one-movement-event delay in\r\n     * specifying changes to be made because `this.currentFreeHealth`\r\n     * does not update until after the movement request has been\r\n     * executed.\r\n     *\r\n     * @param sameReqOtherModDescs\r\n     * A list of other descs including those specifying modifications\r\n     * to be made in the same `execute???Request` function as the one\r\n     * for which this is being called. Without this information, we\r\n     * could mess up `lastKnownUpdateId` counters at those locations.\r\n     */\r\n    dryRunSpawnFreeHealth(sameReqOtherModDescs) {\r\n        var _a;\r\n        let healthToSpawn = this.averageFreeHealth - this.currentFreeHealth;\r\n        if (healthToSpawn <= 0)\r\n            return undefined;\r\n        const retval = [];\r\n        while (healthToSpawn > 0) {\r\n            let tile;\r\n            do {\r\n                tile = this.grid.tile.at(this.grid.getRandomCoord());\r\n            } while ((() => {\r\n                return tile.isOccupied\r\n                    // The below equality check is necessary to prevent counting bugs.\r\n                    || retval.find((desc) => floor_Coord__WEBPACK_IMPORTED_MODULE_3__.Coord.equals(tile.coord, desc.coord));\r\n                // TODO.impl add other checks to improve distribution and reduce\r\n                // crowding of freeHealth. Make sure it is sensitive to\r\n                // `this.averageFreeHealthPerTile`.\r\n            })());\r\n            const tileHealthToAdd = game_Game__WEBPACK_IMPORTED_MODULE_2__.Game.K.AVERAGE_HEALTH_TO_SPAWN_ON_TILE;\r\n            if ((Math.random() < game_Game__WEBPACK_IMPORTED_MODULE_2__.Game.K.HEALTH_UPDATE_CHANCE)) {\r\n                let otherDesc;\r\n                if (otherDesc = sameReqOtherModDescs.find((desc) => floor_Coord__WEBPACK_IMPORTED_MODULE_3__.Coord.equals(tile.coord, desc.coord))) {\r\n                    otherDesc.newFreeHealth = ((_a = otherDesc.newFreeHealth) !== null && _a !== void 0 ? _a : 0) + tileHealthToAdd;\r\n                }\r\n                else {\r\n                    retval.push({\r\n                        coord: tile.coord,\r\n                        lastKnownUpdateId: 1 + tile.lastKnownUpdateId,\r\n                        newCharSeqPair: undefined,\r\n                        newFreeHealth: tile.freeHealth + tileHealthToAdd,\r\n                    });\r\n                }\r\n            }\r\n            healthToSpawn -= tileHealthToAdd;\r\n        }\r\n        return retval;\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    executeTileModEvent(desc, doCheckOperatorSeqBuffer = true) {\r\n        Object.freeze(desc);\r\n        const tile = this.grid.tile.at(desc.coord);\r\n        // NOTE: This assertion must be performed before executing\r\n        // changes by making a supercall or else the previous state\r\n        // will be gone.\r\n        if (desc.lastKnownUpdateId !== (1 + tile.lastKnownUpdateId)) {\r\n            // We literally just specified this in processMoveRequest.\r\n            throw new RangeError(\"never\");\r\n        }\r\n        (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldSet)(this, _currentFreeHealth, (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _currentFreeHealth) + (desc.newFreeHealth - tile.freeHealth));\r\n        if (desc.newFreeHealth === 0) {\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _freeHealthTiles).delete(tile);\r\n        }\r\n        else {\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__classPrivateFieldGet)(this, _freeHealthTiles).add(tile);\r\n        }\r\n        super.executeTileModEvent(desc, doCheckOperatorSeqBuffer);\r\n        return tile;\r\n    }\r\n    /**\r\n     * Perform checks on an incoming event request for some action that\r\n     * a player can perform while the game is playing (ie. not paused\r\n     * or over).\r\n     *\r\n     * @param desc -\r\n     * @returns\r\n     * The player specified by the given ID, or undefined if the\r\n     * game is not playing, in which case the event request should\r\n     * be rejected.\r\n     *\r\n     * @throws\r\n     * `RangeError` if the request was made before receiving an\r\n     * acknowledgement for the previous request, or if the given ID\r\n     * does not belong to any existing player.\r\n     */\r\n    managerCheckGamePlayingRequest(desc) {\r\n        if (this.status !== game_Game__WEBPACK_IMPORTED_MODULE_2__.Game.Status.PLAYING) {\r\n            return undefined;\r\n        }\r\n        const player = this.players[desc.playerId];\r\n        if (!player) {\r\n            throw new Error(\"No such player exists.\");\r\n        }\r\n        if (desc.playerLastAcceptedRequestId !== player.lastAcceptedRequestId) {\r\n            throw new RangeError((desc.playerLastAcceptedRequestId < player.lastAcceptedRequestId)\r\n                ? (\"Clients should not make requests until they have\"\r\n                    + \" received my response to their last request.\")\r\n                : (\"Client seems to have incremented the request ID\"\r\n                    + \" counter on their own, which is is illegal.\"));\r\n        }\r\n        return player;\r\n    }\r\n    /**\r\n     * @see PlayerMovementEvent\r\n     *\r\n     * Reject the request if `dest` is occupied, or if the specified\r\n     * player does not exist, or the client is missing updates for the\r\n     * destination they requested to move to, or the player is bubbling.\r\n     *\r\n     * @param desc\r\n     * A descriptor of the request describing the requester's views\r\n     * of critical parts of the game-state from their copy of the game\r\n     * state at the time of the request. Is modified to describe changes\r\n     * to be made.\r\n     */\r\n    processMoveRequest(desc) {\r\n        const player = this.managerCheckGamePlayingRequest(desc);\r\n        if (!player) {\r\n            // Reject the request:\r\n            this.executePlayerMoveEvent(desc);\r\n            return;\r\n        }\r\n        const dest = this.grid.tile.at(desc.destModDesc.coord);\r\n        if (dest.isOccupied ||\r\n            dest.lastKnownUpdateId !== desc.destModDesc.lastKnownUpdateId) {\r\n            // The update ID check is not essential, but it helps\r\n            // enforce stronger client-experience consistency: they cannot\r\n            // move somewhere where they have not realized the `LangSeq` has\r\n            // changed.\r\n            this.executePlayerMoveEvent(desc); // Reject the request.\r\n            return;\r\n        }\r\n        const moveIsBoost = (desc.moveType === _player_Player__WEBPACK_IMPORTED_MODULE_4__.Player.MoveType.BOOST);\r\n        const newPlayerHealthValue = player.status.health\r\n            + (dest.freeHealth * (player.status.isDowned ? game_Game__WEBPACK_IMPORTED_MODULE_2__.Game.K.HEALTH_EFFECT_FOR_DOWNED_PLAYER : 1.0))\r\n            - (moveIsBoost ? this.healthCostOfBoost : 0);\r\n        if (moveIsBoost && newPlayerHealthValue < 0) {\r\n            // Reject a boost-type movement request if it would make\r\n            // the player become downed (or if they are already downed):\r\n            this.executePlayerMoveEvent(desc);\r\n            return;\r\n        }\r\n        // Update stats records:\r\n        const playerScoreInfo = this.scoreInfo.entries[player.playerId];\r\n        playerScoreInfo.totalHealthPickedUp += dest.freeHealth;\r\n        playerScoreInfo.moveCounts[desc.moveType] += 1;\r\n        // Set response fields according to spec in `PlayerMovementEvent`:\r\n        desc.playerLastAcceptedRequestId = (1 + player.lastAcceptedRequestId);\r\n        desc.newPlayerHealth = {\r\n            health: newPlayerHealthValue,\r\n        };\r\n        desc.destModDesc.lastKnownUpdateId = (1 + dest.lastKnownUpdateId);\r\n        desc.destModDesc.newFreeHealth = 0;\r\n        desc.destModDesc.newCharSeqPair = this.dryRunShuffleLangCharSeqAt(dest);\r\n        desc.tileHealthModDescs = this.dryRunSpawnFreeHealth([desc.destModDesc]);\r\n        // Accept the request, and trigger calculation\r\n        // and enactment of the requested changes:\r\n        desc.eventId = this.nextUnusedEventId;\r\n        this.executePlayerMoveEvent(desc);\r\n    }\r\n    processPlayerContact(sourceP) {\r\n        return undefined;\r\n    }\r\n    /**\r\n     * @see PlayerActionEvent.Bubble\r\n     * @param desc - Is modified to describe changes to be made.\r\n     */\r\n    processBubbleRequest(desc) {\r\n        // TODO.impl\r\n        // - If successful, make sure to lower the health field.\r\n        // - Make an abstract method in the OperatorPlayer class called in\r\n        //   the top-level input processor for it to trigger this event.\r\n        const bubbler = this.managerCheckGamePlayingRequest(desc);\r\n        if (!bubbler) {\r\n            // Reject the request:\r\n            this.executePlayerBubbleEvent(desc);\r\n            return;\r\n        }\r\n        desc.playerLastAcceptedRequestId = (1 + bubbler.lastAcceptedRequestId);\r\n        // We are all go! Do it.\r\n        desc.eventId = this.nextUnusedEventId;\r\n        this.executePlayerBubbleEvent(desc);\r\n    }\r\n}\r\n_currentFreeHealth = new WeakMap(), _freeHealthTiles = new WeakMap(), _langImportPromise = new WeakMap();\r\n(function (GamepartManager) {\r\n    /**\r\n     * If cleaning can be appropriately performed, this function will\r\n     * do so. If not, it will indicate invalidities in its return value.\r\n     */\r\n    function CHECK_VALID_CTOR_ARGS(args) {\r\n        const fr = [];\r\n        const requiredFields = Object.freeze({\r\n            coordSys: 0, gridDimensions: 0, averageFreeHealthPerTile: 0,\r\n            langId: 0, langWeightExaggeration: 0, playerDescs: 0,\r\n        });\r\n        const missingFields = [];\r\n        for (const fieldName in requiredFields) {\r\n            const field = args[fieldName];\r\n            if (field === undefined || field === null) {\r\n                missingFields.push(fieldName);\r\n            }\r\n        }\r\n        if (missingFields.length) {\r\n            fr.push(\"Missing the following arguments: \" + missingFields);\r\n        }\r\n        if (lang_Lang__WEBPACK_IMPORTED_MODULE_1__.Lang.GET_FRONTEND_DESC_BY_ID(args.langId) === undefined) {\r\n            fr.push(`No language with the ID \\`${args.langId}\\` exists.`);\r\n        }\r\n        if (parseInt(args.langWeightExaggeration) === NaN) {\r\n            fr.push(`Language Weight Exaggeration expected a number, but`\r\n                + `\\`${args.langWeightExaggeration}\\` is not a number.`);\r\n        }\r\n        else {\r\n            args.langWeightExaggeration = Math.max(0, parseFloat(args.langWeightExaggeration));\r\n        }\r\n        // TODO.impl check all the rest of the things.\r\n        // if (!(Player.Username.REGEXP.test(desc.username))) {\r\n        //     throw new RangeError(`Username \\\"${desc.username}\\\"`\r\n        //     + ` does not match the required regular expression,`\r\n        //     + ` \\\"${Player.Username.REGEXP.source}\\\".`\r\n        //     );\r\n        // }\r\n        return fr;\r\n    }\r\n    GamepartManager.CHECK_VALID_CTOR_ARGS = CHECK_VALID_CTOR_ARGS;\r\n})(GamepartManager || (GamepartManager = {}));\r\ndefs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.protoNoEnum(GamepartManager, [\"managerCheckGamePlayingRequest\"]);\r\nObject.freeze(GamepartManager);\r\nObject.freeze(GamepartManager.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/base/game/gameparts/GamepartManager.ts\n");

/***/ }),

/***/ "./src/base/game/player/ArtificialPlayer.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JsUtils\": () => /* reexport safe */ defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils,\n/* harmony export */   \"Player\": () => /* reexport safe */ _Player__WEBPACK_IMPORTED_MODULE_2__.Player,\n/* harmony export */   \"ArtificialPlayer\": () => /* binding */ ArtificialPlayer\n/* harmony export */ });\n/* harmony import */ var defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/defs/JsUtils.ts\");\n/* harmony import */ var game_Game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/game/Game.ts\");\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/base/game/player/Player.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Unlike {@link HumanPlayer}s, these are not guided by human input.\r\n * Instead, they are essentially defined by how often they move, and\r\n * where they decide to move toward each time they move.\r\n *\r\n * Can be paused and un-paused by the Game Manager.\r\n *\r\n * @extends Player\r\n */\r\nclass ArtificialPlayer extends _Player__WEBPACK_IMPORTED_MODULE_2__.Player {\r\n    /**\r\n     * See {@link ArtificialPlayer.of} for the public constructor\r\n     * interface.\r\n     *\r\n     * @param game -\r\n     * @param desc -\r\n     */\r\n    constructor(game, desc) {\r\n        super(game, desc);\r\n        if (game.gameType === game_Game__WEBPACK_IMPORTED_MODULE_1__.Game.Type.ONLINE) {\r\n            throw new TypeError(\"OnlineGames should be using regular Players instead.\");\r\n        }\r\n    }\r\n    _notifyGameNowPlaying() {\r\n        this.delayedMovementContinue();\r\n    }\r\n    _notifyGameNowPaused() {\r\n        this.game.cancelTimeout(this._scheduledMovementCallbackId);\r\n        this._scheduledMovementCallbackId = undefined;\r\n    }\r\n    _notifyGameNowOver() {\r\n        this.game.cancelTimeout(this._scheduledMovementCallbackId);\r\n        this._scheduledMovementCallbackId = undefined;\r\n    }\r\n    /**\r\n     * Executes a single movement and then calls `delayedMovementContinue`.\r\n     */\r\n    movementContinue() {\r\n        const desiredDest = this.computeDesiredDest();\r\n        // This is a little different than how human players experience\r\n        // \"penalties\" when moving to tiles with long language-sequences-\r\n        // humans must pay the penalty before landing on the tile, but\r\n        // in the implementation here, it's much easier to simulate such\r\n        // a penalty if it applies _after_ landing on the tile.\r\n        this._nextMovementTimerMultiplier = this.game.grid.tile.at(desiredDest).langSeq.length;\r\n        this.makeMovementRequest(this.game.grid.getUntToward(desiredDest, this.coord), this.getNextMoveType());\r\n        // Schedule a task to do this again:\r\n        this.delayedMovementContinue();\r\n    }\r\n    /**\r\n     * Schedules a call to `movementContinue`.\r\n     */\r\n    delayedMovementContinue() {\r\n        // Schedule the next movement.\r\n        this._scheduledMovementCallbackId = this.game.setTimeout(this.movementContinue.bind(this), this.computeNextMovementTimer() * this._nextMovementTimerMultiplier);\r\n        return;\r\n    }\r\n}\r\n(function (ArtificialPlayer) {\r\n    ArtificialPlayer.of = (game, playerDesc) => {\r\n        const familyId = playerDesc.familyId;\r\n        return new (ArtificialPlayer._Constructors[familyId])(game, playerDesc);\r\n    };\r\n})(ArtificialPlayer || (ArtificialPlayer = {}));\r\ndefs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.protoNoEnum(ArtificialPlayer, [\"movementContinue\"]);\r\n// ArtificialPlayer is frozen in PostInit after _Constructors get initialized.\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYmFzZS9nYW1lL3BsYXllci9BcnRpZmljaWFsUGxheWVyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc25ha2V5My8uL3NyYy9iYXNlL2dhbWUvcGxheWVyL0FydGlmaWNpYWxQbGF5ZXIudHM/YjI3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc1V0aWxzIH0gZnJvbSBcImRlZnMvSnNVdGlsc1wiO1xyXG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcImdhbWUvR2FtZVwiO1xyXG5leHBvcnQgeyBKc1V0aWxzIH07XHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL1BsYXllclwiO1xyXG5leHBvcnQgeyBQbGF5ZXIgfTtcclxuLyoqXHJcbiAqIFVubGlrZSB7QGxpbmsgSHVtYW5QbGF5ZXJ9cywgdGhlc2UgYXJlIG5vdCBndWlkZWQgYnkgaHVtYW4gaW5wdXQuXHJcbiAqIEluc3RlYWQsIHRoZXkgYXJlIGVzc2VudGlhbGx5IGRlZmluZWQgYnkgaG93IG9mdGVuIHRoZXkgbW92ZSwgYW5kXHJcbiAqIHdoZXJlIHRoZXkgZGVjaWRlIHRvIG1vdmUgdG93YXJkIGVhY2ggdGltZSB0aGV5IG1vdmUuXHJcbiAqXHJcbiAqIENhbiBiZSBwYXVzZWQgYW5kIHVuLXBhdXNlZCBieSB0aGUgR2FtZSBNYW5hZ2VyLlxyXG4gKlxyXG4gKiBAZXh0ZW5kcyBQbGF5ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBcnRpZmljaWFsUGxheWVyIGV4dGVuZHMgUGxheWVyIHtcclxuICAgIC8qKlxyXG4gICAgICogU2VlIHtAbGluayBBcnRpZmljaWFsUGxheWVyLm9mfSBmb3IgdGhlIHB1YmxpYyBjb25zdHJ1Y3RvclxyXG4gICAgICogaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBnYW1lIC1cclxuICAgICAqIEBwYXJhbSBkZXNjIC1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGVzYykge1xyXG4gICAgICAgIHN1cGVyKGdhbWUsIGRlc2MpO1xyXG4gICAgICAgIGlmIChnYW1lLmdhbWVUeXBlID09PSBHYW1lLlR5cGUuT05MSU5FKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPbmxpbmVHYW1lcyBzaG91bGQgYmUgdXNpbmcgcmVndWxhciBQbGF5ZXJzIGluc3RlYWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9ub3RpZnlHYW1lTm93UGxheWluZygpIHtcclxuICAgICAgICB0aGlzLmRlbGF5ZWRNb3ZlbWVudENvbnRpbnVlKCk7XHJcbiAgICB9XHJcbiAgICBfbm90aWZ5R2FtZU5vd1BhdXNlZCgpIHtcclxuICAgICAgICB0aGlzLmdhbWUuY2FuY2VsVGltZW91dCh0aGlzLl9zY2hlZHVsZWRNb3ZlbWVudENhbGxiYWNrSWQpO1xyXG4gICAgICAgIHRoaXMuX3NjaGVkdWxlZE1vdmVtZW50Q2FsbGJhY2tJZCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIF9ub3RpZnlHYW1lTm93T3ZlcigpIHtcclxuICAgICAgICB0aGlzLmdhbWUuY2FuY2VsVGltZW91dCh0aGlzLl9zY2hlZHVsZWRNb3ZlbWVudENhbGxiYWNrSWQpO1xyXG4gICAgICAgIHRoaXMuX3NjaGVkdWxlZE1vdmVtZW50Q2FsbGJhY2tJZCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgYSBzaW5nbGUgbW92ZW1lbnQgYW5kIHRoZW4gY2FsbHMgYGRlbGF5ZWRNb3ZlbWVudENvbnRpbnVlYC5cclxuICAgICAqL1xyXG4gICAgbW92ZW1lbnRDb250aW51ZSgpIHtcclxuICAgICAgICBjb25zdCBkZXNpcmVkRGVzdCA9IHRoaXMuY29tcHV0ZURlc2lyZWREZXN0KCk7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIGxpdHRsZSBkaWZmZXJlbnQgdGhhbiBob3cgaHVtYW4gcGxheWVycyBleHBlcmllbmNlXHJcbiAgICAgICAgLy8gXCJwZW5hbHRpZXNcIiB3aGVuIG1vdmluZyB0byB0aWxlcyB3aXRoIGxvbmcgbGFuZ3VhZ2Utc2VxdWVuY2VzLVxyXG4gICAgICAgIC8vIGh1bWFucyBtdXN0IHBheSB0aGUgcGVuYWx0eSBiZWZvcmUgbGFuZGluZyBvbiB0aGUgdGlsZSwgYnV0XHJcbiAgICAgICAgLy8gaW4gdGhlIGltcGxlbWVudGF0aW9uIGhlcmUsIGl0J3MgbXVjaCBlYXNpZXIgdG8gc2ltdWxhdGUgc3VjaFxyXG4gICAgICAgIC8vIGEgcGVuYWx0eSBpZiBpdCBhcHBsaWVzIF9hZnRlcl8gbGFuZGluZyBvbiB0aGUgdGlsZS5cclxuICAgICAgICB0aGlzLl9uZXh0TW92ZW1lbnRUaW1lck11bHRpcGxpZXIgPSB0aGlzLmdhbWUuZ3JpZC50aWxlLmF0KGRlc2lyZWREZXN0KS5sYW5nU2VxLmxlbmd0aDtcclxuICAgICAgICB0aGlzLm1ha2VNb3ZlbWVudFJlcXVlc3QodGhpcy5nYW1lLmdyaWQuZ2V0VW50VG93YXJkKGRlc2lyZWREZXN0LCB0aGlzLmNvb3JkKSwgdGhpcy5nZXROZXh0TW92ZVR5cGUoKSk7XHJcbiAgICAgICAgLy8gU2NoZWR1bGUgYSB0YXNrIHRvIGRvIHRoaXMgYWdhaW46XHJcbiAgICAgICAgdGhpcy5kZWxheWVkTW92ZW1lbnRDb250aW51ZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZXMgYSBjYWxsIHRvIGBtb3ZlbWVudENvbnRpbnVlYC5cclxuICAgICAqL1xyXG4gICAgZGVsYXllZE1vdmVtZW50Q29udGludWUoKSB7XHJcbiAgICAgICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgbW92ZW1lbnQuXHJcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVkTW92ZW1lbnRDYWxsYmFja0lkID0gdGhpcy5nYW1lLnNldFRpbWVvdXQodGhpcy5tb3ZlbWVudENvbnRpbnVlLmJpbmQodGhpcyksIHRoaXMuY29tcHV0ZU5leHRNb3ZlbWVudFRpbWVyKCkgKiB0aGlzLl9uZXh0TW92ZW1lbnRUaW1lck11bHRpcGxpZXIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKEFydGlmaWNpYWxQbGF5ZXIpIHtcclxuICAgIEFydGlmaWNpYWxQbGF5ZXIub2YgPSAoZ2FtZSwgcGxheWVyRGVzYykgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZhbWlseUlkID0gcGxheWVyRGVzYy5mYW1pbHlJZDtcclxuICAgICAgICByZXR1cm4gbmV3IChBcnRpZmljaWFsUGxheWVyLl9Db25zdHJ1Y3RvcnNbZmFtaWx5SWRdKShnYW1lLCBwbGF5ZXJEZXNjKTtcclxuICAgIH07XHJcbn0pKEFydGlmaWNpYWxQbGF5ZXIgfHwgKEFydGlmaWNpYWxQbGF5ZXIgPSB7fSkpO1xyXG5Kc1V0aWxzLnByb3RvTm9FbnVtKEFydGlmaWNpYWxQbGF5ZXIsIFtcIm1vdmVtZW50Q29udGludWVcIl0pO1xyXG4vLyBBcnRpZmljaWFsUGxheWVyIGlzIGZyb3plbiBpbiBQb3N0SW5pdCBhZnRlciBfQ29uc3RydWN0b3JzIGdldCBpbml0aWFsaXplZC5cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/base/game/player/ArtificialPlayer.ts\n");

/***/ }),

/***/ "./src/base/game/player/artificials/Chaser.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Chaser\": () => /* binding */ Chaser\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ArtificialPlayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/game/player/ArtificialPlayer.ts\");\nvar _prevCoord;\r\n\r\n\r\n/**\r\n *\r\n * @extends ArtificialPlayer\r\n */\r\nclass Chaser extends _ArtificialPlayer__WEBPACK_IMPORTED_MODULE_0__.ArtificialPlayer {\r\n    constructor(game, desc) {\r\n        super(game, desc);\r\n        _prevCoord.set(this, void 0);\r\n        this.behaviour = Object.freeze(Object.assign({}, Chaser.Behaviour.DEFAULT, desc.familyArgs));\r\n        this.grid = this.game.grid;\r\n    }\r\n    _afterAllPlayersConstruction() {\r\n        super._afterAllPlayersConstruction();\r\n        // We need to cast off read-only-ness below.\r\n        // @ts-expect-error : RO=\r\n        this.threatProximity = this.game.teams\r\n            .filter((team) => team.id !== this.teamId)\r\n            .flatMap((team) => team.members);\r\n        // @ts-expect-error : RO=\r\n        this.targetProximity = [...this.threatProximity];\r\n        _ArtificialPlayer__WEBPACK_IMPORTED_MODULE_0__.JsUtils.propNoWrite(this, [\r\n            \"threatProximity\", \"targetProximity\",\r\n            \"behaviour\", \"grid\",\r\n        ]);\r\n    }\r\n    reset(spawnTile) {\r\n        super.reset(spawnTile);\r\n        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldSet)(this, _prevCoord, this.coord);\r\n    }\r\n    moveTo(dest) {\r\n        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldSet)(this, _prevCoord, this.coord);\r\n        super.moveTo(dest);\r\n    }\r\n    computeDesiredDest() {\r\n        // Check if there is anyone to run away from:\r\n        this.threatProximity.sort((pa, pb) => {\r\n            return this.grid.minMovesFromTo(pa.coord, this.coord)\r\n                - this.grid.minMovesFromTo(pb.coord, this.coord);\r\n        });\r\n        for (const threatP of this.threatProximity) {\r\n            if (this.grid.minMovesFromTo(threatP.coord, this.coord)\r\n                > this.behaviour.fearDistance)\r\n                break;\r\n            if (threatP.status.isDowned)\r\n                continue;\r\n            if (threatP.status.health > this.status.health) {\r\n                // TODO.design Something that avoids getting cornered.\r\n                return this.grid.getUntAwayFrom(threatP.coord, this.coord).coord;\r\n            }\r\n        }\r\n        // If there is nobody to run away from,\r\n        // Check if there is anyone we want to attack:\r\n        this.targetProximity.sort((pa, pb) => {\r\n            return this.grid.minMovesFromTo(this.coord, pa.coord)\r\n                - this.grid.minMovesFromTo(this.coord, pb.coord);\r\n        });\r\n        if (this.status.isDowned) {\r\n            for (const targetP of this.targetProximity) {\r\n                if (this.grid.minMovesFromTo(this.coord, targetP.coord)\r\n                    > this.behaviour.bloodThirstDistance)\r\n                    break;\r\n                if (targetP.status.health < this.status.health - this.behaviour.healthReserve) {\r\n                    return targetP.coord;\r\n                }\r\n            }\r\n        }\r\n        // If there is nobody we want to chase after to attack,\r\n        // Head toward the nearest free health if it exists.\r\n        if (this.game.freeHealthTiles.size === 0) {\r\n            // No tiles close by. Wander around:\r\n            if (Math.random() < this.behaviour.wanderingAimlessness) {\r\n                // Big direction change:\r\n                return this.grid.getRandomCoordAround(this.coord, 3);\r\n            }\r\n            else {\r\n                // Continue wandering with a subtle, random direction:\r\n                const awayFunc = this.grid.getUntAwayFrom.bind(this.grid, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _prevCoord));\r\n                return this.grid.getRandomCoordAround(awayFunc(awayFunc(this.coord).coord).coord, 1);\r\n            }\r\n        }\r\n        let closestFht = undefined;\r\n        let closestFhtDistance = Infinity;\r\n        for (const fht of this.game.freeHealthTiles) {\r\n            const distance = this.grid.minMovesFromTo(this.coord, fht.coord);\r\n            if (distance < closestFhtDistance) {\r\n                closestFht = fht;\r\n                closestFhtDistance = distance;\r\n            }\r\n        }\r\n        return closestFht.coord;\r\n    }\r\n    getNextMoveType() {\r\n        return _ArtificialPlayer__WEBPACK_IMPORTED_MODULE_0__.Player.MoveType.NORMAL;\r\n    }\r\n    computeNextMovementTimer() {\r\n        return 1000 / this.behaviour.keyPressesPerSecond;\r\n    }\r\n}\r\n_prevCoord = new WeakMap();\r\n(function (Chaser) {\r\n    let Behaviour;\r\n    (function (Behaviour) {\r\n        Behaviour.DEFAULT = Object.freeze({\r\n            fearDistance: 5,\r\n            bloodThirstDistance: 7,\r\n            healthReserve: 3.0,\r\n            keyPressesPerSecond: 2.0,\r\n            wanderingAimlessness: 0.2,\r\n        });\r\n    })(Behaviour = Chaser.Behaviour || (Chaser.Behaviour = {}));\r\n})(Chaser || (Chaser = {}));\r\n_ArtificialPlayer__WEBPACK_IMPORTED_MODULE_0__.JsUtils.protoNoEnum(Chaser, [\"_afterAllPlayersConstruction\"]);\r\nObject.freeze(Chaser);\r\nObject.freeze(Chaser.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYmFzZS9nYW1lL3BsYXllci9hcnRpZmljaWFscy9DaGFzZXIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbmFrZXkzLy4vc3JjL2Jhc2UvZ2FtZS9wbGF5ZXIvYXJ0aWZpY2lhbHMvQ2hhc2VyLnRzPzg2YTciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9wcmV2Q29vcmQ7XHJcbmltcG9ydCB7IF9fY2xhc3NQcml2YXRlRmllbGRHZXQsIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgSnNVdGlscywgUGxheWVyLCBBcnRpZmljaWFsUGxheWVyLCB9IGZyb20gXCIuLi9BcnRpZmljaWFsUGxheWVyXCI7XHJcbi8qKlxyXG4gKlxyXG4gKiBAZXh0ZW5kcyBBcnRpZmljaWFsUGxheWVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hhc2VyIGV4dGVuZHMgQXJ0aWZpY2lhbFBsYXllciB7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkZXNjKSB7XHJcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGVzYyk7XHJcbiAgICAgICAgX3ByZXZDb29yZC5zZXQodGhpcywgdm9pZCAwKTtcclxuICAgICAgICB0aGlzLmJlaGF2aW91ciA9IE9iamVjdC5mcmVlemUoT2JqZWN0LmFzc2lnbih7fSwgQ2hhc2VyLkJlaGF2aW91ci5ERUZBVUxULCBkZXNjLmZhbWlseUFyZ3MpKTtcclxuICAgICAgICB0aGlzLmdyaWQgPSB0aGlzLmdhbWUuZ3JpZDtcclxuICAgIH1cclxuICAgIF9hZnRlckFsbFBsYXllcnNDb25zdHJ1Y3Rpb24oKSB7XHJcbiAgICAgICAgc3VwZXIuX2FmdGVyQWxsUGxheWVyc0NvbnN0cnVjdGlvbigpO1xyXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gY2FzdCBvZmYgcmVhZC1vbmx5LW5lc3MgYmVsb3cuXHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciA6IFJPPVxyXG4gICAgICAgIHRoaXMudGhyZWF0UHJveGltaXR5ID0gdGhpcy5nYW1lLnRlYW1zXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHRlYW0pID0+IHRlYW0uaWQgIT09IHRoaXMudGVhbUlkKVxyXG4gICAgICAgICAgICAuZmxhdE1hcCgodGVhbSkgPT4gdGVhbS5tZW1iZXJzKTtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIDogUk89XHJcbiAgICAgICAgdGhpcy50YXJnZXRQcm94aW1pdHkgPSBbLi4udGhpcy50aHJlYXRQcm94aW1pdHldO1xyXG4gICAgICAgIEpzVXRpbHMucHJvcE5vV3JpdGUodGhpcywgW1xyXG4gICAgICAgICAgICBcInRocmVhdFByb3hpbWl0eVwiLCBcInRhcmdldFByb3hpbWl0eVwiLFxyXG4gICAgICAgICAgICBcImJlaGF2aW91clwiLCBcImdyaWRcIixcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIHJlc2V0KHNwYXduVGlsZSkge1xyXG4gICAgICAgIHN1cGVyLnJlc2V0KHNwYXduVGlsZSk7XHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfcHJldkNvb3JkLCB0aGlzLmNvb3JkKTtcclxuICAgIH1cclxuICAgIG1vdmVUbyhkZXN0KSB7XHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfcHJldkNvb3JkLCB0aGlzLmNvb3JkKTtcclxuICAgICAgICBzdXBlci5tb3ZlVG8oZGVzdCk7XHJcbiAgICB9XHJcbiAgICBjb21wdXRlRGVzaXJlZERlc3QoKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYW55b25lIHRvIHJ1biBhd2F5IGZyb206XHJcbiAgICAgICAgdGhpcy50aHJlYXRQcm94aW1pdHkuc29ydCgocGEsIHBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQubWluTW92ZXNGcm9tVG8ocGEuY29vcmQsIHRoaXMuY29vcmQpXHJcbiAgICAgICAgICAgICAgICAtIHRoaXMuZ3JpZC5taW5Nb3Zlc0Zyb21UbyhwYi5jb29yZCwgdGhpcy5jb29yZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yIChjb25zdCB0aHJlYXRQIG9mIHRoaXMudGhyZWF0UHJveGltaXR5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWQubWluTW92ZXNGcm9tVG8odGhyZWF0UC5jb29yZCwgdGhpcy5jb29yZClcclxuICAgICAgICAgICAgICAgID4gdGhpcy5iZWhhdmlvdXIuZmVhckRpc3RhbmNlKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGlmICh0aHJlYXRQLnN0YXR1cy5pc0Rvd25lZClcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAodGhyZWF0UC5zdGF0dXMuaGVhbHRoID4gdGhpcy5zdGF0dXMuaGVhbHRoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPLmRlc2lnbiBTb21ldGhpbmcgdGhhdCBhdm9pZHMgZ2V0dGluZyBjb3JuZXJlZC5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQuZ2V0VW50QXdheUZyb20odGhyZWF0UC5jb29yZCwgdGhpcy5jb29yZCkuY29vcmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm9ib2R5IHRvIHJ1biBhd2F5IGZyb20sXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYW55b25lIHdlIHdhbnQgdG8gYXR0YWNrOlxyXG4gICAgICAgIHRoaXMudGFyZ2V0UHJveGltaXR5LnNvcnQoKHBhLCBwYikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLm1pbk1vdmVzRnJvbVRvKHRoaXMuY29vcmQsIHBhLmNvb3JkKVxyXG4gICAgICAgICAgICAgICAgLSB0aGlzLmdyaWQubWluTW92ZXNGcm9tVG8odGhpcy5jb29yZCwgcGIuY29vcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXR1cy5pc0Rvd25lZCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhcmdldFAgb2YgdGhpcy50YXJnZXRQcm94aW1pdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQubWluTW92ZXNGcm9tVG8odGhpcy5jb29yZCwgdGFyZ2V0UC5jb29yZClcclxuICAgICAgICAgICAgICAgICAgICA+IHRoaXMuYmVoYXZpb3VyLmJsb29kVGhpcnN0RGlzdGFuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0UC5zdGF0dXMuaGVhbHRoIDwgdGhpcy5zdGF0dXMuaGVhbHRoIC0gdGhpcy5iZWhhdmlvdXIuaGVhbHRoUmVzZXJ2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRQLmNvb3JkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vYm9keSB3ZSB3YW50IHRvIGNoYXNlIGFmdGVyIHRvIGF0dGFjayxcclxuICAgICAgICAvLyBIZWFkIHRvd2FyZCB0aGUgbmVhcmVzdCBmcmVlIGhlYWx0aCBpZiBpdCBleGlzdHMuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5mcmVlSGVhbHRoVGlsZXMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBObyB0aWxlcyBjbG9zZSBieS4gV2FuZGVyIGFyb3VuZDpcclxuICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCB0aGlzLmJlaGF2aW91ci53YW5kZXJpbmdBaW1sZXNzbmVzcykge1xyXG4gICAgICAgICAgICAgICAgLy8gQmlnIGRpcmVjdGlvbiBjaGFuZ2U6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmdldFJhbmRvbUNvb3JkQXJvdW5kKHRoaXMuY29vcmQsIDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gQ29udGludWUgd2FuZGVyaW5nIHdpdGggYSBzdWJ0bGUsIHJhbmRvbSBkaXJlY3Rpb246XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhd2F5RnVuYyA9IHRoaXMuZ3JpZC5nZXRVbnRBd2F5RnJvbS5iaW5kKHRoaXMuZ3JpZCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfcHJldkNvb3JkKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmdldFJhbmRvbUNvb3JkQXJvdW5kKGF3YXlGdW5jKGF3YXlGdW5jKHRoaXMuY29vcmQpLmNvb3JkKS5jb29yZCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNsb3Nlc3RGaHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGNsb3Nlc3RGaHREaXN0YW5jZSA9IEluZmluaXR5O1xyXG4gICAgICAgIGZvciAoY29uc3QgZmh0IG9mIHRoaXMuZ2FtZS5mcmVlSGVhbHRoVGlsZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSB0aGlzLmdyaWQubWluTW92ZXNGcm9tVG8odGhpcy5jb29yZCwgZmh0LmNvb3JkKTtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgY2xvc2VzdEZodERpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZXN0Rmh0ID0gZmh0O1xyXG4gICAgICAgICAgICAgICAgY2xvc2VzdEZodERpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RGaHQuY29vcmQ7XHJcbiAgICB9XHJcbiAgICBnZXROZXh0TW92ZVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsYXllci5Nb3ZlVHlwZS5OT1JNQUw7XHJcbiAgICB9XHJcbiAgICBjb21wdXRlTmV4dE1vdmVtZW50VGltZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIDEwMDAgLyB0aGlzLmJlaGF2aW91ci5rZXlQcmVzc2VzUGVyU2Vjb25kO1xyXG4gICAgfVxyXG59XHJcbl9wcmV2Q29vcmQgPSBuZXcgV2Vha01hcCgpO1xyXG4oZnVuY3Rpb24gKENoYXNlcikge1xyXG4gICAgbGV0IEJlaGF2aW91cjtcclxuICAgIChmdW5jdGlvbiAoQmVoYXZpb3VyKSB7XHJcbiAgICAgICAgQmVoYXZpb3VyLkRFRkFVTFQgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgZmVhckRpc3RhbmNlOiA1LFxyXG4gICAgICAgICAgICBibG9vZFRoaXJzdERpc3RhbmNlOiA3LFxyXG4gICAgICAgICAgICBoZWFsdGhSZXNlcnZlOiAzLjAsXHJcbiAgICAgICAgICAgIGtleVByZXNzZXNQZXJTZWNvbmQ6IDIuMCxcclxuICAgICAgICAgICAgd2FuZGVyaW5nQWltbGVzc25lc3M6IDAuMixcclxuICAgICAgICB9KTtcclxuICAgIH0pKEJlaGF2aW91ciA9IENoYXNlci5CZWhhdmlvdXIgfHwgKENoYXNlci5CZWhhdmlvdXIgPSB7fSkpO1xyXG59KShDaGFzZXIgfHwgKENoYXNlciA9IHt9KSk7XHJcbkpzVXRpbHMucHJvdG9Ob0VudW0oQ2hhc2VyLCBbXCJfYWZ0ZXJBbGxQbGF5ZXJzQ29uc3RydWN0aW9uXCJdKTtcclxuT2JqZWN0LmZyZWV6ZShDaGFzZXIpO1xyXG5PYmplY3QuZnJlZXplKENoYXNlci5wcm90b3R5cGUpO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/base/game/player/artificials/Chaser.ts\n");

/***/ }),

/***/ "./src/base/lang/Lang.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Lang\": () => /* binding */ Lang\n/* harmony export */ });\n/* harmony import */ var defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/defs/JsUtils.ts\");\n/* harmony import */ var defs_TypeDefs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/defs/TypeDefs.ts\");\n/* harmony import */ var lang_LangSeqTreeNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/base/lang/LangSeqTreeNode.ts\");\n\r\n\r\n\r\n/**\r\n * A language is a map from a collection of unique characters to\r\n * corresponding key-sequences. the key-sequences may be non-unique.\r\n * (try searching up \"Chinese riddle where each syllable is pronounced\r\n * 'shi'\"). A character may have more than one corresponding sequence,\r\n * representing alternate \"spellings\" (ways of typing it).\r\n *\r\n * ### From Typeable Sequences to Written Characters\r\n *\r\n * To the game internals, the reverse thinking is more important: As\r\n * a map from typeable key-sequences to sets of language-unique written\r\n * characters (no character is mapped by multiple key-sequences). We\r\n * do not require support for retrieving the sequence corresponding to\r\n * a written character.\r\n *\r\n * ### Implementation Guide\r\n *\r\n * See the readme in [the implementations folder](./impl/readme.md)\r\n * for a guide on writing implementations of this class.\r\n */\r\nclass Lang extends defs_TypeDefs__WEBPACK_IMPORTED_MODULE_1__.Lang {\r\n    /**\r\n     * @param frontendDescId -\r\n     *\r\n     * @param forwardDict\r\n     * Weights are _relative_ values handled by tree nodes, which\r\n     * require the provided values to all be strictly positive values.\r\n     * Ie. They do not need to sum up to any specific value.\r\n     *\r\n     * @param weightExaggeration -\r\n     */\r\n    constructor(frontendDescId, forwardDict, weightExaggeration) {\r\n        super();\r\n        this.frontendDesc = Lang.GET_FRONTEND_DESC_BY_ID(frontendDescId);\r\n        this.treeMap = lang_LangSeqTreeNode__WEBPACK_IMPORTED_MODULE_2__.LangSeqTree.ParentNode.CREATE_TREE_MAP(forwardDict, weightExaggeration);\r\n        this.leafNodes = this.treeMap.getLeafNodes();\r\n        defs_JsUtils__WEBPACK_IMPORTED_MODULE_0__.JsUtils.propNoWrite(this, [\r\n            \"frontendDesc\", \"treeMap\", \"leafNodes\",\r\n        ]);\r\n        if (this.leafNodes.length !== this.frontendDesc.numLeaves) {\r\n            throw new Error(`maintenance required: the frontend constant`\r\n                + ` for the language \\\"${this.frontendDesc.id}\\\" needs to`\r\n                + ` be updated to the correct, computed value, which is`\r\n                + ` \\`${this.leafNodes.length}\\`.`);\r\n        }\r\n    }\r\n    get numLeaves() { return this.leafNodes.length; }\r\n    /**\r\n     */\r\n    reset() {\r\n        this.treeMap.reset();\r\n        // The below method of shuffling is not used because its effects\r\n        // on state are weaker / less desirable than those achieved by\r\n        // the currently-used method found in ChildNode.reset, whose\r\n        // drawback is that it is more performance costly.\r\n        // Shuffle the initial leaf order:\r\n        // this.leafNodes.sort((a,b) => Math.random() - 0.5);\r\n    }\r\n    /**\r\n     * @returns\r\n     * A random char in this language whose corresponding sequence is\r\n     * not a prefix of any `Lang.Seq` in `avoid`, and vice versa. Ie.\r\n     * They may share a common prefix as long as they are both longer\r\n     * than the shared prefix.\r\n     *\r\n     * @description\r\n     * This method is called to shuffle the char-seq pair at some tile\r\n     * A. `avoid` should contain the lang-sequences from all tiles\r\n     * reachable by a player occupying any tile B from which they can\r\n     * also reach A (except for A itself).\r\n     *\r\n     * @param avoid\r\n     * A collection of `Lang.Seq`s to avoid conflicts with when choosing\r\n     * a `Lang.Char` to return. Is allowed to contain empty strings,\r\n     * which will be ignored as if those entries did not exist.\r\n     *\r\n     * @requires\r\n     * In order for this language to satisfy these constraints, it must\r\n     * be true that the number of leaf nodes in its tree-structure must\r\n     * provably be greater than the number of non-empty entries in\r\n     * `avoid` for all expected combinations of internal state and\r\n     * passed-arguments under which it could be called.\r\n     */\r\n    getNonConflictingChar(avoid) {\r\n        // Wording the spec closer to this implementation: We must find\r\n        // characters from nodes that are not descendants or ancestors\r\n        // of nodes for sequences to avoid. We can be sure that none of\r\n        // the ancestors or descendants of avoid-nodes are avoid-nodes.\r\n        // Start by sorting according to the desired balancing scheme:\r\n        this.leafNodes.sort(lang_LangSeqTreeNode__WEBPACK_IMPORTED_MODULE_2__.LangSeqTree.ParentNode.LEAF_CMP);\r\n        let nodeToHit = undefined;\r\n        for (const leaf of this.leafNodes) {\r\n            // Take the next leaf node (don't remove it!), and if none of\r\n            // its parents are avoid-nodes, then, from the set of nodes\r\n            // including the leaf node and all its parents (minus the root),\r\n            // choose the node with the least actual/personal hit-count.\r\n            const upstreamNodes = leaf.andNonRootParents();\r\n            for (let i = 0; i < upstreamNodes.length; i++) {\r\n                const conflictSeq = avoid.find((avoidSeq) => {\r\n                    return avoidSeq.startsWith(upstreamNodes[i].sequence);\r\n                });\r\n                if (conflictSeq) {\r\n                    if (conflictSeq === upstreamNodes[i].sequence) {\r\n                        // Cannot use anything on this upstream path because\r\n                        // an avoid-node is directly inside it.\r\n                        upstreamNodes.length = 0;\r\n                    }\r\n                    else {\r\n                        // Found a node on an upstream path of an avoid-node.\r\n                        // Doesn't stop us from using what we've found so far.\r\n                        upstreamNodes.splice(i);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (upstreamNodes.length) {\r\n                // Found a non-conflicting upstream node.\r\n                // Find the node with the lowest personal hit-count:\r\n                nodeToHit = upstreamNodes[0];\r\n                for (const node of upstreamNodes) {\r\n                    if (node.personalWeightedHitCount < nodeToHit.personalWeightedHitCount) {\r\n                        nodeToHit = node;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (nodeToHit === undefined) {\r\n            // Should never reach here because there is a check in the\r\n            // constructor for this invariant.\r\n            throw new Error(`Invariants guaranteeing that a LangSeq can`\r\n                + `always be shuffled-in were not met.`);\r\n        }\r\n        return nodeToHit.chooseOnePair();\r\n    }\r\n    /**\r\n     */\r\n    simpleView() {\r\n        return Object.assign(Object.create(null), {\r\n            id: this.frontendDesc.id,\r\n            displayName: this.frontendDesc.displayName,\r\n            root: this.treeMap.simpleView(),\r\n            numLeaves: this.leafNodes.length,\r\n        });\r\n    }\r\n}\r\n(function (Lang) {\r\n    ;\r\n})(Lang || (Lang = {}));\r\nObject.freeze(Lang);\r\nObject.freeze(Lang.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/base/lang/Lang.ts\n");

/***/ }),

/***/ "./src/base/lang/LangSeqTreeNode.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LangSeqTree\": () => /* binding */ LangSeqTree\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var defs_TypeDefs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/defs/TypeDefs.ts\");\n\r\n\r\n/**\r\n *\r\n */\r\nvar LangSeqTree;\r\n(function (LangSeqTree) {\r\n    var _parent, _characters;\r\n    /**\r\n     *\r\n     */\r\n    class ParentNode {\r\n        constructor() {\r\n            this.children = [];\r\n        }\r\n        reset() {\r\n            this.inheritingWeightedHitCount = 0.000;\r\n            // Recursively reset (from leaves first to root last):\r\n            // We must go in such an order so that our random hit\r\n            // seeds will be properly inherited (and not wrongly\r\n            // cleared).\r\n            this.children.forEach((child) => child.reset());\r\n        }\r\n        _finalize() {\r\n            Object.freeze(this.children);\r\n            this.children.forEach((child) => child._finalize());\r\n            // The above cast to ParentNode tells to the TypeScript\r\n            // compiler that the override has protected access to us.\r\n        }\r\n        /**\r\n         *\r\n         * @param seq The typeable sequence corresponding to entries of `chars`.\r\n         * @param chars A collection of unique characters in a written language.\r\n         */\r\n        _addCharMapping(seq, chars) {\r\n            if (!(defs_TypeDefs__WEBPACK_IMPORTED_MODULE_0__.Lang.Seq.REGEXP.test(seq))) { // TODO.build disable during development\r\n                // If this errs, and the offending character is one that can\r\n                // be easily entered on a generic keyboard, don't be afraid\r\n                // to just add it to the regexp.\r\n                throw new RangeError(`Mapping-sequence \\\"${seq}\\\" did not match the`\r\n                    + ` required regular expression \\\"${defs_TypeDefs__WEBPACK_IMPORTED_MODULE_0__.Lang.Seq.REGEXP.source}\\\".`);\r\n            }\r\n            if (chars.length === 0) {\r\n                // Must not make a mapping without written characters.\r\n                throw new RangeError(\"never\");\r\n            }\r\n            let node = this;\r\n            {\r\n                let childNode = this;\r\n                while (childNode) {\r\n                    node = childNode;\r\n                    childNode = childNode.children.find((child) => seq.startsWith(child.sequence));\r\n                }\r\n            }\r\n            if (node.sequence === seq) { // TODO.build disable during development\r\n                // This should never happen.\r\n                throw new Error(`Mappings for all written-characters with a common`\r\n                    + `corresponding typeable-sequence should be registered together,`\r\n                    + `but an existing mapping for the sequence \\\"${seq}\\\" was found.`);\r\n            }\r\n            node.children.push(new ChildNode(node, seq, chars));\r\n        }\r\n        getLeafNodes() {\r\n            const leafNodes = [];\r\n            this._recursiveGetLeafNodes(leafNodes);\r\n            return leafNodes;\r\n        }\r\n        _recursiveGetLeafNodes(leafNodes) {\r\n            if (this.children.length) {\r\n                this.children.forEach((child) => {\r\n                    child._recursiveGetLeafNodes(leafNodes);\r\n                });\r\n            }\r\n            else {\r\n                leafNodes.push(this);\r\n            }\r\n        }\r\n        simpleView() {\r\n            return this.children;\r\n        }\r\n        /**\r\n         * @returns The root node of a new tree map.\r\n         */\r\n        static CREATE_TREE_MAP(forwardDict, weightScaling) {\r\n            const averageWeight = Object.values(forwardDict).reduce((sum, next) => sum += next.weight, 0);\r\n            const adjustedWeight = (function () {\r\n                return (weightScaling === 0) ? (originalWeight) => 1\r\n                    : (weightScaling === 1) ? (originalWeight) => originalWeight\r\n                        : (originalWeight) => Math.pow(originalWeight / averageWeight, weightScaling);\r\n            })();\r\n            // Reverse the map:\r\n            const reverseDict = new Map();\r\n            for (const char in forwardDict) {\r\n                const seq = forwardDict[char].seq;\r\n                const weightedChar = new WeightedLangChar(char, adjustedWeight(forwardDict[char].weight));\r\n                const charArray = reverseDict.get(seq);\r\n                if (charArray) {\r\n                    // The entry was already made:\r\n                    charArray.push(weightedChar);\r\n                }\r\n                else {\r\n                    reverseDict.set(seq, [weightedChar]);\r\n                }\r\n            }\r\n            // Add mappings in ascending order of sequence length:\r\n            // (this is so that no merging of branches needs to be done)\r\n            const rootNode = new ParentNode();\r\n            Array.from(reverseDict)\r\n                //.sort((mappingA, mappingB) => mappingA[0].localeCompare(mappingB[0]))\r\n                .sort((mappingA, mappingB) => mappingA[0].length - mappingB[0].length)\r\n                .forEach((mapping) => {\r\n                rootNode._addCharMapping(...mapping);\r\n            });\r\n            rootNode._finalize();\r\n            return rootNode;\r\n        }\r\n    }\r\n    ParentNode.LEAF_CMP = (a, b) => {\r\n        return a.inheritingWeightedHitCount - b.inheritingWeightedHitCount;\r\n    };\r\n    LangSeqTree.ParentNode = ParentNode;\r\n    Object.freeze(ParentNode);\r\n    Object.freeze(ParentNode.prototype);\r\n    /**\r\n     * No `LangSeqTreeNode`s mapped in the `children` field have an empty\r\n     * `characters` collection (with the exception of the root node). The\r\n     * root node should have a falsy parent, and the `empty string` as its\r\n     * `sequence` field, with a correspondingly empty `characters` collection.\r\n     *\r\n     * All non-root nodes have a `sequence` that is prefixed by their parent's\r\n     * `sequence`, and a non-empty `characters` collection.\r\n     *\r\n     * The enclosing {@link Lang} object has no concept of `LangChar` weights.\r\n     * All it has is the interfaces provided by the hit-count getter methods.\r\n     */\r\n    class ChildNode extends ParentNode {\r\n        constructor(parent, sequence, characters) {\r\n            super();\r\n            _parent.set(this, void 0);\r\n            _characters.set(this, void 0);\r\n            this.sequence = sequence;\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldSet)(this, _characters, characters);\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldSet)(this, _parent, parent);\r\n        }\r\n        _finalize() {\r\n            Object.freeze((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _characters));\r\n            super._finalize();\r\n        }\r\n        reset() {\r\n            super.reset();\r\n            (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _characters).forEach((char) => {\r\n                char.reset();\r\n                this.incrementNumHits(char, Math.random() * defs_TypeDefs__WEBPACK_IMPORTED_MODULE_0__.Lang.CHAR_HIT_COUNT_SEED_CEILING);\r\n            });\r\n        }\r\n        /**\r\n         * Incrementing the hit-count makes this node less likely to be\r\n         * used for a shuffle-in. Shuffle-in option searching is easy to\r\n         * taking the viewpoint of leaf-nodes, so this implementation is\r\n         * geared toward indicating hit-count through leaf-nodes, hence\r\n         * the bubble-down of hit-count incrementation.\r\n         *\r\n         * @returns A character / sequence pair from this node that has\r\n         *      been selected the least according to the specified scheme.\r\n         */\r\n        chooseOnePair() {\r\n            const weightedChar = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _characters).slice(0)\r\n                .sort(WeightedLangChar.CMP)\r\n                .shift();\r\n            const pair = {\r\n                char: weightedChar.char,\r\n                seq: this.sequence,\r\n            };\r\n            this.incrementNumHits(weightedChar);\r\n            return pair;\r\n        }\r\n        incrementNumHits(wCharToHit, numTimes = 1) {\r\n            wCharToHit._incrementNumHits();\r\n            this._recursiveIncrementNumHits(wCharToHit.weightInv * numTimes);\r\n        }\r\n        _recursiveIncrementNumHits(weightInv) {\r\n            this.inheritingWeightedHitCount += weightInv;\r\n            this.children.forEach((child) => child._recursiveIncrementNumHits(weightInv));\r\n        }\r\n        get personalWeightedHitCount() {\r\n            return this.inheritingWeightedHitCount\r\n                - (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _parent).inheritingWeightedHitCount;\r\n            // The above cast is only to allow us to access a\r\n            // protected property from the parent in this subclass.\r\n        }\r\n        andNonRootParents() {\r\n            const upstreamNodes = [];\r\n            for (let node = this; node instanceof ChildNode; node = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(node, _parent)) {\r\n                upstreamNodes.push(node);\r\n            }\r\n            return upstreamNodes;\r\n        }\r\n        /**\r\n         * For debugging purposes.\r\n         */\r\n        simpleView() {\r\n            let chars = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__classPrivateFieldGet)(this, _characters).map((char) => char.simpleView());\r\n            return Object.assign(Object.create(null), {\r\n                seq: this.sequence,\r\n                chars: (chars.length === 1) ? chars[0] : chars,\r\n                kids: this.children.map((child) => child.simpleView()),\r\n            });\r\n        }\r\n    }\r\n    _parent = new WeakMap(), _characters = new WeakMap();\r\n    ChildNode.PATH_CMP = (a, b) => {\r\n        return a.personalWeightedHitCount - b.personalWeightedHitCount;\r\n    };\r\n    LangSeqTree.ChildNode = ChildNode;\r\n    Object.freeze(ChildNode);\r\n    Object.freeze(ChildNode.prototype);\r\n})(LangSeqTree || (LangSeqTree = {}));\r\nObject.freeze(LangSeqTree);\r\n/**\r\n * Has no concept of an associated typeable sequence. Used to associate\r\n * a written character to a relative frequency of occurrence in samples\r\n * of writing, and to keep a counter for how many times this character\r\n * has been shuffled-in in the current game session.\r\n *\r\n * Not exported.\r\n */\r\nclass WeightedLangChar {\r\n    constructor(char, weight) {\r\n        if (weight <= 0) { // TODO.build disable during development\r\n            throw new RangeError(`All weights must be positive, but we`\r\n                + ` were passed the value \\\"${weight}\\\" for the character`\r\n                + ` \\\"${char}\\\".`);\r\n        }\r\n        this.char = char;\r\n        this.weightInv = 1.000 / weight;\r\n        // The above choice of a numerator is not behaviourally significant.\r\n        // All that is required is that all single-mappings in a `Lang` use\r\n        // a consistent value.\r\n    }\r\n    reset() {\r\n        this.hitCount = 0;\r\n        this.weightedHitCount = 0.000;\r\n    }\r\n    _incrementNumHits() {\r\n        this.hitCount += 1;\r\n        this.weightedHitCount += this.weightInv;\r\n    }\r\n    simpleView() {\r\n        return Object.assign(Object.create(null), {\r\n            char: this.char,\r\n            hits: this.hitCount,\r\n        });\r\n    }\r\n}\r\n/**\r\n * @param a -\r\n * @param b -\r\n * @returns -\r\n */\r\nWeightedLangChar.CMP = (a, b) => {\r\n    return a.weightedHitCount - b.weightedHitCount;\r\n};\r\n;\r\nObject.freeze(WeightedLangChar);\r\nObject.freeze(WeightedLangChar.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/base/lang/LangSeqTreeNode.ts\n");

/***/ }),

/***/ "./src/client/game/OfflineGame.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OfflineGame\": () => /* binding */ OfflineGame\n/* harmony export */ });\n/* harmony import */ var _BrowserGame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/client/game/BrowserGame.ts\");\n/* harmony import */ var game_gameparts_GamepartManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/base/game/gameparts/GamepartManager.ts\");\n\r\n\r\n/**\r\n *\r\n */\r\nclass OfflineGame extends game_gameparts_GamepartManager__WEBPACK_IMPORTED_MODULE_1__.GamepartManager {\r\n    /**\r\n     * @param gameDesc -\r\n     */\r\n    constructor(onGameBecomeOver, gameDesc) {\r\n        super(_BrowserGame__WEBPACK_IMPORTED_MODULE_0__.Game.Type.OFFLINE, {\r\n            onGameBecomeOver,\r\n            tileClass: _BrowserGame__WEBPACK_IMPORTED_MODULE_0__.VisibleTile,\r\n            playerStatusCtor: _BrowserGame__WEBPACK_IMPORTED_MODULE_0__.VisiblePlayerStatus,\r\n        }, gameDesc);\r\n        this._ctorBrowserGame();\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    setTimeout(callback, millis, ...args) {\r\n        return setTimeout(callback, millis, args);\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    cancelTimeout(handle) {\r\n        clearTimeout(handle);\r\n    }\r\n}\r\n;\r\n_BrowserGame__WEBPACK_IMPORTED_MODULE_0__.JsUtils.applyMixins(OfflineGame, [_BrowserGame__WEBPACK_IMPORTED_MODULE_0__.BrowserGameMixin]);\r\nObject.freeze(OfflineGame);\r\nObject.freeze(OfflineGame.prototype);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2xpZW50L2dhbWUvT2ZmbGluZUdhbWUudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbmFrZXkzLy4vc3JjL2NsaWVudC9nYW1lL09mZmxpbmVHYW1lLnRzPzkzM2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNVdGlscywgR2FtZSwgVmlzaWJsZVRpbGUsIEJyb3dzZXJHYW1lTWl4aW4sIFxyXG4vLyBQbGF5ZXIsIE9wZXJhdG9yUGxheWVyLFxyXG5WaXNpYmxlUGxheWVyU3RhdHVzLCB9IGZyb20gXCIuL0Jyb3dzZXJHYW1lXCI7XHJcbmltcG9ydCB7IEdhbWVwYXJ0TWFuYWdlciB9IGZyb20gXCJnYW1lL2dhbWVwYXJ0cy9HYW1lcGFydE1hbmFnZXJcIjtcclxuLyoqXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT2ZmbGluZUdhbWUgZXh0ZW5kcyBHYW1lcGFydE1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZ2FtZURlc2MgLVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvbkdhbWVCZWNvbWVPdmVyLCBnYW1lRGVzYykge1xyXG4gICAgICAgIHN1cGVyKEdhbWUuVHlwZS5PRkZMSU5FLCB7XHJcbiAgICAgICAgICAgIG9uR2FtZUJlY29tZU92ZXIsXHJcbiAgICAgICAgICAgIHRpbGVDbGFzczogVmlzaWJsZVRpbGUsXHJcbiAgICAgICAgICAgIHBsYXllclN0YXR1c0N0b3I6IFZpc2libGVQbGF5ZXJTdGF0dXMsXHJcbiAgICAgICAgfSwgZ2FtZURlc2MpO1xyXG4gICAgICAgIHRoaXMuX2N0b3JCcm93c2VyR2FtZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgbWlsbGlzLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIG1pbGxpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBvdmVycmlkZVxyXG4gICAgICovXHJcbiAgICBjYW5jZWxUaW1lb3V0KGhhbmRsZSkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xyXG4gICAgfVxyXG59XHJcbjtcclxuSnNVdGlscy5hcHBseU1peGlucyhPZmZsaW5lR2FtZSwgW0Jyb3dzZXJHYW1lTWl4aW5dKTtcclxuT2JqZWN0LmZyZWV6ZShPZmZsaW5lR2FtZSk7XHJcbk9iamVjdC5mcmVlemUoT2ZmbGluZUdhbWUucHJvdG90eXBlKTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/client/game/OfflineGame.ts\n");

/***/ }),

/***/ "./src/base/lang/impl lazy recursive ^\\.\\/.*\\.ts$":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Emote.ts": [
		"./src/base/lang/impl/Emote.ts",
		"lang/Emote-ts"
	],
	"./English.ts": [
		"./src/base/lang/impl/English.ts",
		"lang/English-ts"
	],
	"./Japanese.ts": [
		"./src/base/lang/impl/Japanese.ts",
		"lang/Japanese-ts"
	],
	"./Korean.ts": [
		"./src/base/lang/impl/Korean.ts",
		"lang/Korean-ts"
	],
	"./Morse.ts": [
		"./src/base/lang/impl/Morse.ts",
		"lang/Morse-ts"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => Object.keys(map);
webpackAsyncContext.id = "./src/base/lang/impl lazy recursive ^\\.\\/.*\\.ts$";
module.exports = webpackAsyncContext;

/***/ })

}]);
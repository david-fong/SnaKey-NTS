
/* The only way I'm going to stay sane managing
this is by giving it its own file.

Pay special attention to the containment property
specifications made here, which help the browser
avoid performing unnecessary reflow calculations
over the whole grid every time a player moves.
Turn on "Paint Flashing" in a browser inspector. */

.game-grid-impl-body            { z-index:   0; } /* ROOT */
.player__face[data-face="me"]   { z-index:  21; }
.player__spotlight-long         { z-index:  20; } /* SPOTLIGHT (long-range) */
.tile__seq                      { z-index:  13; }
.player__downed-overlay         { z-index:  12; }
.player__face                   { z-index:  11; }
.tile[data-health] .tile__char  { z-index:  11; }
.player__spotlight-short        { z-index:  10; } /* SPOTLIGHT (short-range) */

.game-grid-kbd-dc               { z-index:   1; }
.game-grid-pause-overlay        { z-index:   2; }


.game-grid {
    /* Since this is given the `center-contents` and
    `stack-contents` classes, it defaults to taking
    up no space (its children all have their position
    property set to `absolute`). We rectify this case
    by giving `.game-grid-impl-body` `position: static`. */
    contain:        content;
    height:         100%;
    /* width:          fit-content; */
    display:        grid;
    align-content:  center;

    /* This would make it impossible to scroll if it
    covers the screen like it might in our vertical
    layout. That's why it's commented out right now. */
    /* overscroll-behavior: contain; */
}
.game-grid,
.game-grid-scroll-outer {
    position:       relative;
}
.grid-player-intersection-root {
    position:       fixed;
    z-index:        100;
    pointer-events: none;
    padding:        20%;
}

/*  */
.game-grid-scroll-outer {
    contain:        style; /* Do not use contain. */
    overflow:       auto auto;
    /* overflow: overlay overlay; */
    scroll-snap-type: both;
    scrollbar-width: none;
    box-sizing:     border-box;
    border:         5px double var(--colour-tileBd);
    border-radius:  15px;
}
.game-grid-scroll-outer::-webkit-scrollbar {
    width:  0px;
    height: 0px;
}

.game-grid-impl-body {
    contain:        content;
    position:       static;
    color:          var(--colour-tileFg);
    height:         fit-content;
    width:          fit-content;
    padding:        0.4em;
}

.game-grid-kbd-dc,
.game-grid-pause-overlay {
    cursor:         pointer;
    position:       fixed;
    padding:        3em;
    border-radius:  inherit;
    color:          white;
    text-shadow:    0em 0.01em  0.5em black;
    visibility:     hidden;
}
.game-grid-kbd-dc {
    background-color: #00000020;
}
.game-grid-pause-overlay {
    background-color: #00000040;
}

@media screen {
    .game-grid:focus {
        outline:    none;
    }
    .game-grid[data-game-state="paused"] .game-grid-pause-overlay,
    .game-grid:not([data-game-state="paused"]):not(:focus) .game-grid-kbd-dc {
        visibility: visible;
    }
}


.tile {
    /* DO NOT create a new stacking context, which
    breaks the spotlight display. */
    pointer-events: none;
    contain:        size style;
}
.tile * {
    height: 100%; width: 100%;
}
.tile__pointer-hitbox {
    pointer-events: initial;
    contain:        strict;
    top: 40%; left: 40%;
    /* border-color: black; */
}

.tile__char, .tile__seq, .player__face {
    box-sizing: border-box;
    border: 0.14em solid transparent;
    border-radius: 0.35em;
}

.tile__char {
    contain:        strict;
    background-color: var(--colour-tileBg);
    overflow:       hidden hidden;
    display:        grid;
    align-items:    center;
}
.tile__char > * {
    height:         initial;
}
.tile[data-health] .tile__char {
    border-color:     var(--colour-tileBd);
    color:            var(--colour-healthFg);
    background-color: var(--colour-healthBg);

    transition-property: color, background-color;
    transition-duration: 0.5s;
    transition-timing-function: ease-in;
}

.tile__seq {
    contain:        content;
    padding:    0ch  0.4ch;
    /* bottom:     0%; */
    min-height: 100%; height: max-content;
    min-width:  100%; width:  max-content;
    color:          white;
    background-color: rgba(0, 0, 0, 0.5);
    border-color:   white;
    font-family:    inherit;
    visibility:     hidden;
}
.tile__pointer-hitbox:hover ~ .player > .player__face {
    visibility:     hidden;
}
.tile__pointer-hitbox:hover ~ .tile__char {
    color:          transparent;
}
.tile__pointer-hitbox:hover ~ .tile__seq {
    visibility:     visible;
}


.player {
    /* DO NOT create a new stacking context. Doing so
    breaks the ability for the spotlight to hide faraway
    tile sequence hints. If this requirement becomes a
    major hinderance, then consider making it an HTML
    child of a tile instead of a player (would double
    the number of DOM operations per operator movement. */
    --colour-spotlight: var(--colour-mainBg);
    contain: size;
}
.player__face {
    border-color:   var(--colour-tileBd);
    contain:        strict;
    transition:     background-color 0.7s ease-in-out;
}
.player__spotlight-short,
.player__spotlight-long {
    will-change: transform;
}
.player[data-face="me"] > .player__face {
    /* Both `contain` and `will-change` are required
    here to constrain repaints (due to animations) on
    this element to the smallest possible box. It is
    also required to put the spotlights on separate
    compositing layers. */
    will-change:    transform;
}
.player__downed-overlay {
    background-color: red;
    opacity: 0.2;
}
.player[data-downed="no"] .player__downed-overlay {
    visibility: hidden;
}

/* Only applied for clientside operator player since
using certain properties will create a new stacking
context, and we decided that we will allow this for
such players' face element. */
/* .player[data-face="me"] > .anim-player__on-move {
    animation: 0.2s
            anim-frames-player__on-move;
} */@keyframes anim-frames-player__on-move {
     0% { transform: scale(1.1); }
    37% { transform: scale(1.3); }
}


/*
Links that could be helpful for creating different implementations:
https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
https://www.w3schools.com/cssref/pr_background-blend-mode.asp
 */
.player__spotlight-short {
    background-image: radial-gradient(
        farthest-side,
        transparent 21%, 46%, var(--colour-spotlight)
    );
    padding:    1400%;
    border:     100vmax solid var(--colour-spotlight);
}
.player__spotlight-long {
    background-image: radial-gradient(
        farthest-side,
        transparent 15%, var(--colour-spotlight)
    );
    padding:    1700%;
    border:     100vmax solid var(--colour-spotlight);
    opacity:    0.92;
}
@media print {
    .player__spotlight-short {
        visibility: hidden;
    }
    .player__spotlight-long {
        visibility: hidden;
    }
}


.player[data-face="me"] > .player__face/* ,
.player[data-face="me"] ~ .tile__char */ {
    background-color: var(--colour-pFaceMe);
}
.player[data-face="meOppo"] > .player__face/* ,
.player[data-face="meOppo"] ~ .tile__char */ {
    background-color: var(--colour-pFaceMeOppo);
}
.player[data-face="teammate"] > .player__face/* ,
.player[data-face="teammate"] ~ .tile__char */ {
    background-color: var(--colour-pFaceTeammate);
}
.player[data-face="opponent"] > .player__face/* ,
.player[data-face="opponent"] ~ .tile__char */ {
    background-color: var(--colour-pFaceOpponent);
}
.player[data-face="teammate"][data-downed="team"] > .player__face/* ,
.player[data-face="teammate"][data-downed="team"] ~ .tile__char */ {
    background-color: var(--colour-pFaceImtlTeammate);
}
.player[data-face="opponent"][data-downed="team"] > .player__face/* ,
.player[data-face="opponent"][data-downed="team"] ~ .tile__char */ {
    background-color: var(--colour-pFaceImtlOpponent);
}


.game-grid-impl-body[data-coord-sys="EUCLID2"] {
    --track-size: minmax(1.67em, 1fr);
    display:    grid;
    grid-template-columns:
        repeat(var(--euclid2-grid-width), var(--track-size));
    grid-auto-rows: var(--track-size);
}
.game-grid-impl-body[data-coord-sys="EUCLID2"] .tile {
    margin:     5%;
    scroll-snap-align: center;
}
/* .game-grid[data-coord-sys="EUCLID2"] .tile > * {
} */


/*
https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
*/
/*
.game-grid-impl-body[data-coord-sys="BEEHIVE"] .tile {
    --nothing: "yet";
}
.game-grid-impl-body[data-coord-sys="BEEHIVE"] .tile > * {
    --nothing: "yet";
}
 */






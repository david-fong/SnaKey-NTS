/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksnakey3"] = self["webpackChunksnakey3"] || []).push([["lang/Korean-ts"],{

/***/ "./src/base/lang/impl/Korean.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Korean\": () => /* binding */ Korean\n/* harmony export */ });\n/* harmony import */ var lang_Lang__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/base/lang/Lang.ts\");\n\r\n/**\r\n * # Korean\r\n *\r\n * https://wikipedia.org/wiki/Hangul_consonant_and_vowel_tables#Hangul_syllables\r\n * https://wikipedia.org/wiki/Korean_language_and_computers#Hangul_in_Unicode\r\n * https://wikipedia.org/wiki/Hangul_Jamo_(Unicode_block)\r\n */\r\nvar Korean;\r\n(function (Korean) {\r\n    /**\r\n     * # Dubeolsik (3-row layout)\r\n     *\r\n     * https://wikipedia.org/wiki/Keyboard_layout#Dubeolsik\r\n     * https://www.branah.com/korean\r\n     */\r\n    class Dubeolsik extends lang_Lang__WEBPACK_IMPORTED_MODULE_0__.Lang {\r\n        constructor(weightScaling) {\r\n            super(\"kore-dub\", INITIALIZE(((ij, mj, fj) => {\r\n                const atoms = [ij, mj, fj].flatMap((jamos) => {\r\n                    return (jamos.value in Dubeolsik.DUB_KEYBOARD)\r\n                        ? [jamos.value] : jamos.atoms.split(\"\");\r\n                });\r\n                return atoms.map((atom) => Dubeolsik.DUB_KEYBOARD[atom]).join(\"\");\r\n            })), weightScaling);\r\n        }\r\n    }\r\n    Dubeolsik.DUB_KEYBOARD = Object.freeze({\r\n        \"\": \"\",\r\n        \"ㅂ\": \"q\", \"ㅈ\": \"w\", \"ㄷ\": \"e\", \"ㄱ\": \"r\", \"ㅅ\": \"t\",\r\n        \"ㅛ\": \"y\", \"ㅕ\": \"u\", \"ㅑ\": \"i\", \"ㅐ\": \"o\", \"ㅔ\": \"p\",\r\n        \"ㅁ\": \"a\", \"ㄴ\": \"s\", \"ㅇ\": \"d\", \"ㄹ\": \"f\", \"ㅎ\": \"g\",\r\n        \"ㅗ\": \"h\", \"ㅓ\": \"j\", \"ㅏ\": \"k\", \"ㅣ\": \"l\",\r\n        \"ㅋ\": \"z\", \"ㅌ\": \"x\", \"ㅊ\": \"c\", \"ㅍ\": \"v\", \"ㅠ\": \"b\",\r\n        \"ㅜ\": \"n\", \"ㅡ\": \"m\",\r\n        \"ㅃ\": \"Q\", \"ㅉ\": \"W\", \"ㄸ\": \"E\", \"ㄲ\": \"R\", \"ㅆ\": \"T\",\r\n        \"ㅒ\": \"O\", \"ㅖ\": \"P\",\r\n    });\r\n    Korean.Dubeolsik = Dubeolsik;\r\n    Dubeolsik;\r\n    Object.freeze(Dubeolsik);\r\n    Object.freeze(Dubeolsik.prototype);\r\n    /**\r\n     * # Sebeolsik (5-row layout)\r\n     *\r\n     * \\*Note: the branah link below is to an earlier version of\r\n     * Sebeolsik, [Sebeolsik 390](https://wikipedia.org/wiki/Keyboard_layout#Sebeolsik_390).\r\n     *\r\n     * https://wikipedia.org/wiki/Keyboard_layout#Sebeolsik_Final\r\n     * https://www.branah.com/sebeolsik\r\n     */\r\n    class Sebeolsik extends lang_Lang__WEBPACK_IMPORTED_MODULE_0__.Lang {\r\n        constructor(weightScaling) {\r\n            super(\"kore-sub\", INITIALIZE(((ij, mj, fj) => {\r\n                return Sebeolsik.SEB_KEYBOARD.INITIALS[ij.value]\r\n                    + Sebeolsik.SEB_KEYBOARD.MEDIALS[mj.value]\r\n                    + Sebeolsik.SEB_KEYBOARD.FINALS[fj.value];\r\n            })), weightScaling);\r\n        }\r\n    }\r\n    Sebeolsik.SEB_KEYBOARD = Object.freeze({\r\n        // Finals and consonant clusters are found on the left.\r\n        FINALS: {\r\n            \"\": \"\",\r\n            \"ㅎ\": \"1\", \"ㅆ\": \"2\", \"ㅂ\": \"3\",\r\n            \"ㅅ\": \"q\", \"ㄹ\": \"w\",\r\n            \"ㅇ\": \"a\", \"ㄴ\": \"s\",\r\n            \"ㅁ\": \"z\", \"ㄱ\": \"x\",\r\n            \"ㄲ\": \"!\", \"ㄺ\": \"@\", \"ㅈ\": \"#\", \"ㄿ\": \"$\", \"ㄾ\": \"%\",\r\n            \"ㅍ\": \"Q\", \"ㅌ\": \"W\", \"ㄵ\": \"E\", \"ㅀ\": \"R\", \"ㄽ\": \"T\",\r\n            \"ㄷ\": \"A\", \"ㄶ\": \"S\", \"ㄼ\": \"D\", \"ㄻ\": \"F\",\r\n            \"ㅊ\": \"Z\", \"ㅄ\": \"X\", \"ㅋ\": \"C\", \"ㄳ\": \"V\",\r\n        },\r\n        // Medials are found in the middle.\r\n        MEDIALS: {\r\n            \"ㅛ\": \"4\", \"ㅠ\": \"5\", \"ㅑ\": \"6\", \"ㅖ\": \"7\", \"ㅢ\": \"8\",\r\n            \"ㅕ\": \"e\", \"ㅐ\": \"r\", \"ㅓ\": \"t\",\r\n            \"ㅣ\": \"d\", \"ㅏ\": \"f\", \"ㅡ\": \"g\",\r\n            \"ㅔ\": \"c\", \"ㅗ\": \"v\", \"ㅜ\": \"b\",\r\n            \"ㅒ\": \"G\",\r\n            // Things that don't have dedicated keys:\r\n            \"ㅘ\": \"vf\", \"ㅙ\": \"vr\", \"ㅚ\": \"vd\", \"ㅝ\": \"bt\", \"ㅞ\": \"bc\", \"ㅟ\": \"bd\",\r\n        },\r\n        // Initials are found on the right.\r\n        INITIALS: {\r\n            \"ㅋ\": \"0\",\r\n            \"ㄹ\": \"y\", \"ㄷ\": \"u\", \"ㅁ\": \"i\", \"ㅊ\": \"o\", \"ㅍ\": \"p\",\r\n            \"ㄴ\": \"h\", \"ㅇ\": \"j\", \"ㄱ\": \"k\", \"ㅈ\": \"l\", \"ㅂ\": \";\", \"ㅌ\": \"'\",\r\n            \"ㅅ\": \"n\", \"ㅎ\": \"m\",\r\n            \"ㄲ\": \"!\",\r\n            // NOTE: If we included numbers, this is where they would go.\r\n            // Things that don't have dedicated keys:\r\n            \"ㄸ\": \"uu\", \"ㅃ\": \";;\", \"ㅆ\": \"nn\", \"ㅉ\": \"l\",\r\n        },\r\n    });\r\n    Korean.Sebeolsik = Sebeolsik;\r\n    Sebeolsik;\r\n    Object.freeze(Sebeolsik);\r\n    Object.freeze(Sebeolsik.prototype);\r\n    /**\r\n     * # Korean Romanization\r\n     *\r\n     * https://wikipedia.org/wiki/Revised_Romanization_of_Korean#Transcription_rules\r\n     * https://wikipedia.org/wiki/Romanization_of_Korean#Systems\r\n     */\r\n    class Romanization extends lang_Lang__WEBPACK_IMPORTED_MODULE_0__.Lang {\r\n        constructor(weightScaling) {\r\n            super(\"kore-rom\", INITIALIZE(((ij, mj, fj) => {\r\n                return ij.roman + mj.roman + fj.roman;\r\n            })), weightScaling);\r\n        }\r\n    }\r\n    Korean.Romanization = Romanization;\r\n    Romanization;\r\n    Object.freeze(Romanization);\r\n    Object.freeze(Romanization.prototype);\r\n    const UNICODE_HANGUL_SYLLABLES_BASE = 0xAC00;\r\n    /**\r\n     * Helper for each implementation's constructors.\r\n     *\r\n     * @param seqBuilder - Return a {@link Lang.Seq} based on the three\r\n     *      parts of a syllable (passed in to this as parameters).\r\n     * @returns A transformation of initializer information to a form\r\n     *      suitable for consumption by the {@link Lang} constructor.\r\n     */\r\n    const INITIALIZE = (seqBuilder) => {\r\n        const forwardDict = {};\r\n        INITIALS.forEach((initialJamo, initialIdx) => {\r\n            MEDIALS.forEach((medialJamo, medialIdx) => {\r\n                FINALS.forEach((finalJamo, finalIdx) => {\r\n                    // base + f + F(m + Mi)\r\n                    let offset = initialIdx;\r\n                    offset = MEDIALS.length * offset + medialIdx;\r\n                    offset = FINALS.length * offset + finalIdx;\r\n                    const char = String.fromCharCode(UNICODE_HANGUL_SYLLABLES_BASE + offset);\r\n                    forwardDict[char] = {\r\n                        seq: seqBuilder(initialJamo, medialJamo, finalJamo),\r\n                        weight: WEIGHTS[char] || 1,\r\n                    };\r\n                });\r\n            });\r\n        });\r\n        return forwardDict;\r\n    };\r\n    /**\r\n     * # Initial Jamo (Choseong)\r\n     */\r\n    const INITIALS = Object.freeze([\r\n        { value: \"ㄱ\", atoms: \"ㄱ\", roman: \"g\" },\r\n        { value: \"ㄲ\", atoms: \"ㄱㄱ\", roman: \"kk\" },\r\n        { value: \"ㄴ\", atoms: \"ㄴ\", roman: \"n\" },\r\n        { value: \"ㄷ\", atoms: \"ㄷ\", roman: \"d\" },\r\n        { value: \"ㄸ\", atoms: \"ㄷㄷ\", roman: \"tt\" },\r\n        { value: \"ㄹ\", atoms: \"ㄹ\", roman: \"r\" },\r\n        { value: \"ㅁ\", atoms: \"ㅁ\", roman: \"m\" },\r\n        { value: \"ㅂ\", atoms: \"ㅂ\", roman: \"b\" },\r\n        { value: \"ㅃ\", atoms: \"ㅂㅂ\", roman: \"pp\" },\r\n        { value: \"ㅅ\", atoms: \"ㅅ\", roman: \"s\" },\r\n        { value: \"ㅆ\", atoms: \"ㅅㅅ\", roman: \"ss\" },\r\n        { value: \"ㅇ\", atoms: \"ㅇ\", roman: \"-\" },\r\n        { value: \"ㅈ\", atoms: \"ㅈ\", roman: \"j\" },\r\n        { value: \"ㅉ\", atoms: \"ㅈㅈ\", roman: \"jj\" },\r\n        { value: \"ㅊ\", atoms: \"ㅊ\", roman: \"ch\" },\r\n        { value: \"ㅋ\", atoms: \"ㅋ\", roman: \"k\" },\r\n        { value: \"ㅌ\", atoms: \"ㅌ\", roman: \"t\" },\r\n        { value: \"ㅍ\", atoms: \"ㅍ\", roman: \"p\" },\r\n        { value: \"ㅎ\", atoms: \"ㅎ\", roman: \"h\" },\r\n    ]);\r\n    INITIALS; // type-check\r\n    /**\r\n     * # Medial Jamo (Jungseong)\r\n     */\r\n    const MEDIALS = Object.freeze([\r\n        { value: \"ㅏ\", atoms: \"ㅏ\", roman: \"a\" },\r\n        { value: \"ㅐ\", atoms: \"ㅐ\", roman: \"ae\" },\r\n        { value: \"ㅑ\", atoms: \"ㅑ\", roman: \"ya\" },\r\n        { value: \"ㅒ\", atoms: \"ㅒ\", roman: \"yae\" },\r\n        { value: \"ㅓ\", atoms: \"ㅓ\", roman: \"eo\" },\r\n        { value: \"ㅔ\", atoms: \"ㅔ\", roman: \"e\" },\r\n        { value: \"ㅕ\", atoms: \"ㅕ\", roman: \"yeo\" },\r\n        { value: \"ㅖ\", atoms: \"ㅖ\", roman: \"ye\" },\r\n        { value: \"ㅗ\", atoms: \"ㅗ\", roman: \"o\" },\r\n        { value: \"ㅘ\", atoms: \"ㅗㅏ\", roman: \"wa\" },\r\n        { value: \"ㅙ\", atoms: \"ㅗㅐ\", roman: \"wae\" },\r\n        { value: \"ㅚ\", atoms: \"ㅗㅣ\", roman: \"oe\" },\r\n        { value: \"ㅛ\", atoms: \"ㅛ\", roman: \"yo\" },\r\n        { value: \"ㅜ\", atoms: \"ㅜ\", roman: \"u\" },\r\n        { value: \"ㅝ\", atoms: \"ㅜㅓ\", roman: \"wo\" },\r\n        { value: \"ㅞ\", atoms: \"ㅜㅔ\", roman: \"we\" },\r\n        { value: \"ㅟ\", atoms: \"ㅜㅣ\", roman: \"wi\" },\r\n        { value: \"ㅠ\", atoms: \"ㅠ\", roman: \"yu\" },\r\n        { value: \"ㅡ\", atoms: \"ㅡ\", roman: \"eu\" },\r\n        { value: \"ㅢ\", atoms: \"ㅡㅣ\", roman: \"ui\" },\r\n        { value: \"ㅣ\", atoms: \"ㅣ\", roman: \"i\" },\r\n    ]);\r\n    MEDIALS; // type-check\r\n    /**\r\n     * # Final Jamo (Jongseong)\r\n     */\r\n    const FINALS = Object.freeze([\r\n        { value: \"\", atoms: \"\", roman: \"\" },\r\n        { value: \"ㄱ\", atoms: \"ㄱ\", roman: \"k\" },\r\n        { value: \"ㄲ\", atoms: \"ㄱㄱ\", roman: \"k\" },\r\n        { value: \"ㄳ\", atoms: \"ㄱㅅ\", roman: \"kt\" },\r\n        { value: \"ㄴ\", atoms: \"ㄴ\", roman: \"n\" },\r\n        { value: \"ㄵ\", atoms: \"ㄴㅈ\", roman: \"nt\" },\r\n        { value: \"ㄶ\", atoms: \"ㄴㅎ\", roman: \"nt\" },\r\n        { value: \"ㄷ\", atoms: \"ㄷ\", roman: \"t\" },\r\n        { value: \"ㄹ\", atoms: \"ㄹ\", roman: \"l\" },\r\n        { value: \"ㄺ\", atoms: \"ㄹㄱ\", roman: \"lk\" },\r\n        { value: \"ㄻ\", atoms: \"ㄹㅁ\", roman: \"lm\" },\r\n        { value: \"ㄼ\", atoms: \"ㄹㅂ\", roman: \"lp\" },\r\n        { value: \"ㄽ\", atoms: \"ㄹㅅ\", roman: \"lt\" },\r\n        { value: \"ㄾ\", atoms: \"ㄹㅌ\", roman: \"lt\" },\r\n        { value: \"ㄿ\", atoms: \"ㄹㅍ\", roman: \"lp\" },\r\n        { value: \"ㅀ\", atoms: \"ㄹㅎ\", roman: \"lt\" },\r\n        { value: \"ㅁ\", atoms: \"ㅁ\", roman: \"m\" },\r\n        { value: \"ㅂ\", atoms: \"ㅂ\", roman: \"p\" },\r\n        { value: \"ㅄ\", atoms: \"ㅂㅅ\", roman: \"pt\" },\r\n        { value: \"ㅅ\", atoms: \"ㅅ\", roman: \"t\" },\r\n        { value: \"ㅆ\", atoms: \"ㅅㅅ\", roman: \"t\" },\r\n        { value: \"ㅇ\", atoms: \"ㅇ\", roman: \"ng\" },\r\n        { value: \"ㅈ\", atoms: \"ㅈ\", roman: \"t\" },\r\n        { value: \"ㅊ\", atoms: \"ㅊ\", roman: \"t\" },\r\n        { value: \"ㅋ\", atoms: \"ㅋ\", roman: \"k\" },\r\n        { value: \"ㅌ\", atoms: \"ㅌ\", roman: \"t\" },\r\n        { value: \"ㅍ\", atoms: \"ㅍ\", roman: \"p\" },\r\n        { value: \"ㅎ\", atoms: \"ㅎ\", roman: \"t\" },\r\n    ]);\r\n    FINALS; // type-check\r\n    /**\r\n     *\r\n     */\r\n    // TODO.learn Korean jamo frequency. This should probably go in its own json file.\r\n    const WEIGHTS = Object.freeze({\r\n        \"\": 1,\r\n    });\r\n})(Korean || (Korean = {}));\r\nObject.freeze(Korean);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/base/lang/impl/Korean.ts\n");

/***/ })

}]);
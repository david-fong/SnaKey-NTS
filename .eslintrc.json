{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        //"tsconfigRootDir": "./base",
        // Note that we need to reference root configs only
        // or else eslint will get confused and go into an
        // infinite loop. :(
        "project": [
            // webpack:
            "./scripts/webpack/tsconfig.json",
            // basecode:
            "./src/base/defs/tsconfig.json",
            "./src/base/lang/tsconfig.json",
            "./src/base/lang/impl/tsconfig.json",
            "./src/base/floor/tsconfig.json",
            "./src/base/game/tsconfig.json",
            // concrete implementations:
            "./src/client/tsconfig.json",
            "./src/server/tsconfig.json",
            // tests:
            "./test/lang/tsconfig.json"
        ],
        "sourceType": "module",
        "extraFileExtensions": [".json"],
        "ecmaVersion": 8
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "env": {
        "es6": true,
        "browser": false
    },

    "rules": {
        // regular javascript linting:
        "no-eval": "error",
        "eqeqeq": ["error", "smart"],
        "consistent-return": "error",

        "getter-return": ["error"],
        "array-callback-return": ["error"],
        "no-invalid-regexp": ["error", { "allowConstructorFlags": ["u", "y"] }],
        "no-invalid-this": ["error"],
        "no-unreachable": ["error"],
        "no-useless-catch": ["error"],
        "no-throw-literal": ["error"],

        "yoda": ["error", "never", { "exceptRange": true }],
        "no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
        "no-trailing-spaces": ["error", { "ignoreComments": true }],
        "semi-style": ["error", "last"],
        "semi-spacing": ["error", { "before": false, "after": true }],
        "space-before-function-paren": ["error", {
            "anonymous": "never",
            "named": "never",
            "asyncArrow": "always"
        }],
        "comma-dangle": ["error", {
            "arrays": "only-multiline",
            "objects": "only-multiline",
            "imports": "only-multiline",
            "exports": "only-multiline",
            "functions": "only-multiline"
        }],

        // typescript linting:
        "@typescript-eslint/no-misused-new": ["error"],
        "@typescript-eslint/prefer-readonly": ["warn"],
        //"@typescript-eslint/explicit-member-accessibility": ["error"], // TODO.build re-enable this when eslint can handle #private fields.
        "@typescript-eslint/adjacent-overload-signatures": ["error"],
        "@typescript-eslint/explicit-function-return-type": ["error"],
        // TODO.learn https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/naming-convention.md
        "@typescript-eslint/naming-convention": ["error", {
            "selector": "variableLike",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
        },{
            "selector": "memberLike",
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
        },{
            "selector": "typeLike",
            "format": ["PascalCase"],
            "leadingUnderscore": "allow"
        },{
            "selector": "enumMember",
            "format": ["UPPER_CASE"]
        }],

        "semi": "error"
    },
    "overrides": [
        {
            // enable the rule specifically for TypeScript files
            "files": ["*.ts", "*.tsx"],
            "rules": {
                "jsdoc/require-param-type": 0,
                "jsdoc/require-returns-type": 0,
                "camelcase": "off",
                "semi": "off",
                "@typescript-eslint/semi": ["error", "always"],
                "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }]
            }
        }
    ]
}

{
	"root": true,
	"extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/recommended"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		//"tsconfigRootDir": "./base",
		// Note that we need to reference root configs only
		// or else eslint will get confused and go into an
		// infinite loop. :(
		"project": [
			// webpack:
			"./scripts/webpack/jsconfig.json",

			// base:
			"./src/base/defs/tsconfig.json",
			"./src/base/lang/tsconfig.json",
			"./src/base/lang/impl/tsconfig.json",
			"./src/base/floor/tsconfig.json",
			"./src/base/game/tsconfig.json",

			// client/server:
			"./src/client/tsconfig.json",
			"./src/server/tsconfig.json",

			// tests:
			"./src/test/lang/tsconfig.json"
		],
		"sourceType": "module",
		"extraFileExtensions": [".json"],
		"ecmaVersion": 2017
	},
	"plugins": [
		"@typescript-eslint"
	],
	"env": {
		"es6": true,
		"browser": false
	},

	"rules": {
		// regular javascript linting:
		"no-eval": "error",
		"eqeqeq": ["error", "smart"],
		"consistent-return": "error",
		"block-scoped-functions": "off", // safe after es6

		"getter-return": ["error"],
		"array-callback-return": ["error"],
		"no-invalid-regexp": ["error", { "allowConstructorFlags": ["u", "y"] }],
		"no-invalid-this": ["error"],
		"no-unreachable": ["error"],
		"no-useless-catch": ["error"],
		"no-throw-literal": ["error"],

		"yoda": ["error", "never", { "exceptRange": true }],
		"no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
		"no-trailing-spaces": ["error", { "ignoreComments": true }],
		"semi-style": ["error", "last"],
		"semi-spacing": ["error", { "before": false, "after": true }],
		"space-before-function-paren": ["error", {
			"anonymous": "never",
			"named": "never",
			"asyncArrow": "always"
		}],
		"comma-dangle": ["error", {
			"arrays": "only-multiline",
			"objects": "only-multiline",
			"imports": "only-multiline",
			"exports": "only-multiline",
			"functions": "only-multiline"
		}],

		// typescript linting:
		"@typescript-eslint/no-non-null-assertion": ["off"],
		"@typescript-eslint/no-unused-vars": ["off"],
		"@typescript-eslint/no-namespace": ["off"],
		"@typescript-eslint/no-explicit-any": ["off"/*, { "ignoreRestArgs": true } */],
		"@typescript-eslint/no-misused-new": ["error"],
		"@typescript-eslint/prefer-readonly": ["warn"],
		//"@typescript-eslint/explicit-member-accessibility": ["error"], // TODO.build re-enable this when eslint can handle #private fields.
		"@typescript-eslint/adjacent-overload-signatures": ["error"],
		"@typescript-eslint/explicit-function-return-type": ["error"],
		"@typescript-eslint/naming-convention": ["error", {
			"selector": "variableLike",
			"format": ["camelCase", "PascalCase", "UPPER_CASE"],
			"leadingUnderscore": "allow"
		},{
			"selector": "memberLike",
			"format": ["camelCase", "PascalCase", "UPPER_CASE"],
			"leadingUnderscore": "allow"
		},{
			"selector": "typeLike",
			"format": ["PascalCase"],
			"leadingUnderscore": "allow"
		},{
			"selector": "enumMember",
			"format": ["UPPER_CASE"]
		}],

		"semi": "error",
		"no-restricted-globals": [
			// https://github.com/microsoft/TypeScript/issues/14306#issuecomment-753379360
			"error", "postMessage", "blur", "focus", "close", "frames", "self",
			"parent", "opener", "top", "length", "closed", "location", "origin",
			"name", "locationbar", "menubar", "personalbar", "scrollbars",
			"statusbar", "toolbar", "status", "frameElement", "navigator",
			"customElements", "external", "screen", "innerWidth", "innerHeight",
			"scrollX", "pageXOffset", "scrollY", "pageYOffset", "screenX", "screenY",
			"outerWidth", "outerHeight", "devicePixelRatio", "clientInformation",
			"screenLeft", "screenTop", "defaultStatus", "defaultstatus",
			"styleMedia", "onanimationend", "onanimationiteration",
			"onanimationstart", "onsearch", "ontransitionend",
			"onwebkitanimationend", "onwebkitanimationiteration",
			"onwebkitanimationstart", "onwebkittransitionend", "isSecureContext",
			"onabort", "onblur", "oncancel", "oncanplay", "oncanplaythrough",
			"onchange", "onclick", "onclose", "oncontextmenu", "oncuechange",
			"ondblclick", "ondrag", "ondragend", "ondragenter", "ondragleave",
			"ondragover", "ondragstart", "ondrop", "ondurationchange", "onemptied",
			"onended", "onerror", "onfocus", "oninput", "oninvalid", "onkeydown",
			"onkeypress", "onkeyup", "onload", "onloadeddata", "onloadedmetadata",
			"onloadstart", "onmousedown", "onmouseenter", "onmouseleave",
			"onmousemove", "onmouseout", "onmouseover", "onmouseup",
			"onmousewheel", "onpause", "onplay", "onplaying", "onprogress",
			"onratechange", "onreset", "onresize", "onscroll", "onseeked",
			"onseeking", "onselect", "onstalled", "onsubmit", "onsuspend",
			"ontimeupdate", "ontoggle", "onvolumechange", "onwaiting", "onwheel",
			"onauxclick", "ongotpointercapture", "onlostpointercapture",
			"onpointerdown", "onpointermove", "onpointerup", "onpointercancel",
			"onpointerover", "onpointerout", "onpointerenter", "onpointerleave",
			"onafterprint", "onbeforeprint", "onbeforeunload", "onhashchange",
			"onlanguagechange", "onmessage", "onmessageerror", "onoffline",
			"ononline", "onpagehide", "onpageshow", "onpopstate",
			"onrejectionhandled", "onstorage", "onunhandledrejection", "onunload",
			"performance", "stop", "open", "print", "captureEvents",
			"releaseEvents", "getComputedStyle", "matchMedia", "moveTo", "moveBy",
			"resizeTo", "resizeBy", "getSelection", "find", "createImageBitmap",
			"scroll", "scrollTo", "scrollBy", "onappinstalled",
			"onbeforeinstallprompt", "crypto", "ondevicemotion",
			"ondeviceorientation", "ondeviceorientationabsolute", "indexedDB",
			"webkitStorageInfo", "chrome", "visualViewport", "speechSynthesis",
			"webkitRequestFileSystem", "webkitResolveLocalFileSystemURL",
			"openDatabase",
			// adding common in. any others?
			"addEventListener", "removeEventListener"
		]
	},
	"overrides": [
		{
			// enable the rule specifically for TypeScript files
			"files": ["*.ts", "*.tsx"],
			"rules": {
				"jsdoc/require-param-type": 0,
				"jsdoc/require-returns-type": 0,
				"camelcase": "off",
				"semi": "off",
				"@typescript-eslint/semi": ["error", "always"],
				"@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }]
			}
		}
	]
}

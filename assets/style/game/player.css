
.player {
    /* DO NOT create a new stacking context. Doing so
    breaks the ability for the spotlight to hide faraway
    tile sequence hints. If this requirement becomes a
    major hinderance, then consider making it an HTML
    child of a tile instead of a player (would double
    the number of DOM operations per operator movement. */
    --colour-spotlight: var(--colour-mainBg);
    contain: size;
}
.player__face {
    border-color:   var(--colour-tileBd);
    contain:        strict;
    transition:     background-color 0.7s ease-in-out;
}
.player__spotlight-short,
.player__spotlight-long {
    will-change: transform;
}
.player[data-face="me"] > .player__face {
    /* Both `contain` and `will-change` are required
    here to constrain repaints (due to animations) on
    this element to the smallest possible box. It is
    also required to put the spotlights on separate
    compositing layers. */
    will-change:    transform;
}
.player__downed-overlay {
    background-color: red;
    opacity: 0.2;
}
.player[data-downed="no"] .player__downed-overlay {
    visibility: hidden;
}

/* Only applied for clientside operator player since
using certain properties will create a new stacking
context, and we decided that we will allow this for
such players' face element. */
/* .player[data-face="me"] > .anim-player__on-move {
    animation: 0.2s
            anim-frames-player__on-move;
} */@keyframes anim-frames-player__on-move {
     0% { transform: scale(1.1); }
    37% { transform: scale(1.3); }
}


/*
Links that could be helpful for creating different implementations:
https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
https://www.w3schools.com/cssref/pr_background-blend-mode.asp
 */
.player__spotlight-short {
    background-image: radial-gradient(
        farthest-side,
        transparent 21%, 46%, var(--colour-spotlight)
    );
    padding:    1400%;
    border:     100vmax solid var(--colour-spotlight);
}
.player__spotlight-long {
    background-image: radial-gradient(
        farthest-side,
        transparent 15%, var(--colour-spotlight)
    );
    padding:    1700%;
    border:     100vmax solid var(--colour-spotlight);
    opacity:    0.92;
}
@media print {
    .player__spotlight-short {
        visibility: hidden;
    }
    .player__spotlight-long {
        visibility: hidden;
    }
}


.player[data-face="me"] > .player__face/* ,
.player[data-face="me"] ~ .tile__char */ {
    background-color: var(--colour-pFaceMe);
}
.player[data-face="meOppo"] > .player__face/* ,
.player[data-face="meOppo"] ~ .tile__char */ {
    background-color: var(--colour-pFaceMeOppo);
}
.player[data-face="teammate"] > .player__face/* ,
.player[data-face="teammate"] ~ .tile__char */ {
    background-color: var(--colour-pFaceTeammate);
}
.player[data-face="opponent"] > .player__face/* ,
.player[data-face="opponent"] ~ .tile__char */ {
    background-color: var(--colour-pFaceOpponent);
}
.player[data-face="teammate"][data-downed="team"] > .player__face/* ,
.player[data-face="teammate"][data-downed="team"] ~ .tile__char */ {
    background-color: var(--colour-pFaceImtlTeammate);
}
.player[data-face="opponent"][data-downed="team"] > .player__face/* ,
.player[data-face="opponent"][data-downed="team"] ~ .tile__char */ {
    background-color: var(--colour-pFaceImtlOpponent);
}

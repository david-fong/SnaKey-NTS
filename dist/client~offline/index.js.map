{"version":3,"sources":["webpack:///./src/base/floor/Coord.ts","webpack:///./src/base/floor/Tile.ts","webpack:///./src/base/floor/TileGetter.ts","webpack:///./src/base/floor/VisibleGrid.ts","webpack:///./src/base/floor/VisibleTile.ts","webpack:///./src/base/game/Game.ts","webpack:///./src/base/game/__gameparts/Base.ts","webpack:///./src/base/game/__gameparts/Events.ts","webpack:///./src/base/game/events/EventRecordEntry.ts","webpack:///./src/base/game/events/PlayerActionEvent.ts","webpack:///./src/base/game/player/OperatorPlayer.ts","webpack:///./src/base/game/player/Player.ts","webpack:///./src/base/game/player/PlayerSkeleton.ts","webpack:///./src/base/game/player/PlayerStatus.ts","webpack:///./src/base/game/player/Team.ts","webpack:///./src/base/game/player/VisiblePlayerStatus.ts","webpack:///./src/base/lang/Lang.ts","webpack:///./src/base/lang/LangSeqTreeNode.ts","webpack:///./src/base/utils/TypeDefs.ts","webpack:///./src/browser/GameSettings.ts","webpack:///./src/browser/Sound.ts","webpack:///./src/browser/WebHooks.ts"],"names":[],"mappings":"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","file":"client~offline/index.js","sourcesContent":["import type { Euclid2 } from \"./impl/Euclid2\";\r\nimport type { Beehive } from \"./impl/Beehive\";\r\n\r\n\r\n/**\r\n * Done manually so that grid implementations can use their coordinate\r\n * implementation's non-standard methods safely on coordinates retrieved\r\n * from Grid tiles.\r\n */\r\nexport type Coord<S extends Coord.System> = (Coord.Bare<S>) &\r\n    ( S extends Coord.System.EUCLID2 ? Euclid2.Coord\r\n    : S extends Coord.System.BEEHIVE ? Beehive.Coord\r\n    : never\r\n    );\r\n\r\n/**\r\n *\r\n */\r\nexport namespace Coord {\r\n\r\n    export const enum System {\r\n        EUCLID2 = \"EUCLID2\",\r\n        BEEHIVE = \"BEEHIVE\",\r\n    }\r\n\r\n    export type Bare<S extends System> =\r\n    ( S extends System.EUCLID2 ? Euclid2.Coord.Bare\r\n    : S extends System.BEEHIVE ? Beehive.Coord.Bare\r\n    : never\r\n    );\r\n\r\n    // ==============================================================\r\n    // Note: The below exports do not require any modifications with\r\n    // the additions of new coordinate systems.\r\n    // ==============================================================\r\n\r\n    /**\r\n     * Immutable. All `Coord` objects returned by operations are new objects.\r\n     *\r\n     * @template S - An enum identifying the unique implementation class.\r\n     */\r\n    export abstract class Abstract<S extends Coord.System> {\r\n\r\n        /**\r\n         * This does nothing. Subclass constructors should copy in the\r\n         * fields specified by `desc` and end with a self-freezing call.\r\n         *\r\n         * @param desc - Untouched. Here as a reminder of what is needed.\r\n         */\r\n        protected constructor(desc: Coord.Bare<S>) {\r\n            desc; // Prevents warning about unused parameter.\r\n        }\r\n\r\n        public abstract equals(other: Coord.Bare<S>): boolean;\r\n    }\r\n\r\n    export namespace Abstract {\r\n        /**\r\n         * As opposed, for example, to grid systems operating on the\r\n         * basis of graph connections that cannot be represented by\r\n         * lattices.\r\n         */\r\n        export abstract class Mathy<S extends Coord.System> extends Coord.Abstract<S> {\r\n            /**\r\n             * For discrete-coordinate-based systems, this is used to round\r\n             * non-discrete coordinates to discrete ones.\r\n             */\r\n            public abstract round(): Coord<S>;\r\n\r\n            public abstract add(other: Coord.Bare<S>): Coord<S>;\r\n            public abstract sub(other: Coord.Bare<S>): Coord<S>;\r\n            public abstract mul(scalar: number): Coord<S>;\r\n        }\r\n    }\r\n    Object.freeze(Abstract);\r\n    Object.freeze(Abstract.prototype);\r\n\r\n}\r\nObject.freeze(Coord);\r\n// No prototype to freeze.\r\n","import { Lang, Player } from \"utils/TypeDefs\";\r\nimport { Coord } from \"./Coord\";\r\nexport { Coord };\r\n\r\n\r\n/**\r\n * # The Tile Class\r\n *\r\n * As an implementation choice, tiles are dumb. That is, they have\r\n * no knowledge of their context. Their internals are all managed by\r\n * their host {@link Game} through method calls.\r\n *\r\n * From a caller's point of view, extending classes should have am\r\n * identical constructor signature as that of this base class. This\r\n * can be done by a type assertion statement: `<extension class> as\r\n * Tile.ConstructorType<any>`.\r\n *\r\n * @template S\r\n * The coordinate system enum for this tile's coordinate.\r\n */\r\nexport class Tile<S extends Coord.System> {\r\n\r\n    public readonly coord: Coord<S>;\r\n    #occupantId: Player.Id.Nullable;\r\n    #freeHealth: Player.Health;\r\n    #langChar:  Lang.Char;\r\n    #langSeq:   Lang.Seq;\r\n\r\n    /**\r\n     * The number of times this `Tile` was occupied since the last\r\n     * reset. This is used to ensure that in online sessions, each\r\n     * client has a synchronized copy of the game. The Game Manager\r\n     * will drop requests for movements made by players who made the\r\n     * request at a time when they had not yet received information\r\n     * related to the game-state in affected-zones of their request.\r\n     */\r\n    public lastKnownUpdateId: number;\r\n\r\n    /**\r\n     * _Does not call reset._\r\n     *\r\n     * @param coord -\r\n     */\r\n    public constructor(coord: Coord<S>) {\r\n        this.coord = coord;\r\n        this.#occupantId = Player.Id.NULL;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.evictOccupant();\r\n        this.lastKnownUpdateId = 0;\r\n        this.freeHealth = 0;\r\n\r\n        // This is also done when shuffling individual tiles throughout\r\n        // the game, but it is done here since initially, nothing needs\r\n        // to be avoided because no CSP's have been set yet.\r\n        this.setLangCharSeqPair(Lang.CharSeqPair.NULL);\r\n    }\r\n\r\n    /**\r\n     * Called, for example, when a {@link Player} on this `Tile` provides\r\n     * input that did not work to complete their {@link Player#seqBuffer}\r\n     * against any neighbouring `Tile`s.\r\n     */\r\n    public visualBell(): void {\r\n        // does nothing by default.\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Any overrides must make a supercall to this implementation.\r\n     *\r\n     * @param playerId -\r\n     */\r\n    public setOccupant(playerId: Player.Id): void {\r\n        this.#occupantId = playerId;\r\n    }\r\n\r\n    public get isOccupied(): boolean {\r\n        return this.occupantId !== Player.Id.NULL;\r\n    }\r\n\r\n    public evictOccupant(): void {\r\n        this.#occupantId = Player.Id.NULL;\r\n    }\r\n\r\n    public get occupantId(): Player.Id.Nullable {\r\n        return this.#occupantId;\r\n    }\r\n\r\n\r\n\r\n    public get freeHealth(): Player.Health {\r\n        return this.#freeHealth;\r\n    }\r\n\r\n    public set freeHealth(score: Player.Health) {\r\n        this.#freeHealth = score;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public setLangCharSeqPair(charSeqPair: Lang.CharSeqPair): void {\r\n        this.#langChar = charSeqPair.char;\r\n        this.#langSeq  = charSeqPair.seq;\r\n    }\r\n\r\n    public get langChar(): Lang.Char {\r\n        return this.#langChar;\r\n    }\r\n\r\n    public get langSeq(): Lang.Seq {\r\n        return this.#langSeq;\r\n    }\r\n\r\n}\r\n// If this errs when changing the constructor signature, then\r\n// the type definition being asserted should be updated to match.\r\nTile as Tile.ClassIf<any>;\r\n\r\n\r\n\r\nexport namespace Tile {\r\n\r\n    // NOTE: We need this for type-safety because just using typeof\r\n    // will not capture information about type arguments.\r\n    export type ClassIf<S extends Coord.System> = {\r\n        new(coord: Tile<S>[\"coord\"]): Tile<S>;\r\n    };\r\n\r\n}\r\nObject.freeze(Tile);\r\nObject.freeze(Tile.prototype);\r\n","import type { Coord, Tile } from \"./Tile\";\r\n\r\n\r\ntype CoordSys = Coord.System;\r\n\r\ntype Arguments<S extends CoordSys> = [ Coord.Bare<S>, ] | [];\r\n\r\n/**\r\n * A utility class to get destinations-to or sources-from a tile at\r\n * a specified coordinate. It is recommended to name the calling\r\n * variable \"tile\". A query starts with calling one of the methods\r\n * `at`, `destsFrom`, or `sourcesTo`. Optional filtering mutators\r\n * can be applied intermediately such as `unoccupied`. The query\r\n * ends with one of the getters `occupants` or `get`.\r\n *\r\n * @template S\r\n *\r\n * @template A\r\n * This allows `Source` implementations to accept a coordinate\r\n * specifier as an argument, such as is appropriate with a grid,\r\n * or to provide that information implicitly inside itself as\r\n * part of its spec, as is appropriate with a player.\r\n *\r\n */\r\nexport class TileGetter<S extends CoordSys, A extends Arguments<S>> {\r\n\r\n    public constructor(protected readonly source: TileGetter.Source<S,A>) { }\r\n\r\n    public at(...args: A): Tile<S> {\r\n        return this.source.__getTileAt(...args);\r\n    }\r\n    public destsFrom(...args: A): Query<S> {\r\n        return new Query(this.source.__getTileDestsFrom(...args));\r\n    }\r\n    public sourcesTo(...args: A): Query<S> {\r\n        return new Query(this.source.__getTileSourcesTo(...args));\r\n    }\r\n}\r\n\r\nexport namespace TileGetter {\r\n    /**\r\n     * A Tile should always be a source-to and destination-from itself.\r\n     */\r\n    export interface Source<S extends CoordSys, A extends Arguments<S> = [Coord.Bare<S>]> {\r\n        __getTileAt(...args: A): Tile<S>;\r\n        // NOTE: do we need to add an optional argument for range?\r\n        // If so, document that it must default to `1` if unspecified.\r\n        __getTileDestsFrom(...args: A): Array<Tile<S>>;\r\n        __getTileSourcesTo(...args: A): Array<Tile<S>>;\r\n    }\r\n}\r\nObject.freeze(TileGetter);\r\nObject.freeze(TileGetter.prototype);\r\n\r\n/**\r\n *\r\n */\r\nclass Query<S extends CoordSys> {\r\n\r\n    public constructor(protected contents: Array<Tile<S>>) { }\r\n\r\n    public get occupied(): Omit<Query<S>, \"unoccupied\"> {\r\n        this.contents = this.contents.filter((tile) => tile.isOccupied);\r\n        return this;\r\n    }\r\n\r\n    public get unoccupied(): Omit<Query<S>, \"occupied\"> {\r\n        this.contents = this.contents.filter((tile) => !tile.isOccupied);\r\n        return this;\r\n    }\r\n\r\n    public get get(): Array<Tile<S>> {\r\n        const retval = this.contents;\r\n        return retval;\r\n    }\r\n}\r\nObject.freeze(Query);\r\nObject.freeze(Query.prototype);\r\n","import type { Coord, Tile } from \"floor/Tile\";\r\nimport { Grid } from \"floor/Grid\";\r\n\r\n\r\n/**\r\n * All implementations must call `Grid.__VisibleGrid_super` at the end\r\n * of their constructors.\r\n *\r\n * NOTE: As a design choice, this is put in a separate file from the\r\n * base `Grid` class with a _separate_ dictionary of implementation\r\n * literals so that the build tooling can infer that this code can\r\n * be excluded (tree shaking). The implementations may still go in\r\n * the same file as their non-visible implementation since they are\r\n * separate exports (this can be tree-shaken). Specifically, the\r\n * _server_ related code will benefit from this choice since it will\r\n * not use\r\n */\r\nexport interface VisibleGrid<S extends Coord.System> extends Grid<S> {\r\n\r\n    /**\r\n     * Contains the implementation-dependant HTML representation of\r\n     * the grid.\r\n     */\r\n    readonly hostElem: HTMLElement;\r\n\r\n    // This is just a reminder to the developer that such a function\r\n    // exists and is an important part of the architecture. Since\r\n    // VisibleGrid can't be a class (no multiple inheritance), this\r\n    // part of a VisibleGrid's constructor sequence is implemented\r\n    // in Grid.\r\n    __VisibleGrid_super(desc: Grid.CtorArgs<S>, domGrid: HTMLElement): void;\r\n}\r\n\r\n\r\nexport namespace VisibleGrid {\r\n\r\n    export interface ClassIf<S extends Coord.System> extends Grid.ClassIf<S> {\r\n        /**\r\n         * @override\r\n         */\r\n        new(desc: Grid.CtorArgs<S>): VisibleGrid<S>;\r\n    };\r\n\r\n    // Each implementation must register itself into this dictionary.\r\n    export declare const __Constructors: {\r\n        readonly [ S in Coord.System ]: Grid.ClassIf<S>\r\n    };\r\n\r\n    export const getImplementation = <S extends Coord.System>(coordSys: S): ClassIf<S> => {\r\n        const ctor = __Constructors[coordSys];\r\n        return ctor as unknown as ClassIf<S>;\r\n    };\r\n}\r\n","import { WebHooks } from \"../../browser/WebHooks\";\r\nimport type { Lang } from \"utils/TypeDefs\";\r\n\r\nimport { Coord, Tile } from \"./Tile\";\r\n\r\nexport { Coord } from \"./Tile\";\r\n\r\n\r\n/**\r\n * Implicitly handles visuals with help from CSS.\r\n *\r\n * Layers:\r\n * 0. Invisible cell layer (opaque on visual bell)\r\n * 1. Empty layer for spotlight mask\r\n * 2. Player face layer\r\n * 3. Language Written Character\r\n * 4. Language Type-able Sequence\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/z-index\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\r\n *\r\n * Dataset:\r\n * Top-level layer has property \"scoreValue\"\r\n *\r\n * @extends Tile\r\n */\r\nexport class VisibleTile<S extends Coord.System> extends Tile<S> {\r\n\r\n    public  readonly tileElem:      HTMLTableCellElement;\r\n    private readonly langCharElem:  HTMLDivElement;\r\n    private readonly langSeqElem:   HTMLDivElement;\r\n\r\n    public constructor(coordDesc: Tile<S>[\"coord\"]) {\r\n        super(coordDesc);\r\n        {\r\n            const tCell = document.createElement(\"td\");\r\n            tCell.className = WebHooks.Tile.Class.BASE;\r\n            {\r\n                const cDiv = document.createElement(\"div\");\r\n                cDiv.className = WebHooks.Tile.Class.LANG_CHAR;\r\n                cDiv.classList.add(WebHooks.General.Class.FILL_PARENT);\r\n                tCell.appendChild(cDiv);\r\n                this.langCharElem = cDiv;\r\n            } {\r\n                const sDiv = document.createElement(\"div\");\r\n                sDiv.className = WebHooks.Tile.Class.LANG_SEQ;\r\n                tCell.appendChild(sDiv);\r\n                this.langSeqElem = sDiv;\r\n            }\r\n            this.tileElem = tCell;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public visualBell(): void {\r\n        this.tileElem; // TODO.impl Use an animation to flash tile element?\r\n    }\r\n\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public evictOccupant(): void {\r\n        super.evictOccupant();\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public set freeHealth(newHealth: number) {\r\n        super.freeHealth = newHealth;\r\n        if (this.freeHealth) {\r\n            this.tileElem.dataset[WebHooks.Tile.Dataset.HEALTH] = newHealth.toString();\r\n        } else {\r\n            delete this.tileElem.dataset[WebHooks.Tile.Dataset.HEALTH];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public setLangCharSeqPair(charSeqPair: Lang.CharSeqPair): void {\r\n        super.setLangCharSeqPair(charSeqPair);\r\n        this.langCharElem.innerText = this.langChar;\r\n        this.langSeqElem.innerText  = this.langSeq;\r\n    }\r\n\r\n}\r\n// Assert that this extension's constructor has a compatible signature:\r\nVisibleTile as Tile.ClassIf<any>;\r\nObject.freeze(VisibleTile);\r\nObject.freeze(VisibleTile.prototype);\r\n","import type { Lang } from \"lang/Lang\";\r\nimport type { BalancingScheme } from \"lang/LangSeqTreeNode\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Grid } from \"floor/Grid\";\r\nimport type { Player, PlayerStatus } from \"./player/Player\";\r\n\r\n\r\n/**\r\n *\r\n *\r\n * These classes perform the majority of management over {@link Tile}\r\n * and {@link Player} objects. As a design choice, players can only join\r\n * a game before it starts, and actions such as changing the language or\r\n * difficulty require a restart. These actions that require a restart will\r\n * all be exposed to operators through a pre-game page. Other such actions\r\n * include: changing teams.\r\n *\r\n * There are overlaps between what each implementation needs to do:\r\n * - Offline and Server games maintain and control the master-game-state.\r\n * - Offline and Client games display the game-state to an operator via browser and HTML.\r\n * - Client  and Server games use network operations to communicate.\r\n */\r\nexport namespace Game {\r\n\r\n    export const enum Type {\r\n        OFFLINE = \"OFFLINE\",\r\n        SERVER  = \"SERVER\",\r\n        CLIENT  = \"CLIENT\",\r\n    }\r\n    export namespace Type {\r\n        export type Manager = Type.OFFLINE | Type.SERVER;\r\n    }\r\n\r\n    /**\r\n     * Unlike CtorArgs, these are not passed as no-prototype objects\r\n     * (possibly over the network) from the game manager to clients.\r\n     * These are abstract handles to game-implementation-dependant\r\n     * components.\r\n     */\r\n    export type ImplArgs<S extends Coord.System> = {\r\n        tileClass: Tile.ClassIf<S>,\r\n        playerStatusCtor: typeof PlayerStatus,\r\n    };\r\n\r\n    /**\r\n     * # Game Constructor Arguments\r\n     *\r\n     * @template S\r\n     * The coordinate system to use. The literal value must also be\r\n     * passed as the field `coordSys`.\r\n     */\r\n    export type CtorArgs<\r\n        G extends Game.Type,\r\n        S extends Coord.System,\r\n    > = Readonly<{\r\n        coordSys: S;\r\n        gridDimensions: Grid.Dimensions<S>;\r\n        gridHtmlIdHook: G extends Game.Type.SERVER ? undefined : string;\r\n\r\n        languageName: Lang.Names.Value[\"id\"];\r\n        langBalancingScheme: BalancingScheme;\r\n\r\n        /**\r\n         * The index in `playerDescs` of the operator's ctor args.\r\n         */\r\n        operatorIndex: G extends Game.Type.SERVER\r\n            ? undefined\r\n            : Player.Id;\r\n        playerDescs: ReadonlyArray<(\r\n            G extends Game.Type.Manager\r\n            ? Player.CtorArgs.PreIdAssignment\r\n            : Player.CtorArgs\r\n        )>;\r\n\r\n        averageFreeHealthPerTile: Player.Health;\r\n    }>;\r\n\r\n    export namespace CtorArgs {\r\n\r\n        export const EVENT_NAME = \"game-create\";\r\n\r\n        /**\r\n         * Not used here, but used in {@link GroupSession#createGameInstance}.\r\n         */\r\n        export type FailureReasons = {\r\n            undefinedUsername: ReadonlyArray<Player.SocketId>; // socket ID's\r\n            undefinedTeamId:   ReadonlyArray<Player.SocketId>;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * - **`PLAYING`** can go to:\r\n     *   - `PAUSED`: when a pause request initiated by a player is accepted.\r\n     *   - `OVER`:  when certain conditions of players being downed are met.\r\n     * - **`PAUSED`** can go to:\r\n     *   - `PLAYING`: similar to PLAYING->PAUSED.\r\n     * - **`OVER`** can go to:\r\n     *   - `PLAYING`: via resetting the game.\r\n     */\r\n    export const enum Status {\r\n        PLAYING = \"PLAYING\",\r\n        PAUSED  = \"PAUSED\",\r\n        OVER    = \"OVER\",\r\n    }\r\n}\r\nObject.freeze(Game);\r\n","import { Game } from \"../Game\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Grid } from \"floor/Grid\";\r\nimport type { VisibleGrid } from \"floor/VisibleGrid\";\r\n\r\nimport { Player, PlayerStatus, Team } from \"../player/Player\";\r\nimport type { OperatorPlayer } from \"../player/OperatorPlayer\";\r\nimport type { ArtificialPlayer } from \"../player/ArtificialPlayer\";\r\nimport type { PlayerActionEvent } from \"game/events/PlayerActionEvent\";\r\n\r\n\r\n/**\r\n * Foundational parts of a Game that are not related to event handling.\r\n */\r\nexport abstract class GameBase<G extends Game.Type, S extends Coord.System> {\r\n\r\n    public readonly gameType: G;\r\n\r\n    public readonly grid: G extends Game.Type.SERVER ? Grid<S> : VisibleGrid<S>;\r\n\r\n    protected readonly players: TU.RoArr<Player<S>>;\r\n\r\n    public readonly operator: G extends Game.Type.SERVER ? undefined : OperatorPlayer<S>;\r\n\r\n    /**\r\n     * Indexable by team ID's.\r\n     */\r\n    public readonly teams: ReadonlyArray<Team<S>>;\r\n\r\n    #status: Game.Status;\r\n\r\n    public readonly __playerStatusCtor: typeof PlayerStatus;\r\n\r\n\r\n    /**\r\n     * _Does not call reset._\r\n     *\r\n     * Performs the \"no invincible player\" check (See {@link Player#teamSet}).\r\n     *\r\n     * @param gameType -\r\n     * @param impl -\r\n     * @param desc -\r\n     */\r\n    public constructor(\r\n        gameType: G,\r\n        impl: Game.ImplArgs<S>,\r\n        desc: Game.CtorArgs<G,S>,\r\n    ) {\r\n        this.gameType = gameType;\r\n        const gridClass = this.__getGridImplementation(desc.coordSys);\r\n        this.grid = new (gridClass)({\r\n            gridClass:  gridClass,\r\n            tileClass:  impl.tileClass,\r\n            coordSys:   desc.coordSys,\r\n            dimensions: desc.gridDimensions,\r\n            domGridHtmlIdHook: (desc.gridHtmlIdHook || \"n/a\")!,\r\n        }) as GameBase<G,S>[\"grid\"];\r\n\r\n        // Construct players:\r\n        this.__playerStatusCtor = impl.playerStatusCtor;\r\n        this.players = this.createPlayers(desc);\r\n        if (desc.operatorIndex !== undefined) {\r\n            // Note at above comparison: we must be explicit\r\n            // since zero is a valid, _falsy_ operatorIndex.\r\n            (this.operator as Player<S>) = this.players[desc.operatorIndex!];\r\n        }\r\n        const teams: Array<Array<Player<S>>> = [];\r\n        this.players.forEach((player) => {\r\n            if (!teams[player.teamId]) {\r\n                teams[player.teamId] = [];\r\n            }\r\n            teams[player.teamId].push(player);\r\n        });\r\n        this.teams = teams.map((teammateArray, teamId) => {\r\n            return new Team<S>(teamId, teammateArray);\r\n        });\r\n        if (this.teams.every((team) => team.id === Team.ElimOrder.IMMORTAL)) {\r\n            // TODO.design put a check inside the UI code to prevent this.\r\n            // The purpose of this restriction is to prevent DoS attacks on\r\n            // a hosting server by creating games that can never end and\r\n            // leaving them open forever, thus leaking the server's resources.\r\n            throw new Error(\"All teams are immortal. The game will never end.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the grid.\r\n     */\r\n    public reset(): void {\r\n        this.grid.reset();\r\n        // We must reset status to PAUSED to pass a state-transition\r\n        // assertion when changing status later to PLAYING.\r\n        this.#status = Game.Status.PAUSED;\r\n    }\r\n\r\n    protected abstract __getGridImplementation(coordSys: S):\r\n    G extends Game.Type.SERVER ? Grid.ClassIf<S> : VisibleGrid.ClassIf<S>;\r\n\r\n\r\n    /**\r\n     * Private helper for the constructor to create player objects.\r\n     * This is bypassed in non-game-manager implementations (Ie. In\r\n     * ClientGame).\r\n     *\r\n     * @param gameDesc -\r\n     * @returns A bundle of the constructed players.\r\n     */\r\n    private createPlayers(gameDesc: Readonly<Game.CtorArgs<G,S>>): GameBase<G,S>[\"players\"] {\r\n        const playerDescs: ReadonlyArray<Player.CtorArgs>\r\n            = (this.gameType === Game.Type.CLIENT)\r\n            // The client receives these descriptors already finalized / cleaned by the server.\r\n            ? gameDesc.playerDescs as Game.CtorArgs<Game.Type.CLIENT,S>[\"playerDescs\"]\r\n            : Player.CtorArgs.finalize(gameDesc.playerDescs, gameDesc.languageName);\r\n\r\n        return playerDescs.map((playerDesc, playerIndex) => {\r\n            if (playerDesc.familyId === Player.Family.HUMAN) {\r\n                return (playerIndex === gameDesc.operatorIndex)\r\n                    ? this.__createOperatorPlayer(playerDesc)\r\n                    : new Player(this, playerDesc);\r\n            } else {\r\n                return this.__createArtifPlayer(playerDesc);\r\n            }\r\n        });\r\n    }\r\n    protected abstract __createOperatorPlayer(desc: Player.CtorArgs): OperatorPlayer<S>;\r\n    protected abstract __createArtifPlayer(desc: Player.CtorArgs):\r\n    (G extends Game.Type.Manager ? ArtificialPlayer<S> : Player<S>);\r\n\r\n    public get status(): Game.Status {\r\n        return this.#status;\r\n    }\r\n    public statusBecomePlaying(): void {\r\n        if (this.status !== Game.Status.PAUSED) {\r\n            throw new Error(\"Can only resume a game that is currently paused.\");\r\n        }\r\n        this.players.forEach((player) => {\r\n            player.__abstractNotifyThatGameStatusBecamePlaying();\r\n        });\r\n        this.__abstractStatusBecomePlaying();\r\n        this.#status = Game.Status.PLAYING;\r\n        // Make sure focus goes back to the grid element so that it\r\n        // can pick up user input as keydown events:\r\n        if ((this.grid as VisibleGrid<S>).hostElem) {\r\n            (this.grid as VisibleGrid<S>).hostElem.focus();\r\n        }\r\n    }\r\n    public statusBecomePaused(): void {\r\n        if (this.status !== Game.Status.PLAYING) {\r\n            throw new Error(\"Can only pause a game that is currently playing.\");\r\n        }\r\n        this.players.forEach((player) => {\r\n            player.__abstractNotifyThatGameStatusBecamePaused();\r\n        });\r\n        this.__abstractStatusBecomePaused();\r\n        this.#status = Game.Status.PAUSED;\r\n    }\r\n    public statusBecomeOver(): void {\r\n        if (this.status !== Game.Status.PLAYING) {\r\n            throw new Error(\"Can only end a game that is currently playing.\");\r\n        }\r\n        this.players.forEach((player) => {\r\n            player.__abstractNotifyThatGameStatusBecameOver();\r\n        });\r\n        this.__abstractStatusBecomeOver();\r\n        this.#status = Game.Status.OVER;\r\n    }\r\n    protected __abstractStatusBecomePlaying(): void {}\r\n    protected __abstractStatusBecomePaused(): void {}\r\n    protected __abstractStatusBecomeOver(): void {}\r\n\r\n\r\n    public abstract setTimeout(callback: Function, millis: number, ...args: any[])\r\n    : G extends Game.Type.SERVER ? NodeJS.Timeout : number;\r\n\r\n    public abstract cancelTimeout(handle: number | NodeJS.Timeout): void;\r\n\r\n /* The implementations are fully defined and publicly exposed by\r\n    GameManager. These protected declarations higher up the class\r\n    hierarchy exist to allow ClientGame to override them to send\r\n    a request to the ServerGame. */\r\n    public abstract processMoveRequest(desc: PlayerActionEvent.Movement<S>): void;\r\n    protected abstract processBubbleRequest(desc: PlayerActionEvent.Bubble): void;\r\n\r\n}\r\nObject.freeze(GameBase);\r\nObject.freeze(GameBase.prototype);\r\n","import type { Coord } from \"floor/Tile\";\r\nimport { Game } from \"../Game\";\r\n\r\nimport { PlayerActionEvent, TileModificationEvent } from \"../events/PlayerActionEvent\";\r\nimport { EventRecordEntry } from \"../events/EventRecordEntry\";\r\n\r\nimport { GameBase } from \"./Base\";\r\n\r\n\r\n/**\r\n * All events have two corresponding handler functions taking a\r\n * request descriptor object (\"desc\"):\r\n *\r\n * ### Request Processor\r\n *\r\n * The request processor is only used by the Game Manager. It decides\r\n * whether to accept or reject the request based on `desc` and may\r\n * throw exceptions on impossible arguments. It should not make any\r\n * changes to the game state. Instead, it is responsible to augment\r\n * `desc` with information describing what changes to the game state\r\n * must be made.\r\n *\r\n * ### Request Executor\r\n *\r\n * This takes the `desc` augmented by the request processor and enacts\r\n * all the described changes upon the game's state. If the Game Manager\r\n * is not local to the client (a server process), then this handler is\r\n * called at both the server and client.\r\n *\r\n * Updates the event record if the response is accepted.\r\n */\r\nexport abstract class GameEvents<G extends Game.Type, S extends Coord.System> extends GameBase<G,S> {\r\n\r\n    /**\r\n     * All copies of the game should contain identical entries. That\r\n     * in a {@link ClientGame} may at any instant be missing trailing\r\n     * entries, or contain some trailing holes, but such gaps should\r\n     * eventually be filled to match those in the Game Manager.\r\n     *\r\n     * Do not modify this directly. To register an accepted event,\r\n     * call the {@link Game#recordEvent} method, passing it the event\r\n     * descriptor. To create a new event ID at the Game Manager, just\r\n     * take the current length of this array.\r\n     */\r\n    private readonly eventRecord: Array<Readonly<EventRecordEntry>>;\r\n\r\n    public constructor(\r\n        gameType: G,\r\n        impl: Game.ImplArgs<S>,\r\n        gameDesc: Game.CtorArgs<G,S>,\r\n    ) {\r\n        super(gameType, impl, gameDesc);\r\n        this.eventRecord = [];\r\n    }\r\n\r\n    public reset(): void {\r\n        // Clear the event record:\r\n        this.eventRecord.splice(0);\r\n\r\n        super.reset();\r\n    }\r\n\r\n    protected getNextUnusedEventId(): EventRecordEntry[\"eventId\"] {\r\n        return this.eventRecord.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * Basically does `this.eventRecord[id] = desc;` with value checking.\r\n     *\r\n     * @param desc -\r\n     *\r\n     * @throws\r\n     * In the given order of priority:\r\n     * - TypeError if the event ID indicates a rejected request\r\n     * - RangeError if it is not a positive integer\r\n     * - Error if another event was already recorded with the same ID.\r\n     */\r\n    private recordEvent(desc: Readonly<EventRecordEntry>): void {\r\n        const id = desc.eventId;\r\n        if (id === EventRecordEntry.EVENT_ID_REJECT) {\r\n            throw new TypeError(\"Do not try to record events for rejected requests.\");\r\n        } else if (id < 0 || id !== Math.trunc(id)) {\r\n            throw new RangeError(\"Event ID's must only be assigned positive, integer values.\");\r\n        } else if (this.eventRecord[id]) {\r\n            throw new Error(\"Event ID's must be assigned unique values.\");\r\n        }\r\n        // NOTE: If storage becomes a concern with logging events,\r\n        // create a static constant for the record's buffer size,\r\n        // and then here, wrap around.\r\n        this.eventRecord[id] = desc;\r\n    }\r\n\r\n\r\n    private executeTileModificationsEvent(\r\n        desc: TileModificationEvent<S>,\r\n        doCheckOperatorSeqBuffer: boolean = true,\r\n    ): void {\r\n        const dest = this.grid.tile.at(desc.coord);\r\n        if (dest.lastKnownUpdateId < desc.lastKnownUpdateId) {\r\n            if (desc.newCharSeqPair) {\r\n                dest.setLangCharSeqPair(desc.newCharSeqPair);\r\n                // Refresh the operator's `seqBuffer` (maintain invariant) for new CSP:\r\n                if (doCheckOperatorSeqBuffer && this.operator !== undefined\r\n                    && !(this.operator.tile.destsFrom().get.includes(dest))) {\r\n                    // ^Do this when non-operator moves into the the operator's vicinity.\r\n                    this.operator.seqBufferAcceptKey(\"\");\r\n                }\r\n            }\r\n            dest.lastKnownUpdateId = desc.lastKnownUpdateId;\r\n            dest.freeHealth = desc.newFreeHealth!;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the {@link Game#grid}. Call either at the end of\r\n     * {@link Game#processMoveRequest} if I am a {@link ServerGame} or\r\n     * {@link OfflineGame}, or as an event callback if I am a\r\n     * {@link ClientGame}.\r\n     *\r\n     * Automatically lowers the {@link Player#requestInFlight} field\r\n     * for the requesting `Player` if the arriving event description\r\n     * is the newest one for the specified `Player`.\r\n     *\r\n     * Updates that are received after others that are more recent and\r\n     * concern the same {@link Tile} are ignored. This is okay since\r\n     * the only thing that matters about a {@link Tile} to the outside\r\n     * world is its last known state.\r\n     *\r\n     * @param desc\r\n     * A descriptor for all changes mandated by the player-movement event.\r\n     */\r\n    protected processMoveExecute(desc: Readonly<PlayerActionEvent.Movement<S>>): void {\r\n        const player = this.players[desc.playerId];\r\n        const dest   = this.grid.tile.at(desc.dest.coord);\r\n        const clientEventLag = desc.playerLastAcceptedRequestId - player.lastAcceptedRequestId;\r\n\r\n        if (desc.eventId === EventRecordEntry.EVENT_ID_REJECT) {\r\n            // Rejected request. Implies either that: clientEventLag === 0,\r\n            // or that (at Game Manager): dest.numTimesOccupied > desc.destNumTimesOccupied\r\n            if (clientEventLag === 1) {\r\n                player.requestInFlight = false;\r\n            }\r\n            return; // Short-circuit!\r\n        }\r\n        this.recordEvent(desc);\r\n        this.executeTileModificationsEvent(desc.dest, player !== this.operator);\r\n        desc.tilesWithHealthUpdates!.forEach((desc) => {\r\n            this.executeTileModificationsEvent(desc);\r\n        });\r\n\r\n        if (clientEventLag > 1) {\r\n            // ===== Out of order receipt (client-side) =====\r\n            // Already received more recent request responses.\r\n            if (player === this.operator) {\r\n                // Operator never receives their own updates out of\r\n                // order because they only have one unacknowledged\r\n                // in-flight request at a time.\r\n                throw new Error(\"This never happens. See comment in source.\");\r\n            }\r\n            return; // Short-circuit!\r\n        }\r\n        // Okay- the response is an acceptance of the specified player's most\r\n        // recent request pending this acknowledgement.\r\n        player.requestInFlight = false;\r\n        if ((player === this.operator)\r\n            ? (clientEventLag === 1)\r\n            : (clientEventLag <= 1)) {\r\n            player.status.score     = desc.newPlayerHealth!.score;\r\n            player.status.health = desc.newPlayerHealth!.health;\r\n\r\n            player.moveTo(dest);\r\n            // Below is computationally the same as \"(player.lastAcceptedRequestId)++\"\r\n            player.lastAcceptedRequestId = desc.playerLastAcceptedRequestId;\r\n\r\n        } else {\r\n            // Apparent negative lag. The operator may somehow have\r\n            // tampered with their player's request counter.\r\n            throw new Error(\"This never happens. See comment in source\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * Automatically lowers the {@link Player#requestInFlight} field\r\n     * for the requesting `Player`.\r\n     *\r\n     * @param desc -\r\n     */\r\n    protected processBubbleExecute(desc: Readonly<PlayerActionEvent.Bubble>): void {\r\n        // TODO.impl Visually highlight the affected tiles for the specified estimate-duration.\r\n        const bubbler = this.players[desc.playerId];\r\n\r\n        bubbler.requestInFlight = false;\r\n\r\n        if (desc.eventId !== EventRecordEntry.EVENT_ID_REJECT) {\r\n            this.recordEvent(desc); // Record the event.\r\n        }\r\n    }\r\n\r\n}\r\nObject.freeze(GameEvents);\r\nObject.freeze(GameEvents.prototype);\r\n","import type { Player } from \"game/player/Player\";\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport interface EventRecordEntry {\r\n    /**\r\n     * A positive, integer-valued identifier for an event.\r\n     *\r\n     * Must be unique in its context.\r\n     *\r\n     * The request-maker should make the request with this set to.\r\n     * {@link EVENT_ID_REJECT}.\r\n     */\r\n    eventId: number;\r\n}\r\nexport namespace EventRecordEntry {\r\n    /**\r\n     * The Game Manager should assign this value to the `eventId` field\r\n     * of a request-type event to signal if a request has been rejected.\r\n     * It is convenient to use as a default value.\r\n     */\r\n    export const EVENT_ID_REJECT = -1;\r\n}\r\nObject.freeze(EventRecordEntry);\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport interface PlayerGeneratedRequest extends EventRecordEntry {\r\n\r\n    readonly playerId: Player.Id;\r\n\r\n    /**\r\n     * ### Client Request\r\n     *\r\n     * Requester sends this desc to the Game Manager with a value of\r\n     * the ID of the last request it that the server _accepted_. This\r\n     * naturally implies that a requester cannot send a new request to\r\n     * the Game Manager until it has received the Game Manager's\r\n     * response to the last request it made.\r\n     *\r\n     * ### Server Response\r\n     *\r\n     * If the server accepts the request, it must broadcast a response\r\n     * with this field set to the incremented value.\r\n     *\r\n     * If it rejects this request, it must directly acknowledge its\r\n     * receipt of the request (no need to broadcast to all clients)\r\n     * with this field unchanged, which indicates a rejection of the\r\n     * request.\r\n     *\r\n     * ### Handling Unexpected Values\r\n     *\r\n     * If the server / Game Manager receives a request with a value in\r\n     * this field lower than the one it set in its last response to the\r\n     * requester, this would mean that the requester didn't wait for a\r\n     * response to its previous request, which it is not supposed to do.\r\n     *\r\n     * **Important:** If the above requirement is ever changed, (in\r\n     * addition to other mechanisms I haven't reasoned through,) this\r\n     * field's spec should change to require _all_ server responses to\r\n     * have this field set to an incremented value, including rejects.\r\n     *\r\n     * The server should never receive a request with a value higher\r\n     * than the one it provided in its last response to this requester\r\n     * because it in charge of incrementing it- the client should only\r\n     * change the value it sees to match the one from the server's\r\n     * response.\r\n     *\r\n     * In both these cases, the server may throw an assertion error for\r\n     * debugging purposes.\r\n     */\r\n    playerLastAcceptedRequestId: number;\r\n};\r\n","import type { Lang } from \"lang/Lang\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Player } from \"game/player/Player\";\r\nimport { EventRecordEntry, PlayerGeneratedRequest } from \"./EventRecordEntry\";\r\n\r\n\r\nexport type TileModificationEvent<S extends Coord.System> = {\r\n    readonly coord: Coord.Bare<S>;\r\n\r\n    /**\r\n     * The requester should set this field to the highest value they\r\n     * received from any previous responses from the server. In normal\r\n     * cases (no message reordering), this should be equal to the last\r\n     * value seen in the response from the server.\r\n     *\r\n     * The server should respond with the increment of this value. A\r\n     * movement event causes a shuffle-in at the destination position,\r\n     * which can affect whether another player intending to move to\r\n     * the same position can do so. For this reason, the server should\r\n     * reject requests where the requester has not received changes\r\n     * involving a shuffle-in at their desired destination. This is\r\n     * not mandatory, but preferred behaviour.\r\n     */\r\n    lastKnownUpdateId: number;\r\n\r\n    newFreeHealth?: Player.Health;\r\n\r\n    /**\r\n     * Any value assigned by the requester to this field should be\r\n     * ignored by the server.\r\n     *\r\n     * The server must set this to describe the new values to be\r\n     * shuffled-in to the destination tile. It may set the field\r\n     * to `undefined` if it wants to leave the CSP unchanged.\r\n     */\r\n    newCharSeqPair?: Lang.CharSeqPair;\r\n};\r\n\r\n\r\n\r\nexport namespace PlayerActionEvent {\r\n\r\n    /**\r\n     * This is the agreed upon value that both the server and client\r\n     * copies of a game should set as the initial value for request id\r\n     * counters. Remember that a request ID is a property of a player,\r\n     * whereas an event ID is a property tied to a game.\r\n     */\r\n    export const INITIAL_REQUEST_ID = -1;\r\n\r\n    export const EVENT_NAME = Object.freeze(<const>{\r\n        Bubble:   \"player-bubble\"  ,\r\n        Movement: \"player-movement\",\r\n    });\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    export class Bubble implements PlayerGeneratedRequest {\r\n\r\n        public eventId: number = EventRecordEntry.EVENT_ID_REJECT;\r\n\r\n        public readonly playerId: Player.Id;\r\n\r\n        /**\r\n         * @see Player#lastAcceptedRequestId\r\n         */\r\n        public playerLastAcceptedRequestId: number;\r\n\r\n        public affectedNeighbours?: ReadonlyArray<{\r\n            readonly playerId: Player.Id;\r\n            readonly newHealth: Player.Health;\r\n        }> = undefined;\r\n\r\n        public constructor(\r\n            playerId: Player.Id,\r\n            lastAcceptedRequestId: number,\r\n        ) {\r\n            this.playerId = playerId;\r\n            this.playerLastAcceptedRequestId = lastAcceptedRequestId;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * ## Player Movement Event\r\n     *\r\n     * This single method-less class carries the bare-minimum information\r\n     * needed to describe a client's request for movement to the server,\r\n     * and to broadcast an acceptance of the request describing all changes\r\n     * to the game state that must be made (or to otherwise direct-reply\r\n     * the requester in case of request-rejection).\r\n     *\r\n     * It must do so in a way that allows the server and clients to infer\r\n     * whether any message reordering occurred.\r\n     *\r\n     * ### The Problem in Summary\r\n     *\r\n     * - Client copies of the game should lag behind the master copy of\r\n     *   the game state as little as possible with as small of a choking\r\n     *   effect on a client's ability to send requests as possible. This\r\n     *   rules out doing periodic game-state-dump broadcasts (because of\r\n     *   the transmission delay), and \"big-locks\" requiring a client to\r\n     *   have a completely up-to-date copy of the game state to have its\r\n     *   requests processed.\r\n     * - Nothing should ever happen in the client copies of the game that\r\n     *   doesn't happen in the master copy at the server. Ie. Since game-\r\n     *   state-dumps are out of the question, any corruption / de-sync of\r\n     *   the client's copy of the game is considered fatal and completely\r\n     *   unrecoverable.\r\n     * - As a bonus, it would be nice to bake in a mechanism to prevent\r\n     *   malicious or unintended spam from a trigger-happy client without\r\n     *   excessively / unnecessarily throttling the request-making ability\r\n     *   or throughput of any clients.\r\n     */\r\n    export class Movement<S extends Coord.System> extends Bubble {\r\n\r\n        /**\r\n         * Any value assigned by the requester to this field should be\r\n         * ignored by the server. The server should respond with the new\r\n         * values taken on by the player for these fields.\r\n         */\r\n        public newPlayerHealth?: {\r\n            score:     Player.Health;\r\n            health: Player.Health;\r\n        } = undefined;\r\n\r\n        public readonly dest: TileModificationEvent<S>;\r\n\r\n        public tilesWithHealthUpdates?: ReadonlyArray<TileModificationEvent<S>> = undefined;\r\n\r\n        public constructor(\r\n            playerId: Player.Id,\r\n            lastAcceptedRequestId: number,\r\n            destTile: Tile<S>,\r\n        ) {\r\n            super(playerId, lastAcceptedRequestId);\r\n            this.dest = {\r\n                coord:              destTile.coord,\r\n                lastKnownUpdateId:  destTile.lastKnownUpdateId,\r\n                newCharSeqPair:     undefined,\r\n                newFreeHealth:undefined,\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\nObject.freeze(PlayerActionEvent);\r\n","import { Lang } from \"lang/Lang\";\r\nimport { Game } from \"game/Game\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { VisibleTile } from \"floor/VisibleTile\";\r\nimport type { VisiblePlayerStatus } from \"./VisiblePlayerStatus\";\r\nimport type { GameBase } from \"game/__gameparts/Base\";\r\n\r\nimport { Player } from \"./Player\";\r\n\r\n\r\n/**\r\n *\r\n * @extends Player\r\n */\r\nexport class OperatorPlayer<S extends Coord.System> extends Player<S> {\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    declare public readonly game: GameBase<(Game.Type.OFFLINE|Game.Type.CLIENT),S>;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    declare public readonly hostTile: VisibleTile<S>;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    declare public readonly status: VisiblePlayerStatus<S>;\r\n\r\n    /**\r\n     * Invariant: always matches the prefix of the {@link LangSeq} of\r\n     * an unoccupied neighbouring {@link Tile}.\r\n     */\r\n    #seqBuffer: Lang.Seq;\r\n\r\n    private readonly langRemappingFunc: {(input: string): string};\r\n\r\n\r\n    public constructor(game: GameBase<any,S>, desc: Readonly<Player.CtorArgs>) {\r\n        super(game, desc);\r\n        this.langRemappingFunc = Lang.RemappingFunctions[desc.langName];\r\n    }\r\n\r\n    /**\r\n     * @override {@link Player#reset}\r\n     */\r\n    public reset(spawnTile: Tile<S>): void {\r\n        super.reset(spawnTile);\r\n        // This below line must be done because the reset chain does\r\n        // not contain any calls to Player.moveTo, which updates visuals.\r\n        this.hostTile.tileElem.appendChild(this.status.playerDivElem);\r\n        this.#seqBuffer = \"\";\r\n    }\r\n\r\n\r\n    /**\r\n     * Callback function invoked when the Operator presses a key while\r\n     * the game's html element has focus. Because of how JavaScript\r\n     * and also Node.js run in a single thread, this is an atomic\r\n     * operation (implementation must not intermediately schedule any\r\n     * other task-relevant callbacks until all critical operations are\r\n     * complete).\r\n     *\r\n     * @param event - The object describing the `KeyboardEvent`.\r\n     */\r\n    public processKeyboardInput(event: KeyboardEvent): void {\r\n        if (false) {\r\n\r\n        // @ Above: Conditional handlers for actions that are valid\r\n        // even when the game is over or paused.\r\n        // ==========================================================\r\n        } else if (this.game.status === Game.Status.PLAYING) {\r\n            if (!this.requestInFlight) {\r\n                // Only process movement-type input if the last request got\r\n                // acknowledged by the Game Manager and the game is playing.\r\n                // TODO.design is this okay? will any languages require different behaviour?\r\n                if (event.key.length !== 1) return;\r\n                this.seqBufferAcceptKey(event.key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically makes a call to make a movement request if the\r\n     * provided `key` completes the `LangSeq` of a UNT. Does not do\r\n     * any checking regarding {@link OperatorPlayer#requestInFlight}.\r\n     *\r\n     * @param key\r\n     * The pressed typeable key as a string. Pass an empty string to\r\n     * trigger a refresh of the {@link OperatorPlayer#_seqBuffer} to\r\n     * maintain its invariant.\r\n     */\r\n    public seqBufferAcceptKey(key: string | undefined): void {\r\n        const unts = this.tile.destsFrom().unoccupied.get;\r\n        if (unts.length === 0) {\r\n            // Every neighbouring `Tile` is occupied!\r\n            // In this case, no movement is possible.\r\n            return;\r\n        }\r\n        if (key) {\r\n            key = this.langRemappingFunc(key);\r\n            if (!(Lang.Seq.REGEXP.test(key))) {\r\n                // throw new RangeError(`The implementation of input transformation`\r\n                // + ` in the currently selected language did not follow the rule`\r\n                // + ` of producing output matching the regular expression`\r\n                // + ` \\\"${Lang.Seq.REGEXP.source}\\\".`\r\n                // );\r\n                return;\r\n            }\r\n        } else {\r\n            const possibleTarget = unts.find((tile) => tile.langSeq.startsWith(this.seqBuffer));\r\n            if (!possibleTarget) {\r\n                // If the thing I was trying to get to is gone, clear the buffer.\r\n                this.#seqBuffer = \"\";\r\n            }\r\n            return;\r\n        }\r\n\r\n        for ( // loop through substring start offset of newSeqBuffer:\r\n            let newSeqBuffer: Lang.Seq = this.seqBuffer + key;\r\n            newSeqBuffer.length;\r\n            newSeqBuffer = newSeqBuffer.substring(1)\r\n        ) {\r\n            // look for the longest suffixing substring of `newSeqBuffer`\r\n            // that is a prefixing substring of any UNT's.\r\n            const possibleTarget = unts.find((tile) => tile.langSeq.startsWith(newSeqBuffer));\r\n            if (possibleTarget) {\r\n                this.#seqBuffer = newSeqBuffer;\r\n                if (possibleTarget.langSeq === newSeqBuffer) {\r\n                    this.makeMovementRequest(possibleTarget);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        // Operator's new `seqBuffer` didn't match anything.\r\n        this.#seqBuffer = \"\";\r\n        this.hostTile.visualBell();\r\n    }\r\n\r\n    /**\r\n     * Automatically clears the {@link OperatorPlayer#seqBuffer}.\r\n     *\r\n     * @override\r\n     */\r\n    public moveTo(dest: Tile<S>): void {\r\n        // Clear my `seqBuffer` first:\r\n        this.#seqBuffer = \"\";\r\n        super.moveTo(dest);\r\n        this.hostTile.tileElem.appendChild(this.status.playerDivElem);\r\n    }\r\n\r\n\r\n    public get seqBuffer(): Lang.Seq {\r\n        return this.#seqBuffer;\r\n    }\r\n\r\n}\r\nObject.freeze(OperatorPlayer);\r\nObject.freeze(OperatorPlayer.prototype);\r\n","import { Game } from \"game/Game\";\r\n\r\nimport type { Lang } from \"lang/Lang\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Player as __Player } from \"utils/TypeDefs\";\r\nimport type { GameBase } from \"game/__gameparts/Base\";\r\n\r\nimport { PlayerActionEvent } from \"game/events/PlayerActionEvent\";\r\nimport { PlayerSkeleton } from \"./PlayerSkeleton\";\r\nimport { PlayerStatus } from \"./PlayerStatus\";\r\nimport { Team } from \"./Team\";\r\n\r\nexport { PlayerSkeleton };\r\nexport { PlayerStatus };\r\nexport { Team };\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport class Player<S extends Coord.System> extends PlayerSkeleton<S> {\r\n\r\n    public readonly familyId: Player.Family;\r\n\r\n    public readonly teamId: Team.Id;\r\n\r\n    public readonly username: Player.Username;\r\n\r\n    public readonly status: PlayerStatus<S>;\r\n\r\n    public lastAcceptedRequestId: number;\r\n\r\n    public requestInFlight: boolean;\r\n\r\n\r\n    public constructor(game: GameBase<any,S>, desc: Readonly<Player.CtorArgs>) {\r\n        super(game, desc.playerId);\r\n\r\n        if (!(Player.Username.REGEXP.test(desc.username))) {\r\n            throw new RangeError(`Username \\\"${desc.username}\\\"`\r\n            + ` does not match the required regular expression,`\r\n            + ` \\\"${Player.Username.REGEXP.source}\\\".`\r\n            );\r\n        }\r\n        this.familyId = desc.familyId;\r\n        this.teamId   = desc.teamId;\r\n        this.username = desc.username;\r\n        this.status   = new (this.game.__playerStatusCtor)(this, desc.noCheckGameOver);\r\n    }\r\n\r\n    public reset(spawnTile: Tile<S>): void {\r\n        super.reset(spawnTile);\r\n        this.status.reset();\r\n        this.lastAcceptedRequestId = PlayerActionEvent.INITIAL_REQUEST_ID;\r\n        this.requestInFlight = false;\r\n    }\r\n\r\n    public __abstractNotifyThatGameStatusBecamePlaying(): void {}\r\n    public __abstractNotifyThatGameStatusBecamePaused():  void {}\r\n    public __abstractNotifyThatGameStatusBecameOver():    void {}\r\n\r\n\r\n    /**\r\n     * Called automatically by {@link OperatorPlayer#seqBufferAcceptKey}\r\n     * for {@link OperatorPlayer}s, and by a periodic callback for\r\n     * {@link ArtificialPlayer}s. Handles behaviour common between all\r\n     * implementations.\r\n     *\r\n     * @final\r\n     * @param dest -\r\n     * @throws Error if the game is over or paused.\r\n     */\r\n    protected makeMovementRequest(dest:Tile<S>): void {\r\n        if (this.game.status !== Game.Status.PLAYING) {\r\n            throw new Error(\"This is not a necessary precondition, but we're doing it anyway.\");\r\n        } else if (this.requestInFlight) {\r\n            throw new Error(\"Only one request should ever be in flight at a time.\");\r\n        }\r\n        this.requestInFlight = true;\r\n        this.game.processMoveRequest(\r\n            new PlayerActionEvent.Movement(\r\n                this.playerId,\r\n                this.lastAcceptedRequestId,\r\n                dest,\r\n            ),\r\n        );\r\n    }\r\n\r\n    public get team(): Team<S> {\r\n        return this.game.teams[this.teamId];\r\n    }\r\n\r\n    public isTeamedWith(other: Player<S>): boolean {\r\n        return this.team.members.includes(other);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport namespace Player {\r\n\r\n    export type Family = __Player.Family;\r\n\r\n    export type Id = __Player.Id;\r\n\r\n    export type SocketId = string;\r\n\r\n    /**\r\n     * Health be picked up from the floor where it is randomly spawned\r\n     * by the game manager. It can be used to attack enemy players, or\r\n     * to heal teammates.\r\n     */\r\n    export type Health = __Player.Health;\r\n\r\n    export type Username = string;\r\n\r\n    export namespace Username {\r\n        /**\r\n         * The choice of this is somewhat arbitrary. This should be enforced\r\n         * externally since player descriptors are passed to the constructor.\r\n         *\r\n         * Requirements:\r\n         * - Starts with a letter.\r\n         * - No whitespace except for non-consecutive space characters.\r\n         * - Must contain at least five non-space characters that are\r\n         *      either letters, numbers, or the dash character.\r\n         */\r\n        export const REGEXP = /[a-zA-Z](?:[ ]?[a-zA-Z0-9:-]+?){4,}/;\r\n    }\r\n\r\n    /**\r\n     * # Player Constructor Arguments\r\n     */\r\n    export type CtorArgs = CtorArgs.PreIdAssignment & Readonly<{\r\n        playerId: Player.Id;\r\n        langName: Lang.Names.Value[\"id\"],\r\n    }>;\r\n\r\n    export namespace CtorArgs {\r\n\r\n        export type PreIdAssignment = Readonly<{\r\n            /**\r\n             * This determines which constructor function to use.\r\n             */\r\n            familyId: Player.Family;\r\n            teamId:   Team.Id;\r\n            socketId: SocketId;\r\n            username: Username;\r\n            noCheckGameOver: boolean;\r\n        }>;\r\n\r\n        /**\r\n         * @returns\r\n         * Squashes teamId fields to be suitable for array indices.\r\n         *\r\n         * @param playerDescs -\r\n         * @param langName -\r\n         */\r\n        export const finalize = (\r\n            playerDescs: ReadonlyArray<CtorArgs.PreIdAssignment>,\r\n            langName: Lang.Names.Value[\"id\"],\r\n        ): ReadonlyArray<CtorArgs> => {\r\n            // Map team ID's to consecutive numbers\r\n            // (to play nice with array representations):\r\n            const teamIdCleaner: ReadonlyArray<Team.Id>\r\n                = Array.from(new Set(playerDescs.map((player) => player.teamId)))\r\n                .sort((a, b) => a - b)\r\n                .reduce((prev, originalId, squashedId) => {\r\n                    prev[originalId] = squashedId;\r\n                    return prev;\r\n                }, [] as Array<Team.Id>);\r\n            return (playerDescs as Array<CtorArgs.PreIdAssignment>)\r\n            .sort((pda, pdb) => teamIdCleaner[pda.teamId] - teamIdCleaner[pdb.teamId])\r\n            .map<CtorArgs>((playerDesc, index) => { return {\r\n                playerId:   index,\r\n                familyId:   playerDesc.familyId,\r\n                teamId:     teamIdCleaner[playerDesc.teamId],\r\n                socketId:   playerDesc.socketId,\r\n                username:   playerDesc.username,\r\n                langName:   langName,\r\n                noCheckGameOver: playerDesc.noCheckGameOver,\r\n            }; });\r\n        };\r\n\r\n    }\r\n    Object.freeze(CtorArgs);\r\n\r\n}\r\nObject.freeze(Player);\r\nObject.freeze(Player.prototype);\r\n","import { Player as __Player } from \"utils/TypeDefs\";\r\nimport { Game } from \"game/Game\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Player } from \"./Player\";\r\nimport type { GameBase } from \"game/__gameparts/Base\";\r\n\r\nimport { TileGetter } from \"floor/TileGetter\";\r\n\r\n\r\n/**\r\n * Made to abstract all operations that change the {@link Player#hostTile}\r\n * field. Enforces / exposes the {@link PlayerSkeleton#moveTo} method as\r\n * the interface to any such operations.\r\n *\r\n * @extends __Player to intake its namespace exports.\r\n */\r\nexport abstract class PlayerSkeleton<S extends Coord.System> extends __Player<S> {\r\n\r\n    public readonly playerId: Player.Id;\r\n\r\n    /**\r\n     * The game object that this player belongs to.\r\n     */\r\n    public readonly game: GameBase<any,S>;\r\n\r\n    #hostTile: Tile<S>;\r\n\r\n    public readonly tile: TileGetter<S,[]>;\r\n\r\n\r\n\r\n    protected constructor(game: GameBase<any,S>, playerId: Player.Id) {\r\n        super();\r\n        if (Math.trunc(playerId) !== playerId) {\r\n            throw new RangeError(\"Player ID's must be integer values.\");\r\n        }\r\n        this.playerId = playerId;\r\n        this.game = game;\r\n        this.tile = new TileGetter(new PlayerSkeleton.TileGetterSource(this));\r\n    }\r\n\r\n    /**\r\n     * Must be called _after_ the {@link Grid} has been reset.\r\n     * Does not evict itself from its current host tile (if it\r\n     * has one).\r\n     *\r\n     * @param spawnTile -\r\n     */\r\n    protected reset(spawnTile: Tile<S>): void {\r\n        this.#hostTile = spawnTile;\r\n        this.hostTile.setOccupant(this.playerId);\r\n    }\r\n\r\n\r\n\r\n    public get coord(): Coord<S> {\r\n        return this.hostTile.coord;\r\n    }\r\n\r\n    public get hostTile(): Tile<S> {\r\n        return this.#hostTile;\r\n    }\r\n\r\n    // TODO.design Abstract hook called when go near other player.\r\n    // what qualifies \"near\"? Need to call this in moveTo.\r\n    protected onGoBesideOtherPlayer(): void {\r\n        // Does nothing by default.\r\n    }\r\n\r\n    /**\r\n     * Evicts this `Player` from its last known position (which may be\r\n     * lagging behind the state of the master copy of the game.\r\n     *\r\n     * This must be called after all same-event changes pertaining to\r\n     * this player's fields have been enacted.\r\n     *\r\n     * @param dest -\r\n     */\r\n    public moveTo(dest: Tile<S>): void {\r\n        // Evict self from current `Tile`.\r\n        if (this.hostTile.occupantId !== this.playerId) {\r\n            if (this.game.gameType !== Game.Type.CLIENT) {\r\n                // Should never happen.\r\n                throw new Error(\"Linkage between player and occupied tile disagrees.\");\r\n            }\r\n            /* Otherwise, this corner case is guaranteed to follow the events\r\n            described in the below comment: at this `ClientGame`, `p2` will\r\n            move off of the `Tile` currently occupied by this `Player`. */\r\n        }\r\n        else {\r\n            // Move off of current host `Tile`:\r\n            this.hostTile.evictOccupant();\r\n        }\r\n        // Occupy the destination `Tile.\r\n        if (dest.isOccupied) {\r\n            if (this.game.gameType !== Game.Type.CLIENT) {\r\n                // Should never happen because the Game Manager\r\n                // rejects requests to move onto an occupied `Tile`.\r\n                throw new Error(\"Only one player can occupy a tile at a time.\");\r\n            }\r\n            /* Otherwise, this is actually possible in a variant of the _DAS_\r\n            where another `Player` `p2` moves to `B`, I receive that update,\r\n            then `p2` makes a request to move to `C`, which the Game Manager\r\n            accepts and begins to notify my `ClientGame` of, but between the\r\n            time that the GM accepts the request and when I receive the update,\r\n            I make a request to move to `B`, which gets accepted by the GM,\r\n            and because I might not be using websockets as my underlying\r\n            transport, I receive the update for my own request first, which\r\n            would appear to my `ClientGame` as if I was moving onto the `Tile`\r\n            occupied by `p2`. */\r\n        }\r\n        else {\r\n            // Move to occupy the destination `Tile`:\r\n            this.#hostTile = dest;\r\n            dest.setOccupant(this.playerId);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport namespace PlayerSkeleton {\r\n\r\n    export class TileGetterSource<S extends Coord.System> implements TileGetter.Source<S,[]> {\r\n\r\n        public constructor(private readonly player: PlayerSkeleton<S>) { }\r\n\r\n        public __getTileAt(): Tile<S> {\r\n            return this.player.game.grid.tile.at(this.player.coord);\r\n        }\r\n\r\n        public __getTileDestsFrom(): Array<Tile<S>> {\r\n            return this.player.game.grid.tile.destsFrom(this.player.coord).get;\r\n        }\r\n\r\n        public __getTileSourcesTo(): Array<Tile<S>> {\r\n            return this.player.game.grid.tile.sourcesTo(this.player.coord).get;\r\n        }\r\n    }\r\n    Object.freeze(TileGetterSource);\r\n    Object.freeze(TileGetterSource.prototype);\r\n\r\n}\r\nObject.freeze(PlayerSkeleton);\r\nObject.freeze(PlayerSkeleton.prototype);\r\n","import type { Coord } from \"floor/Tile\";\r\nimport type { Player } from \"./Player\";\r\nimport { Team } from \"game/player/Team\";\r\n\r\n\r\n/**\r\n * This abstracts acts of modification upon a player's state, allowing\r\n * extension classes to override setters to perform additional tasks\r\n * such as visually rendering updates to this state information in a\r\n * web browser, and playing sound effects.\r\n */\r\nexport class PlayerStatus<S extends Coord.System> {\r\n\r\n    protected readonly player: Player<S>; // Circular field reference.\r\n    public readonly noCheckGameOver: boolean;\r\n    #score:  Player.Health;\r\n    #health: Player.Health;\r\n\r\n    public constructor(player: Player<S>, noCheckGameOver: boolean) {\r\n        this.player = player;\r\n        this.noCheckGameOver = noCheckGameOver;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.score   = 0;\r\n        this.health  = 0;\r\n    }\r\n\r\n\r\n    public get score(): Player.Health {\r\n        return this.#score;\r\n    }\r\n    public set score(newValue: Player.Health) {\r\n        this.#score = newValue;\r\n    }\r\n\r\n    public get health(): Player.Health {\r\n        return this.#health;\r\n    }\r\n    public set health(newHealth: Player.Health) {\r\n        const oldIsDowned = this.isDowned;\r\n        this.#health = newHealth;\r\n\r\n        if (oldIsDowned) return;\r\n        const team  = this.player.team;\r\n        const teams = this.player.game.teams;\r\n        if (this.isDowned && !(this.noCheckGameOver) && team.elimOrder === 0) {\r\n            // Right before this downing event, the team has not been\r\n            // soft-eliminated yet, but it might be now. Check it:\r\n            if (team.members.every((player) => {\r\n                return player.status.noCheckGameOver || player.status.isDowned;\r\n            })) {\r\n                // All players are downed! The team is now eliminated:\r\n                const numNonStandingTeams\r\n                    = 1 + teams.filter((team) => {\r\n                    return team.elimOrder !== Team.ElimOrder.STANDING;\r\n                }).length;\r\n                team.elimOrder\r\n                    = 1 + teams.filter((team) => {\r\n                    return team.elimOrder !== Team.ElimOrder.STANDING\r\n                        && team.elimOrder !== Team.ElimOrder.IMMORTAL;\r\n                }).length;\r\n                // Now that a team is newly-eliminated, check if the\r\n                // game should end:\r\n                if (numNonStandingTeams === teams.length) {\r\n                    this.player.game.statusBecomeOver();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // TODO.design Equation and architecture for getting/setting adjusted health.\r\n    // This should be a getter here. Easy now that I added the circular reference to the Player.\r\n\r\n    public get isDowned(): boolean {\r\n        return this.health < 0.0;\r\n    }\r\n}\r\nObject.freeze(PlayerStatus);\r\nObject.freeze(PlayerStatus.prototype);\r\n","import type { Coord } from \"floor/Tile\";\r\nimport type { Player } from \"./Player\";\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport class Team<S extends Coord.System> {\r\n\r\n    public readonly id: Team.Id;\r\n\r\n    public readonly members: TU.RoArr<Player<S>>;\r\n\r\n    #elimOrder: number;\r\n\r\n    public constructor(teamId: Team.Id, members: TU.RoArr<Player<S>>) {\r\n        if (members.length === 0) {\r\n            throw new Error(\"teams must have at least one member.\");\r\n        }\r\n        this.id = teamId;\r\n        this.members = members;\r\n        this.#elimOrder\r\n            = (this.members.every((member) => member.status.noCheckGameOver))\r\n            ? Team.ElimOrder.IMMORTAL\r\n            : Team.ElimOrder.STANDING;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.elimOrder !== Team.ElimOrder.IMMORTAL) {\r\n            this.elimOrder = Team.ElimOrder.STANDING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns\r\n     * Indicates the order (relative to other teams) in which this\r\n     * team was to have all its members downed at the same time at\r\n     * least once. Once a team is soft-eliminated, they can continue\r\n     * playing as normal, but there is no going back. The game ends\r\n     * when all teams but one have been soft-eliminated.\r\n     *\r\n     * ### Semantics\r\n     *\r\n     * A comparatively smaller value denotes having been soft-\r\n     * eliminated at an earlier point in the game. **The value zero\r\n     * denotes _not-having-been-soft-eliminated-yet_**.\r\n     */\r\n    public get elimOrder(): number {\r\n        return this.#elimOrder;\r\n    }\r\n    public set elimOrder(teamElimOrder: number) {\r\n        if (this.elimOrder === Team.ElimOrder.IMMORTAL) {\r\n            throw new Error(\"Cannot change the elimination status of an immortal team.\");\r\n        }\r\n        this.#elimOrder = teamElimOrder;\r\n    }\r\n\r\n}\r\nexport namespace Team {\r\n\r\n    export type Id = number;\r\n\r\n    export type ElimOrder = number;\r\n\r\n    // Special values:\r\n    export namespace ElimOrder {\r\n        /**\r\n         * A team starts off with such a value if all its players have\r\n         * specified that their downing should not cause a check for\r\n         * whether the game should end.\r\n         */\r\n        export const IMMORTAL = -1;\r\n\r\n        /**\r\n         * A team that is not invincible starts off with such a value.\r\n         */\r\n        export const STANDING = 0;\r\n    }\r\n\r\n}\r\nObject.freeze(Team);\r\nObject.freeze(Team.prototype);\r\n","import { WebHooks } from \"../../../browser/WebHooks\";\r\nimport type { Coord } from \"floor/Tile\";\r\nimport type { Player } from \"./Player\";\r\nimport { OperatorPlayer } from \"./OperatorPlayer\";\r\nimport { PlayerStatus } from \"./PlayerStatus\";\r\nimport { Team } from \"game/player/Team\";\r\n\r\n\r\n// TODO.impl make the overridden setters modify the HTML elements to\r\n// visually indicate the changes.\r\nexport class VisiblePlayerStatus<S extends Coord.System> extends PlayerStatus<S> {\r\n\r\n    public readonly playerDivElem: HTMLDivElement;\r\n\r\n\r\n    public constructor(player: Player<S>, noCheckGameOver: boolean) {\r\n        super(player, noCheckGameOver);\r\n        {\r\n            // TODO.design create a spotlight mask using the below CSS properties:\r\n            // https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode\r\n            const pDiv = document.createElement(\"div\");\r\n            pDiv.classList.add(\r\n                WebHooks.Player.Class.BASE,\r\n                WebHooks.General.Class.FILL_PARENT,\r\n            );\r\n            this.playerDivElem = pDiv;\r\n        } {\r\n            if (this.player instanceof OperatorPlayer) {\r\n                const spotDiv = document.createElement(\"div\");\r\n                spotDiv.classList.add(\r\n                    WebHooks.Grid.Class.SPOTLIGHT,\r\n                );\r\n                this.playerDivElem.appendChild(spotDiv);\r\n            }\r\n        } {\r\n            // Setup downedOverlay element:\r\n            const doDiv = document.createElement(\"div\");\r\n            doDiv.classList.add(\r\n                WebHooks.Player.Class.DOWNED_OVERLAY,\r\n                WebHooks.General.Class.FILL_PARENT,\r\n            );\r\n            this.playerDivElem.appendChild(doDiv);\r\n        }\r\n    }\r\n\r\n\r\n    public set score(newValue: Player.Health) {\r\n        super.score = newValue;\r\n    }\r\n\r\n    public set health(newHealth: Player.Health) {\r\n        const oldIsDowned = this.isDowned;\r\n        super.health = newHealth;\r\n\r\n        if (oldIsDowned !== this.isDowned) {\r\n            // CSS integration for Player.isDowned rendering.\r\n            const dataDowned = WebHooks.Player.Dataset.DOWNED;\r\n            if (this.isDowned) {\r\n                if (this.player.team.elimOrder) {\r\n                    this.playerDivElem.dataset[dataDowned] = \"team\";\r\n                } else {\r\n                    this.playerDivElem.dataset[dataDowned] = \"self\";\r\n                }\r\n            } else {this.playerDivElem.dataset[dataDowned] = \"no\"; }\r\n        }\r\n    }\r\n\r\n}\r\nexport namespace VisiblePlayerStatus {\r\n    /**\r\n     * This must be called once after all teams are constructed.\r\n     * @param teams -\r\n     * @param operator\r\n     * A reference to the operator player. Used to determine colouring.\r\n     */\r\n    export function colourizeTeamMembers<S extends Coord.System>(\r\n        teams: TU.RoArr<Team<S>>,\r\n        operator: OperatorPlayer<S>,\r\n    ): void {\r\n        for (const team of teams) {\r\n            for (const member of team.members) {\r\n                (member.status as VisiblePlayerStatus<S>)\r\n                .playerDivElem.dataset[WebHooks.Player.Dataset.FACE_SWATCH]\r\n                = (member === operator) ? \"me\"\r\n                : (member.teamId === operator.teamId) ? \"teammate\" : \"opponent\";\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.freeze(VisiblePlayerStatus);\r\nObject.freeze(VisiblePlayerStatus.prototype);\r\n","import { Lang as __Lang } from \"utils/TypeDefs\";\r\n\r\nimport { LangSeqTreeNode, BalancingScheme } from \"lang/LangSeqTreeNode\";\r\n\r\n\r\n/**\r\n * A language is a map from a collection of unique characters to\r\n * corresponding key-sequences. the key-sequences may be non-unique.\r\n * (try searching up \"Chinese riddle where each syllable is pronounced\r\n * 'shi'\"). A character may have more than one corresponding sequence,\r\n * representing alternate \"spellings\" (ways of typing it).\r\n *\r\n * In the use-case of this game, it is more helpful to think in the\r\n * reverse direction: As a map from typeable-key-sequences to sets of\r\n * corresponding unique characters (no character is mapped by multiple\r\n * key-sequences). This game does not require support for retrieving\r\n * the `Lang.Seq` corresponding to a `LangChar`.\r\n *\r\n * See the readme in [the implementations folder](./impl/readme.md)\r\n * for a guide on writing implementations of this class.\r\n */\r\nexport abstract class Lang extends __Lang {\r\n\r\n    /**\r\n     * The abstract, static object for this language.\r\n     */\r\n    public readonly static: Lang.ClassIf;\r\n\r\n    /**\r\n     * A \"reverse\" map from `LangSeq`s to `LangChar`s.\r\n     */\r\n    private readonly treeMap: LangSeqTreeNode<true>;\r\n\r\n    /**\r\n     * A list of leaf nodes in `treeMap` sorted in ascending order by\r\n     * hit-count. Entries should never be removed or added. They will\r\n     * always be sorted in ascending order of `tricklingHitCount`.\r\n     */\r\n    private readonly leafNodes: Array<LangSeqTreeNode>;\r\n\r\n    public get numLeaves(): number { return this.leafNodes.length; }\r\n\r\n\r\n\r\n    /**\r\n     * _Does not call reset._\r\n     *\r\n     * @param classIf -\r\n     * @param forwardDict - Weights are _relative_ values handled by\r\n     *      {@link LangSeqTreeNode}, which requires the provided values\r\n     *      to all be strictly positive values. They do not all need\r\n     *      to sum to a specific value such as 100.\r\n     */\r\n    protected constructor(classIf: Lang.ClassIf, forwardDict: Lang.CharSeqPair.WeightedForwardMap) {\r\n        super();\r\n        this.static = classIf;\r\n        this.treeMap = LangSeqTreeNode.CREATE_TREE_MAP(forwardDict);\r\n        this.leafNodes = this.treeMap.getLeafNodes();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.treeMap.reset();\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns\r\n     * A random `Lang.Char` in this `Lang` whose corresponding\r\n     * `Lang.Seq` is not a prefix of any `Lang.Seq` in `avoid`, and vice\r\n     * versa. They may share a common prefix as long as they are both\r\n     * longer in length than the shared prefix, and they are not equal\r\n     * to one another.\r\n     *\r\n     * This method is called to shuffle the `Lang.Char` / `Lang.Seq`\r\n     * pair at some Tile `A`. `avoid` should contain the `LangSeq`s\r\n     * from all Tiles reachable by a human Player occupying a Tile\r\n     * `B` from which they can also reach `A`\r\n     *\r\n     * In order for this `Lang` to satisfy these constraints, it must\r\n     * be true that the number of leaf nodes in this tree-structure must\r\n     * `avoid` argument.\r\n     *\r\n     * In this implementation, a human Player can only reach a\r\n     * Tile whose coord has an `infNorm` of `1` from\r\n     * that of the Tile they are currently occupying. That is,\r\n     * `avoid` contains `LangSeq`s from all Tiles with an `infNorm`\r\n     * <= `2` from the Tile to shuffle (not including itself).\r\n     * This means that here, the size of `avoid` is always bounded by\r\n     * `(2*2 + 1)^2 - 1 == 24`. Using the English alphabet (26 typeable-\r\n     * letters), this requirement is met by a hair.\r\n     *\r\n     * @param avoid\r\n     * A collection of `Lang.Seq`s to avoid conflicts with when choosing\r\n     * a `Lang.Char` to return.\r\n     *\r\n     * @param balancingScheme -\r\n     */\r\n    public getNonConflictingChar(\r\n        avoid: ReadonlyArray<Lang.Seq>,\r\n        balancingScheme: BalancingScheme,\r\n    ): Lang.CharSeqPair {\r\n        // Wording the spec closer to this implementation: We must find\r\n        // characters from nodes that are not descendants or ancestors\r\n        // of nodes for sequences to avoid. We can be sure that none of\r\n        // the ancestors or descendants of avoid-nodes are avoid-nodes.\r\n\r\n        // Start by sorting according to the desired balancing scheme:\r\n        this.leafNodes.sort(LangSeqTreeNode.LEAF_CMP[balancingScheme]);\r\n\r\n        let nodeToHit: LangSeqTreeNode | undefined = undefined;\r\n        for (const leaf of this.leafNodes) {\r\n            // Take the next leaf node (don't remove it!), and if none of\r\n            // its parents are avoid-nodes, then, from the set of nodes\r\n            // including the leaf node and all its parents (minus the root),\r\n            // choose the node with the least actual/personal hit-count.\r\n            const upstreamNodes: Array<LangSeqTreeNode> = leaf.andNonRootParents();\r\n            for (let i = 0; i < upstreamNodes.length; i++) {\r\n                const conflictSeq: Lang.Seq | undefined = avoid.find(avoidSeq => {\r\n                    return avoidSeq.startsWith(upstreamNodes[i].sequence);\r\n                });\r\n                if (conflictSeq) {\r\n                    if (conflictSeq === upstreamNodes[i].sequence) {\r\n                        // Cannot use anything on this upstream path because\r\n                        // an avoid-node is directly inside it.\r\n                        upstreamNodes.splice(0);\r\n                    } else {\r\n                        // Found a node on an upstream path of an avoid-node.\r\n                        // Doesn't stop us from using what we've found so far.\r\n                        upstreamNodes.splice(i);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (upstreamNodes.length) {\r\n                // Found a non-conflicting upstream node.\r\n                // Find the node with the lowest personal hit-count:\r\n                upstreamNodes.sort(LangSeqTreeNode.PATH_CMP[balancingScheme]);\r\n                nodeToHit = upstreamNodes[0];\r\n                break;\r\n            }\r\n        }\r\n        if (!nodeToHit) {\r\n            // Should never reach here because there is a check in the\r\n            // constructor checking for this invariant.\r\n            throw new Error(`Invariants guaranteeing that a LangSeq can`\r\n            + `always be shuffled-in were not met.`\r\n            );\r\n        }\r\n        return nodeToHit.chooseOnePair(balancingScheme);\r\n    }\r\n\r\n    public simpleView(): object {\r\n        return Object.assign(Object.create(null), {\r\n            name: this.static.getName(),\r\n            desc: this.static.getBlurb(),\r\n            root: this.treeMap.simpleView(),\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport namespace Lang {\r\n\r\n    /**\r\n     * Every constructor function (class literal) implementing the\r\n     * `Lang` class must implement this interface. Ie. These will be\r\n     * implemented as static methods.\r\n     */\r\n    export interface ClassIf {\r\n        getName(): Lang.Names.Value;\r\n        getBlurb(): string;\r\n        getInstance(): Lang;\r\n    };\r\n\r\n    /**\r\n     * An atomic unit in a written language that constitutes a single\r\n     * character. It is completely unique in its language, and has a\r\n     * single corresponding sequence (string) typeable on a keyboard.\r\n     */\r\n    export type Char = __Lang.Char;\r\n\r\n    /**\r\n     * A sequence of characters each matching {@link SEQ_REGEXP}\r\n     * that represent the intermediate interface between an Operator\r\n     * and a `LangChar`. The immediate interface is through the `Lang`\r\n     * implementation's {@link Lang#remapKey} method.\r\n     */\r\n    export type Seq = __Lang.Seq;\r\n    export namespace Seq {\r\n        /**\r\n         * The choice of this pattern is not out of necessity, but following\r\n         * the mindset of spec designers when they mark something as reserved:\r\n         * For the language implementations I have in mind, I don't see the\r\n         * need to include characters other than these.\r\n         *\r\n         * Characters that must never be unmarked as reserved (state reason):\r\n         * (currently none. update as needed)\r\n         */\r\n        export const REGEXP = new RegExp(\"^[a-zA-Z\\-.]+$\");\r\n    }\r\n\r\n    /**\r\n     * A key-value pair containing a `LangChar` and its corresponding\r\n     * `LangSeq`.\r\n     */\r\n    export type CharSeqPair = __Lang.CharSeqPair;\r\n    export namespace CharSeqPair {\r\n        /**\r\n         * A map from written characters to their corresponding typeable\r\n         * keyboard sequence and relative spawn weight.\r\n         *\r\n         * Shape that must be passed in to the static tree producer. The\r\n         * `Record` type enforces the invariant that {@link Lang.Char}s are\r\n         * unique in a {@link Lang}. \"CSP\" is short for {@link Lang.CharSeqPair}.\r\n         */\r\n        export type WeightedForwardMap = Record<Lang.Char, Readonly<{seq: Lang.Seq, weight: number,}>>;\r\n    }\r\n\r\n    export namespace Names {\r\n        export type Key   = __Lang.Names.Key;\r\n        export type Value = __Lang.Names.Value;\r\n    }\r\n\r\n}\r\nObject.freeze(Lang);\r\nObject.freeze(Lang.prototype);\r\n","import { Lang } from \"lang/Lang\";\r\n\r\n\r\n/**\r\n * Ways of choosing {@link LangCharSeqPair} to balance the frequency\r\n * of the selection of a result based on the results of all previous\r\n * selections.\r\n */\r\nexport const enum BalancingScheme {\r\n    SEQ     = \"SEQ\",\r\n    CHAR    = \"CHAR\",\r\n    WEIGHT  = \"WEIGHT\",\r\n}\r\nexport namespace BalancingScheme {\r\n    export type SorterMap<T> = Readonly<Record<BalancingScheme, (a: T, b: T) => number>>;\r\n}\r\n\r\n\r\n/**\r\n * No `LangSeqTreeNode`s mapped in the `children` field have an empty\r\n * `characters` collection (with the exception of the root node). The\r\n * root node should have a falsy parent, and the `empty string` as its\r\n * `sequence` field, with a correspondingly empty `characters` collection.\r\n *\r\n * All non-root nodes have a `sequence` that is prefixed by their parent's\r\n * `sequence`, and a non-empty `characters` collection.\r\n *\r\n * The enclosing {@link Lang} object has no concept of `LangChar` weights.\r\n * All it has is the interfaces provided by the hit-count getter methods.\r\n */\r\nexport class LangSeqTreeNode<ROOT extends boolean = false> {\r\n\r\n    public readonly sequence:   ROOT extends true ? \"\" : Lang.Seq;\r\n    public readonly characters: ReadonlyArray<WeightedLangChar>; // Frozen.\r\n    public readonly parent:     ROOT extends true ? undefined : LangSeqTreeNode;\r\n    public readonly children:   Array<LangSeqTreeNode>; // Frozen.\r\n\r\n    // These fields use weak privacy to leave room for testing and\r\n    // debugging by inspection. They have no getters.\r\n    /**\r\n     * Equals this node's own hit count plus all its ancestors' hit\r\n     * counts.\r\n     */\r\n    private inheritingHitCount: number;\r\n    /**\r\n     * Equals this node's own weighted hit count plus all its ancestors'\r\n     * weighted hit counts.\r\n     */\r\n    private inheritingWeightedHitCount: number;\r\n\r\n\r\n    /**\r\n     * _Does not call reset._\r\n     *\r\n     * @param forwardDict -\r\n     * @returns The root node of a new tree map.\r\n     */\r\n    public static CREATE_TREE_MAP(forwardDict: Lang.CharSeqPair.WeightedForwardMap): LangSeqTreeNode<true> {\r\n        // Reverse the map:\r\n        const reverseDict: Map<Lang.Seq, Array<WeightedLangChar>> = new Map();\r\n        for (const char in forwardDict) {\r\n            const seq = forwardDict[char].seq;\r\n            const weightedChar = new WeightedLangChar(\r\n                char, forwardDict[char].weight,\r\n            );\r\n            const charArray = reverseDict.get(seq);\r\n            if (charArray) {\r\n                // The entry was already made:\r\n                charArray.push(weightedChar);\r\n            } else {\r\n                reverseDict.set(seq, [weightedChar,]);\r\n            }\r\n        }\r\n        // Add mappings in ascending order of sequence length:\r\n        // (this is so that no merging of branches needs to be done)\r\n        const rootNode = new LangSeqTreeNode.Root();\r\n        Array.from(reverseDict)\r\n          //.sort((mappingA, mappingB) => mappingA[0].localeCompare(mappingB[0]))\r\n            .sort((mappingA, mappingB) => mappingA[0].length - mappingB[0].length)\r\n            .forEach((mapping) => {\r\n                rootNode.addCharMapping(...mapping);\r\n            });\r\n        rootNode.finalize();\r\n        return rootNode;\r\n    }\r\n\r\n    protected constructor(\r\n        parent:     LangSeqTreeNode<ROOT>[\"parent\"],\r\n        sequence:   LangSeqTreeNode<ROOT>[\"sequence\"],\r\n        characters: ROOT extends true ? readonly [] : ReadonlyArray<WeightedLangChar>,\r\n    ) {\r\n        this.sequence   = sequence;\r\n        this.characters = characters;\r\n        this.parent     = parent;\r\n        this.children   = [];\r\n    }\r\n\r\n    private finalize(): void {\r\n        this.validateConstruction();\r\n        Object.freeze(this.characters);\r\n        Object.freeze(this.children);\r\n        this.children.forEach((child) => child.finalize());\r\n    }\r\n\r\n    // TODO.test move this to only be run in tests?\r\n    protected validateConstruction(): void | never {\r\n        if (!(this.sequence.startsWith(this.parent!.sequence))) {\r\n            throw new Error(\"Child node's sequence must start with that of its parent.\");\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        // Recursively reset (from leaves first to root last):\r\n        // We must go in such an order so that our random hit\r\n        // seeds will be properly inherited (and not wrongly\r\n        // cleared).\r\n        this.children.forEach((child) => child.reset());\r\n\r\n        this.inheritingHitCount = 0;\r\n        this.inheritingWeightedHitCount = 0.000;\r\n        this.characters.forEach((char) => {\r\n            char.reset();\r\n            // Seed with properly-weight-distributed hit counts\r\n            // for a uniformly distributed random number of times.\r\n            // The choice of the upper bound on the number of times\r\n            // is rather arbitrary, but it should not be too small.\r\n            for (let i = 0; i < Math.random() * 10; i++) {\r\n                this.incrementNumHits(char);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param seq The typeable sequence corresponding to entries of `chars`.\r\n     * @param chars A collection of unique characters in a written language.\r\n     */\r\n    protected addCharMapping(seq: Lang.Seq, chars: ReadonlyArray<WeightedLangChar>): void {\r\n        if (!(Lang.Seq.REGEXP.test(seq))) {\r\n            throw new RangeError(`Mapping-sequence \\\"${seq}\\\" did not match the`\r\n            + ` required regular expression \\\"${Lang.Seq.REGEXP.source}\\\".`\r\n            );\r\n        } else if (chars.length === 0) {\r\n            throw new Error(\"Must not make mapping without written characters.\");\r\n        }\r\n        let node: LangSeqTreeNode<any> = this; {\r\n            let childNode: LangSeqTreeNode<any> | undefined = this;\r\n            while (childNode) {\r\n                node = childNode;\r\n                childNode = childNode.children.find((child) => seq.startsWith(child.sequence));\r\n            }\r\n        }\r\n        if (node.sequence === seq) {\r\n            // This should never happen.\r\n            throw new Error(`Mappings for all written-characters with a common`\r\n            + `corresponding typeable-sequence should be registered together,`\r\n            + `but an existing mapping for the sequence \\\"${seq}\\\" was found.`\r\n            );\r\n        }\r\n        node.children.push(new LangSeqTreeNode(node, seq, chars));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Incrementing the hit-count makes this node less likely to be\r\n     * used for a shuffle-in. Shuffle-in option searching is easy to\r\n     * taking the viewpoint of leaf-nodes, so this implementation is\r\n     * geared toward indicating hit-count through leaf-nodes, hence\r\n     * the bubble-down of hit-count incrementation.\r\n     *\r\n     * @param balancingScheme -\r\n     * @returns A character / sequence pair from this node that has\r\n     *      been selected the least according to the specified scheme.\r\n     */\r\n    public chooseOnePair(balancingScheme: BalancingScheme): Lang.CharSeqPair {\r\n        const weightedChar = this.characters.slice(0)\r\n            .sort(WeightedLangChar.CMP[balancingScheme])\r\n            .shift()!;\r\n        const pair: Lang.CharSeqPair = {\r\n            char: weightedChar.char,\r\n            seq:  this.sequence,\r\n        };\r\n        this.incrementNumHits(weightedChar);\r\n        return pair;\r\n    }\r\n    private incrementNumHits(hitWeightedChar: WeightedLangChar): void {\r\n        hitWeightedChar.incrementNumHits();\r\n        this.__recursiveIncrementNumHits(hitWeightedChar.weightInv);\r\n    }\r\n    private __recursiveIncrementNumHits(weightInv: number): void {\r\n        this.inheritingHitCount += 1;\r\n        this.inheritingWeightedHitCount += weightInv;\r\n        this.children.forEach((child) => child.__recursiveIncrementNumHits(weightInv));\r\n    }\r\n\r\n    /**\r\n     * Do not call this on a root node.\r\n     *\r\n     * @returns How many hits were made on this node since the last reset.\r\n     */\r\n    protected get personalHitCount(): number {\r\n        return this.inheritingHitCount - (this.parent!).inheritingHitCount;\r\n    }\r\n\r\n    protected get averageCharHitCount(): number {\r\n        return (\r\n            this.characters.reduce<number>((prev, curr) => prev + curr.hitCount, 0)\r\n            / this.characters.length\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Do not call this on a root node.\r\n     *\r\n     * @returns How many hits were made on this node since the last reset.\r\n     */\r\n    protected get personalWeightedHitCount(): number {\r\n        return this.inheritingWeightedHitCount - (this.parent!).inheritingWeightedHitCount;\r\n    }\r\n\r\n    public andNonRootParents(): Array<LangSeqTreeNode> {\r\n        const upstreamNodes: Array<LangSeqTreeNode> = [];\r\n\r\n        let node = this as LangSeqTreeNode;\r\n        while (node.parent) {\r\n            upstreamNodes.push(node);\r\n            node = node.parent;\r\n        }\r\n        return upstreamNodes;\r\n    }\r\n\r\n    public getLeafNodes(): Array<LangSeqTreeNode> {\r\n        const leafNodes: Array<LangSeqTreeNode> = [];\r\n        this.__recursiveGetLeafNodes(leafNodes);\r\n        return leafNodes;\r\n    }\r\n    private __recursiveGetLeafNodes(leafNodes: Array<LangSeqTreeNode>): void {\r\n        if (this.children.length) {\r\n            this.children.forEach((child) => {\r\n                child.__recursiveGetLeafNodes(leafNodes);\r\n            });\r\n        } else {\r\n            leafNodes.push(this as LangSeqTreeNode);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public simpleView(): object {\r\n        let chars = this.characters.map((char) => char.simpleView());\r\n        return Object.assign(Object.create(null), {\r\n            seq: this.sequence,\r\n            chars: (chars.length === 1) ? chars[0] : chars,\r\n            hits: this.personalHitCount,\r\n            kids: this.children.map((child) => child.simpleView()),\r\n            __proto__: undefined,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param a -\r\n     * @param b -\r\n     * @returns -\r\n     */\r\n    public static readonly LEAF_CMP: BalancingScheme.SorterMap<LangSeqTreeNode> = Object.freeze({\r\n        [ BalancingScheme.SEQ ]:    ((a, b) => a.inheritingHitCount - b.inheritingHitCount),\r\n        [ BalancingScheme.CHAR ]:   ((a, b) => a.inheritingHitCount - b.inheritingHitCount),\r\n        [ BalancingScheme.WEIGHT ]: ((a, b) => a.inheritingWeightedHitCount - b.inheritingWeightedHitCount),\r\n    });\r\n\r\n    /**\r\n     * @param a -\r\n     * @param b -\r\n     * @returns -\r\n     */\r\n    public static readonly PATH_CMP: BalancingScheme.SorterMap<LangSeqTreeNode> = Object.freeze({\r\n        [ BalancingScheme.SEQ ]:    ((a, b) => a.personalHitCount - b.personalHitCount),\r\n        [ BalancingScheme.CHAR ]:   ((a, b) => a.averageCharHitCount - b.averageCharHitCount),\r\n        [ BalancingScheme.WEIGHT ]: ((a, b) => a.personalWeightedHitCount - b.personalWeightedHitCount),\r\n    });\r\n\r\n}\r\n\r\n\r\nexport namespace LangSeqTreeNode {\r\n    export class Root extends LangSeqTreeNode<true> {\r\n        public constructor() {\r\n            super(undefined, \"\", []);\r\n        }\r\n        public validateConstruction(): void {\r\n            // nothing.\r\n        }\r\n        public chooseOnePair(balancingScheme: BalancingScheme): never {\r\n            throw new TypeError(\"Must never hit on the root.\");\r\n        }\r\n        protected get personalHitCount(): number {\r\n            throw new TypeError(\"Must never hit on the root.\");\r\n        }\r\n        protected get personalWeightedHitCount(): never {\r\n            throw new TypeError(\"Must never hit on the root.\");\r\n        }\r\n        public andNonRootParents(): never {\r\n            throw new TypeError();\r\n        }\r\n        public simpleView(): object {\r\n            return this.children.map((child) => child.simpleView());\r\n        }\r\n    }\r\n}\r\nObject.freeze(LangSeqTreeNode);\r\nObject.freeze(LangSeqTreeNode.prototype);\r\n\r\n\r\n\r\n/**\r\n * Has no concept of an associated typeable sequence. Used to associate\r\n * a written character to a relative frequency of occurrence in samples\r\n * of writing, and to keep a counter for how many times this character\r\n * has been shuffled-in in the current game session.\r\n *\r\n * Not exported.\r\n */\r\nclass WeightedLangChar {\r\n\r\n    public readonly char: Lang.Char;\r\n\r\n    /**\r\n     * A weight is relative to weights of other unique characters in\r\n     * the contextual language. A character with a higher weight, when\r\n     * using the {@link BalancingScheme#WEIGHT} scheme, will have a\r\n     * higher shuffle-in priority than characters with a lower weight.\r\n     *\r\n     * Specifically, using the {@link BalancingScheme#WEIGHT} scheme,\r\n     * a character `cA` with a weight `N` times that of another `cB`\r\n     * will, on average, be returned `N` times more often by the\r\n     * {@link LangSeqTreeNode#chooseOnePair} method than `cB`.\r\n     *\r\n     * This is implemented using counters that last for the lifetime\r\n     * of one game, and increment for a chosen character by the inverse\r\n     * of its weight every time it is chosen. Choosing the character\r\n     * with the lowest such counter at a given time will produce the\r\n     * desired effect:\r\n     *\r\n     * If there are three characters mapped with weights `cA: 1`, `cB:\r\n     * 2`, `cC: 3`, and share no prefixing substrings and we pretend\r\n     * that there are never any sequences to avoid when shuffling in\r\n     * characters, then the results of consecutive calls should produce\r\n     * something like: `A(0), B(0), C(0), A(1/3), B(1/2), A(2/3),\r\n     * (repeat forever)`, where the bracketed values are their weighted\r\n     * hit-counts before they were returned, since the last reset.\r\n     */\r\n    public readonly weightInv: number;\r\n    public hitCount: number;\r\n    public weightedHitCount: number;\r\n\r\n    public constructor(\r\n        char: Lang.Char,\r\n        weight: number,\r\n    ) {\r\n        if (weight <= 0) {\r\n            throw new RangeError(`All weights must be positive, but we`\r\n            + ` were passed the value \\\"${weight}\\\" for the character`\r\n            + ` \\\"${char}\\\".`);\r\n        }\r\n        this.char = char;\r\n        this.weightInv = 1.000 / weight;\r\n        // The above choice of a numerator is not behaviourally significant.\r\n        // All that is required is that all single-mappings in a `Lang` use\r\n        // a consistent value.\r\n    }\r\n\r\n    public reset(): void {\r\n        this.hitCount = 0;\r\n        this.weightedHitCount = 0.000;\r\n    }\r\n\r\n    public incrementNumHits(): void {\r\n        this.hitCount += 1;\r\n        this.weightedHitCount += this.weightInv;\r\n    }\r\n\r\n    public simpleView(): object {\r\n        return Object.assign(Object.create(null), {\r\n            char: this.char,\r\n            hits: this.hitCount,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param a -\r\n     * @param b -\r\n     * @returns -\r\n     */\r\n    public static readonly CMP: BalancingScheme.SorterMap<WeightedLangChar> = Object.freeze({\r\n        [ BalancingScheme.SEQ ]:    (a, b) => a.hitCount - b.hitCount, // design choice.\r\n        [ BalancingScheme.CHAR ]:   (a, b) => a.hitCount - b.hitCount,\r\n        [ BalancingScheme.WEIGHT ]: (a, b) => a.weightedHitCount - b.weightedHitCount,\r\n    });\r\n};\r\nObject.freeze(WeightedLangChar);\r\nObject.freeze(WeightedLangChar.prototype);\r\n","\r\n\r\nexport class Player<S> { }\r\nexport namespace Player {\r\n\r\n    /**\r\n     * @enum\r\n     * Each implementation of the {@link ArtificialPlayer} class must\r\n     * have an entry here.\r\n     */\r\n    export type Family = keyof typeof Family;\r\n    export const Family = Object.freeze(<const>{\r\n        HUMAN:  \"HUMAN\",\r\n        CHASER: \"CHASER\",\r\n    });\r\n    Family as { [ key in Family ]: key };\r\n\r\n    /**\r\n     * See the main documentation in game/player/Player.\r\n     */\r\n    export type Id = number;\r\n\r\n    export namespace Id {\r\n        /**\r\n         * See the main documentation in game/player/Player.\r\n         */\r\n        export const NULL = undefined;\r\n        export type Nullable = Player.Id | typeof Player.Id.NULL;\r\n    }\r\n\r\n    /**\r\n     * See the main documentation in game/player/Player.\r\n     */\r\n    export type Health = number;\r\n}\r\nObject.freeze(Player);\r\nObject.freeze(Player.prototype);\r\n\r\n\r\nexport class Lang {}\r\nexport namespace Lang {\r\n    /**\r\n     * See the main documentation in game/lang/Lang\r\n     */\r\n    export type Char = string;\r\n    /**\r\n     * See the main documentation in game/lang/Lang\r\n     */\r\n    export type Seq = string;\r\n    /**\r\n     * See the main documentation in game/lang/Lang\r\n     */\r\n    export type CharSeqPair = Readonly<{\r\n        char: Lang.Char,\r\n        seq:  Lang.Seq,\r\n    }>;\r\n    export namespace CharSeqPair {\r\n        /**\r\n         * Used to clear the {@link CharSeqPair} in a {@link Tile} during\r\n         * a {@link Game} reset before grid-wide shuffling, or before a\r\n         * single shuffling operation on the {@link Tile} to be shuffled.\r\n         */\r\n        export const NULL = Object.freeze(<const>{\r\n            char: \"\",\r\n            seq:  \"\",\r\n        });\r\n    }\r\n\r\n    /***\r\n     * There are three string for each language!\r\n     * - The object key string is for use in the ts/js code, hence the casing.\r\n     * - The display name is for display purposes. Special characters are OK.\r\n     * - The id name is a shorter string for web-storage keys and a URL query.\r\n     */\r\n    export const Names = Object.freeze(<const>{\r\n        ENGLISH__LOWERCASE: {\r\n            display: \"English Lowercase (QWERTY)\",\r\n            id: \"engl-low\",\r\n        },\r\n        ENGLISH__MIXEDCASE: {\r\n            display: \"English Mixed-Case (QWERTY)\",\r\n            id: \"engl-mix\",\r\n        },\r\n        JAPANESE__HIRAGANA: {\r\n            display: \"Japanese Hiragana\",\r\n            id: \"japn-hir\",\r\n        },\r\n        JAPANESE__KATAKANA: {\r\n            display: \"Japanese Katakana\",\r\n            id: \"japn-kat\",\r\n        },\r\n        KOREAN__DUBEOLSIK: {\r\n            display: \"Korean Dubeolsik (두벌식 키보드)\",\r\n            id: \"kore-dub\",\r\n        },\r\n        KOREAN__SEBEOLSIK: {\r\n            display: \"Korean Sebeolsik (세벌식 최종 키보드)\",\r\n            id: \"kore-sub\",\r\n        },\r\n        KOREAN__ROMANIZATION: {\r\n            display: \"Korean Revised Romanization\",\r\n            id: \"kore-rom\",\r\n        },\r\n    });\r\n    Names as Record<string, { display: string, id: string, }>;\r\n    export namespace Names {\r\n        export type Key = keyof typeof Names;\r\n        export type Value = typeof Names[keyof typeof Names];\r\n    }\r\n\r\n    // Common remapping functions.\r\n    export const __RemapTemplates = Object.freeze(<const>{\r\n        IDENTITY: (input: string): string => input,\r\n        TO_LOWER: (input: string): string => input.toLowerCase(),\r\n    });\r\n    __RemapTemplates as Readonly<Record<string, {(input: string): string}>>;\r\n\r\n    /**\r\n     *\r\n     * This can be used, for example, for basic practical purposes like\r\n     * changing all letters to lowercase for the English language, or for\r\n     * more interesting things like mapping halves of the keyboard to a\r\n     * binary-like value like the dots and dashes in morse, or zeros and\r\n     * ones in binary. It could even be used for some crazy challenges like\r\n     * remapping the alphabet by barrel-shifting it so that pressing \"a\"\r\n     * produces \"b\", and \"b\" produces \"c\", and so on.\r\n     *\r\n     * The output should either equal the input (in cases that the input\r\n     * is already relevant to the `Lang` at hand and is intended to be\r\n     * taken as-is (ex. typing \"a\" produces / corresponds to \"a\" in\r\n     * regular English), or in cases where the input is completely\r\n     * irrelevant before and after remapping), or be a translation to\r\n     * some character that is relevant to the `Lang` and hand, and that\r\n     * matches against {@link SEQ_REGEXP}. This behaviour is mandated\r\n     * by {@link OperatorPlayer#seqBufferAcceptKey}.\r\n     *\r\n     * @param input -\r\n     * @returns\r\n     */\r\n    export const RemappingFunctions\r\n    : Readonly<Record<Names.Value[\"id\"], {(input: string): string}>>\r\n    = Object.freeze(<const>{\r\n        [ Names.ENGLISH__LOWERCASE.id ]: __RemapTemplates.TO_LOWER,\r\n        [ Names.ENGLISH__MIXEDCASE.id ]: __RemapTemplates.IDENTITY,\r\n        [ Names.JAPANESE__HIRAGANA.id ]: __RemapTemplates.TO_LOWER,\r\n        [ Names.JAPANESE__KATAKANA.id ]: __RemapTemplates.TO_LOWER,\r\n        [ Names.KOREAN__DUBEOLSIK.id  ]: __RemapTemplates.IDENTITY,\r\n        [ Names.KOREAN__SEBEOLSIK.id  ]: __RemapTemplates.IDENTITY,\r\n        [ Names.KOREAN__ROMANIZATION.id]:__RemapTemplates.TO_LOWER,\r\n    });\r\n}\r\nObject.freeze(Lang);\r\nObject.freeze(Lang.prototype);\r\n","import { SoundSettings } from \"./Sound\";\r\n\r\n\r\nexport abstract class GameSetting {\r\n\r\n    abstract get selectedValue(): any;\r\n}\r\n\r\n\r\n/**\r\n * Follows a singleton pattern since it is bound with parts of the UI\r\n * and sets up and maintains those elements.\r\n *\r\n * Non-Privileged (non-global) Settings:\r\n * - Volume / Mute\r\n * - Color theme\r\n */\r\nexport class LocalGameSettings {\r\n\r\n    private static SINGLETON?: LocalGameSettings = undefined;\r\n\r\n    public static getInstance(): LocalGameSettings {\r\n        if (!LocalGameSettings.SINGLETON) {\r\n            LocalGameSettings.SINGLETON = new LocalGameSettings();\r\n        }\r\n        return LocalGameSettings.SINGLETON;\r\n    }\r\n\r\n    public readonly sound: SoundSettings;\r\n\r\n\r\n    private constructor() {\r\n        this.sound = new SoundSettings();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Follows a singleton pattern since it is bound with parts of the UI\r\n * and sets up and maintains those elements.\r\n *\r\n * Privileged (global) Settings:\r\n * - Pause button\r\n * - Restart button\r\n * - Game dimensions (requires reset)\r\n * - Lang selection (requires reset)\r\n * - Balancing Scheme\r\n * - Spice button\r\n * - Difficulty\r\n */\r\nexport class GlobalGameSettings {\r\n\r\n    private static SINGLETON?: GlobalGameSettings = undefined;\r\n\r\n    public static getInstance(): GlobalGameSettings {\r\n        if (!GlobalGameSettings.SINGLETON) {\r\n            GlobalGameSettings.SINGLETON = new GlobalGameSettings();\r\n        }\r\n        return GlobalGameSettings.SINGLETON;\r\n    }\r\n\r\n    public langBalancingScheme: GameSetting; // TODO.impl create class and use its type here.\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport class SoundSettings {\r\n\r\n    public constructor() {\r\n\r\n    }\r\n\r\n}\r\n","\r\n/**\r\n * Must be matched exactly in the html, css, and javascript.\r\n *\r\n * Dataset values are defined for the javascript domain. The CSS should\r\n * use the CSS-cased version with dash-separators.\r\n *\r\n * Things that don't go here:\r\n * - Event names go in `src/base/game/events`.\r\n * - Sound file names go in `./Sound.ts`\r\n */\r\nexport namespace WebHooks {\r\n\r\n    export const General = Object.freeze(<const>{\r\n        Class: Object.freeze(<const>{\r\n            FILL_PARENT: \"fill-parent\",\r\n        }),\r\n    });\r\n\r\n\r\n    export const Tile = Object.freeze(<const>{\r\n        Class: Object.freeze(<const>{\r\n            BASE:       \"tile\",\r\n            LANG_CHAR:  \"tile__char\",\r\n            LANG_SEQ:   \"tile__seq\",\r\n        }),\r\n        Dataset: Object.freeze(<const>{\r\n            HEALTH:     \"health\",\r\n        }),\r\n    });\r\n\r\n\r\n    export const Grid = Object.freeze(<const>{\r\n        Id: Object.freeze(<const>{\r\n            /**\r\n             * js/ts and html are allowed to prepend or append to this\r\n             * string. The specified element should _only_ contain the\r\n             * grid element. Anything else will be removed by js/ts.\r\n             */\r\n            GRID:       \"game-grid\",\r\n        }),\r\n        Class: Object.freeze(<const>{\r\n            GRID:       \"game-grid\",\r\n            IMPL_BODY:  \"game-grid__impl-body\",\r\n            SPOTLIGHT:  \"game-grid__spotlight\",\r\n            KBD_DC_ICON:\"game-grid__kbd-dc-icon\",\r\n        }),\r\n        Dataset: Object.freeze(<const>{\r\n            /**\r\n             * Used as a part of CSS selector queries to specify coord-\r\n             * system-specific styling.\r\n             */\r\n            COORD_SYS:  \"coordSys\",\r\n        }),\r\n    });\r\n\r\n\r\n    export const Player = Object.freeze(<const>{\r\n        Class: Object.freeze(<const>{\r\n            BASE:       \"player\",\r\n            DOWNED_OVERLAY: \"player__downed-overlay\",\r\n        }),\r\n        Dataset: Object.freeze(<const>{\r\n            DOWNED:     \"downed\",\r\n            FACE_SWATCH:\"face\",\r\n        }),\r\n    });\r\n\r\n\r\n    export const Ui = Object.freeze(<const>{\r\n        Class: Object.freeze(<const>{\r\n        }),\r\n    });\r\n\r\n\r\n    /**\r\n     * Final CSS variables declared for each color scheme are in the\r\n     * form: `--colour-schemeId-swatchName`. js/ts should not need to\r\n     * interface with these values directly. Instead, it should use\r\n     * provided class names and dataset attributes as to minimize its\r\n     * effort when colour schemes are swapped.\r\n     */\r\n    export namespace Colour {\r\n        export const Swatch = Object.freeze(<const>[\r\n            \"mainFg\", \"mainBg\",\r\n            \"tileFg\", \"tileBg\", \"tileBd\",\r\n            \"health\",\r\n            \"pFaceMe\",\r\n            \"pFaceTeammate\", \"pFaceImmortalTeammate\",\r\n            \"pFaceOpponent\", \"pFaceImmortalOpponent\",\r\n        ]);\r\n        /**\r\n         * The scheme id `selected` is a special value and should not\r\n         * be used.\r\n         */\r\n        export const Scheme = Object.freeze(<const>{\r\n            [\"snakey\"]: Object.freeze(<const>{\r\n                displayName: \"Snakey by N.W.\",\r\n            }),\r\n        });\r\n        export namespace Scheme {\r\n            export type Id = keyof typeof Scheme;\r\n        }\r\n    }\r\n    Object.freeze(Colour);\r\n\r\n\r\n    /**\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n     * https://www.w3schools.com/html/html5_webstorage.asp\r\n     */\r\n    export const WebStorageKeys = Object.freeze(<const>{\r\n        RecentCoordSystem: \"recent-coord-system\",\r\n        RecentLang: \"recent-lang\",\r\n    });\r\n\r\n    type HookDict = {\r\n        [ DictKey in \"Id\" | \"Class\" | \"Dataset\" ]?: Readonly<{\r\n            [ JsHook: string ]: string;\r\n        }>;\r\n    };\r\n\r\n}\r\nObject.freeze(WebHooks);\r\n"],"sourceRoot":""}
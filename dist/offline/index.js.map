{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/base/floor/Grid.ts","webpack:///./src/base/floor/impl/Beehive.ts","webpack:///./src/base/floor/impl/Euclid2.ts","webpack:///./src/base/game/PostInit.ts","webpack:///./src/base/game/__gameparts/Manager.ts","webpack:///./src/base/game/player/ArtificialPlayer.ts","webpack:///./src/base/game/player/artificials/Chaser.ts","webpack:///./src/base/lang/impl/English.ts","webpack:///./src/offline/OfflineGame.ts","webpack:///./src/offline/index.ts"],"names":[],"mappings":"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","file":"offline/index.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"offline\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/offline/index.ts\",\"client~offline\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Coord, Tile } from \"./Tile\";\r\nimport { TileGetter } from \"./TileGetter\";\r\n\r\nimport type { Euclid2 } from \"./impl/Euclid2\";\r\nimport type { Beehive } from \"./impl/Beehive\";\r\nimport { WebHooks } from \"../../browser/WebHooks\";\r\nimport { VisibleGrid } from 'floor/VisibleGrid';\r\n\r\n\r\n/**\r\n * # 🗺 The Grid Class\r\n *\r\n * A Collection of Tiles.\r\n */\r\nexport abstract class Grid<S extends Coord.System> implements TileGetter.Source<S> {\r\n\r\n    // A type-annotated alias to this.constructor.\r\n    public readonly static: Grid.ClassIf<S>;\r\n\r\n    public readonly dimensions: Grid.Dimensions<S>;\r\n\r\n    public get area(): number {\r\n        return this.static.getArea(this.dimensions);\r\n    }\r\n\r\n    public readonly tile: TileGetter<S,[Coord.Bare<S>]>;\r\n\r\n\r\n    /**\r\n     * Protected. See `Grid.getImplementation` for how to access class\r\n     * literals for construction.\r\n     *\r\n     * _Does not call reset._\r\n     *\r\n     * @param desc -\r\n     */\r\n    protected constructor(desc: Grid.CtorArgs<S>) {\r\n        this.static = desc.gridClass;\r\n        this.dimensions = desc.dimensions;\r\n        this.tile = new TileGetter(this);\r\n    }\r\n\r\n    /**\r\n     * Calls {@link Tile#reset} for each {@link Tile} in this `Grid`.\r\n     */\r\n    public reset(): void {\r\n        this.forEachTile((tile) => tile.reset());\r\n    }\r\n\r\n    /**\r\n     * Performs simple checks that the grid is playable.\r\n     *\r\n     * - Each tile in the grid has a non-self destination (coord#equals).\r\n     * - (compute-heavyish): Each tile follows Impl.getAmbiguityThreshold\r\n     */\r\n    protected check(): void {\r\n        // Check that\r\n    }\r\n\r\n\r\n    public abstract forEachTile(consumer: (tile: Tile<S>) => void, thisArg?: object): void;\r\n\r\n    /**\r\n     * @returns\r\n     * One of the closest unoccupied neighbouring tiles toward the\r\n     * direction of `intendedDest`. When possible, ties are encouraged\r\n     * to be broken in such a way that imitates movement in a straight\r\n     * path (visually speaking).\r\n     *\r\n     * **Important:** The caller must first break the upward occupancy\r\n     * link by calling `this.hostTile.evictOccupant();` This is so that\r\n     * the current position of this `ArtificialPlayer` will always be\r\n     * an option when everything adjacent to it is occupied.\r\n     *\r\n     * @param sourceCoord\r\n     * The coordinate from which to find the next hop.\r\n     *\r\n     * @param intendedDest\r\n     * Does not need to be within the boundaries of the {@link Game}'s\r\n     * grid, or have integer-valued coordinate values.\r\n     */\r\n   public abstract getUntToward(sourceCoord: Coord<S>, intendedDest: Coord<S>): Tile<S>;\r\n\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public abstract __getTileAt(coord: Coord.Bare<S>): Tile<S>;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public abstract __getTileDestsFrom(coord: Coord.Bare<S>): Array<Tile<S>>;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public abstract __getTileSourcesTo(coord: Coord.Bare<S>): Array<Tile<S>>;\r\n\r\n    /**\r\n     * Note: I would rather have this implementation go under the\r\n     * `VisibleGrid` class, but I don't want to get into mixins as of\r\n     * now to get around no-multiple-inheritance.\r\n     *\r\n     * @param desc -\r\n     * @param gridElem -\r\n     */\r\n    public __VisibleGrid_super(desc: Grid.CtorArgs<S>, gridElem: HTMLElement): void {\r\n        const WHG = WebHooks.Grid;\r\n        gridElem.classList.add(WHG.Class.IMPL_BODY);\r\n        const hostElem = document.getElementById(desc.domGridHtmlIdHook);\r\n        if (!hostElem) {\r\n            throw new RangeError(`The ID \\\"${desc.domGridHtmlIdHook}\\\"`\r\n            + ` did not refer to an existing html element.`);\r\n        }\r\n        hostElem.dataset[WHG.Dataset.COORD_SYS] = desc.coordSys;\r\n        if (!hostElem.classList.contains(WHG.Class.GRID)) {\r\n            // throw new Error(`The grid host element is missing the token`\r\n            // + ` \\\"${WHG.Class.GRID}\\\" in its class list.`\r\n            // );\r\n            hostElem.classList.add(WHG.Class.GRID);\r\n        } {\r\n            // Add a \"keyboard-disconnected\" icon if not added already:\r\n            let kbdDcIcon: HTMLElement | null = hostElem\r\n                .querySelector(`:scope > .${WHG.Class.KBD_DC_ICON}`);\r\n            if (!kbdDcIcon) {\r\n                // TODO.impl Add an <svg> with icon instead please.\r\n                kbdDcIcon = document.createElement(\"div\");\r\n                kbdDcIcon.classList.add(WHG.Class.KBD_DC_ICON);\r\n                kbdDcIcon.innerText = \"(click grid to continue typing)\";\r\n                hostElem.appendChild(kbdDcIcon);\r\n            }\r\n        }\r\n        if (hostElem.tabIndex !== 0) {\r\n            throw new Error(\"The DOM grid's host must have a tabIndex of zero!\"\r\n            + \" I want this done directly in the HTML.\");\r\n        }\r\n        // Remove all child elements from host and then append the new grid:\r\n        hostElem.querySelectorAll(`.${WHG.Class.IMPL_BODY}`).forEach((node) => node.remove());\r\n        hostElem.appendChild(gridElem);\r\n        (this as TU.NoRo<Grid<S>> as TU.NoRo<VisibleGrid<S>>).hostElem = hostElem;\r\n    }\r\n\r\n}\r\nexport namespace Grid {\r\n\r\n    /**\r\n     * Values do not _need_ to be in range or integers.\r\n     */\r\n    export type Dimensions<S extends Coord.System>\r\n        = S extends Coord.System.EUCLID2 ? Euclid2.Grid.Dimensions\r\n        : S extends Coord.System.BEEHIVE ? Beehive.Grid.Dimensions\r\n        : never;\r\n\r\n    // ==============================================================\r\n    // Note: The below exports do not require any modifications with\r\n    // the additions of new coordinate systems.\r\n    // ==============================================================\r\n\r\n    export type CtorArgs<S extends Coord.System> = {\r\n        gridClass: Grid.ClassIf<S>;\r\n        tileClass: Tile.ClassIf<S>;\r\n        coordSys: S;\r\n        dimensions: Dimensions<S>;\r\n        domGridHtmlIdHook: string;\r\n    };\r\n\r\n    /**\r\n     * Used to simulate abstract static methods.\r\n     */\r\n    export interface ClassIf<S extends Coord.System> {\r\n\r\n        /**\r\n         * Constructor\r\n         */\r\n        new(desc: CtorArgs<S>): Grid<S>;\r\n\r\n        /**\r\n         * @returns\r\n         * From the caller's point of view, the ambiguity floor is the\r\n         * minimum number of leaf nodes a language must have to be\r\n         * playable with this coordinate system's grid.\r\n         *\r\n         * From the specification's point of view, it is the promised\r\n         * maximum size- for any tile in the grid- of the set of all\r\n         * destinations from sources to itself, excluding itself.\r\n         */\r\n        // TODO.test write a test that checks that this holds for each implementation?\r\n        getAmbiguityThreshold(): number;\r\n\r\n        /**\r\n         * @see Grid.DimensionBounds\r\n         */\r\n        getSizeLimits(): Grid.DimensionBounds<S>;\r\n\r\n        /**\r\n         * @returns\r\n         * The number of Tiles that could fit in a Grid of such bounds.\r\n         *\r\n         * @param bounds -\r\n         */\r\n        getArea(bounds: Dimensions<S>): number;\r\n\r\n        /**\r\n         * @returns\r\n         * A coordinate with random, integer-valued fields within the\r\n         * specified upper limits\r\n         *\r\n         * @param boundX An exclusive bound on x-coordinate.\r\n         * @param boundY An exclusive bound on y-coordinate. Optional. Defaults to `boundX`.\r\n         */\r\n        getRandomCoord(bounds: Dimensions<S>): Coord<S>;\r\n\r\n        /**\r\n         * Return values do not need to be the same for repeated calls\r\n         * with identical arguments. None of the returned coordinates\r\n         * should be the same.\r\n         *\r\n         * @param playerCounts -\r\n         */\r\n        getSpawnCoords(\r\n            playerCounts: number,\r\n            dimensions: Dimensions<S>,\r\n        ): ReadonlyArray<Coord.Bare<S>>;\r\n\r\n    };\r\n\r\n    // Each implementation must register itself into this dictionary.\r\n    export declare const __Constructors: {\r\n        readonly [ S in Coord.System ]: Grid.ClassIf<S>\r\n    };\r\n\r\n    /**\r\n     * @returns\r\n     * A Grid class for the specified coordinate system.\r\n     *\r\n     * @param coordSys -\r\n     */\r\n    export const getImplementation = <S extends Coord.System>(coordSys: S): ClassIf<S> => {\r\n        // Note: At the time of writing this, separating this into\r\n        // two lines is necessary (otherwise Typescript will feel\r\n        // overwhelmed)\r\n        const ctor = __Constructors[coordSys];\r\n        return ctor as unknown as ClassIf<S>;\r\n    };\r\n\r\n    /**\r\n     * Bounds are inclusive. Ie. the specified values are _just_ allowed.\r\n     *\r\n     * Upper and lower bounds must be strictly positive integer values.\r\n     */\r\n    export type DimensionBounds<S extends Coord.System> = Readonly<{\r\n        [ P in keyof Dimensions<S> ]: Readonly<{\r\n            min: number;\r\n            max: number;\r\n        }>;\r\n    }>;\r\n\r\n}\r\n// Grid gets frozen in PostInit after __Constructors get initialized.\r\n","import { Coord as BaseCoord, Tile } from \"../Tile\";\r\nimport type { VisibleTile } from \"floor/VisibleTile\";\r\nimport { Grid as AbstractGrid } from \"../Grid\";\r\nimport { VisibleGrid } from \"../VisibleGrid\";\r\n\r\n\r\ntype S = BaseCoord.System.BEEHIVE;\r\n\r\n/**\r\n * # 🐝 BEES !\r\n *\r\n * # 🐝 BEES !\r\n *\r\n * # 🐝 BEES !\r\n *\r\n * ```text\r\n *   ___   ___\r\n *  //  \\_//  \\__\r\n *  \\\\__/  \\__/  \\\r\n *     \\\\__/ \\\\__/\r\n * ```\r\n *\r\n *\r\n * [(bees)](https://giphy.com/gifs/oprah-bees-VhFps32TlNgsg)\r\n */\r\nexport namespace Beehive {\r\n\r\n    /**\r\n     * # Beehive Coord\r\n     */\r\n    export class Coord extends BaseCoord.Abstract.Mathy<S> implements Coord.Bare {\r\n\r\n        /**\r\n         * # 🕒 3'o'clock direction\r\n         */\r\n        public readonly dash: number;\r\n\r\n        /**\r\n         * # 🕔 5'o'clock direction\r\n         */\r\n        public readonly bash: number;\r\n\r\n        public constructor(desc: Coord.Bare) {\r\n            super(desc);\r\n            this.dash = desc.dash;\r\n            this.bash = desc.bash;\r\n            Object.freeze(this);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public equals(other: Coord.Bare): boolean {\r\n            return (this.dash === other.dash) && (this.bash === other.bash);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public round(): Coord {\r\n            // I'm pretty proud of this despite the fact that I don't\r\n            // think there's anything very impressive about it.\r\n            const floorDash = Math.floor(this.dash);\r\n            const floorBash = Math.floor(this.bash);\r\n            const d = floorDash - this.dash;\r\n            const b = floorBash - this.bash;\r\n            if (d > 2 * b) {\r\n                return new Coord({ dash: floorDash+1, bash: floorBash  , });\r\n            } else if (d < 0.5 * b) {\r\n                return new Coord({ dash: floorDash  , bash: floorBash+1, });\r\n            } else if (Math.min(d, b) > 0.5) {\r\n                return new Coord({ dash: floorDash+1, bash: floorBash+1, });\r\n            } else {\r\n                return new Coord({ dash: floorDash  , bash: floorBash  , });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public add(other: Coord.Bare): Coord {\r\n            return new Coord({\r\n                dash: this.dash + other.dash,\r\n                bash: this.bash + other.bash,\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public sub(other: Coord.Bare): Coord {\r\n            return new Coord({\r\n                dash: this.dash - other.dash,\r\n                bash: this.bash - other.bash,\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public mul(scalar: number): Coord {\r\n            return new Coord({\r\n                dash: scalar * this.dash,\r\n                bash: scalar * this.bash,\r\n            });\r\n        }\r\n    }\r\n\r\n    export namespace Coord {\r\n        export type Bare = Readonly<{\r\n            dash: number;\r\n            bash: number;\r\n        }>;\r\n    }\r\n    Object.freeze(Coord);\r\n    Object.freeze(Coord.prototype);\r\n\r\n\r\n\r\n    /**\r\n     * # Beehive Grid\r\n     */\r\n    export class Grid extends AbstractGrid<S> {\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getAmbiguityThreshold(): 18 {\r\n            return 18;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getSizeLimits(): AbstractGrid.DimensionBounds<S> { return this.SIZE_LIMITS; }\r\n        private static readonly SIZE_LIMITS = Object.freeze({\r\n            dash:    Object.freeze({ min: 10, max: 50, }),\r\n            bslash:  Object.freeze({ min: 10, max: 50, }),\r\n            fslash:  Object.freeze({ min: 10, max: 50, }),\r\n        });\r\n\r\n        /**\r\n         *\r\n         */\r\n        // TODO.design determine spec for indexing\r\n        // Then initialize the field in the constructor\r\n        // Also design HTML representation and initialize in Grid.Visible\r\n        private readonly grid: ReadonlyArray<ReadonlyArray<Tile<S>>>;\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n            super(desc);\r\n\r\n            // Initialize `grid`:\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public forEachTile(consumer: (tile: Tile<S>) => void, thisArg: object = this): void {\r\n            this.grid.forEach((row) => row.forEach((tile) => {\r\n                consumer(tile);\r\n            }, thisArg), thisArg);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public getUntToward(sourceCoord: Coord, intendedDest: Coord.Bare): Tile<S> {\r\n            return undefined!;\r\n        }\r\n\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileAt(coord: Coord.Bare): Tile<S> {\r\n            return undefined!;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileDestsFrom(coord: Coord.Bare): Array<Tile<S>> {\r\n            return undefined!;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileSourcesTo(coord: Coord.Bare): Array<Tile<S>> {\r\n            return undefined!;\r\n        }\r\n\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getSpawnCoords(\r\n            playerCounts: number,\r\n            dimensions: Grid.Dimensions,\r\n        ): ReadonlyArray<Coord.Bare> {\r\n            return undefined!;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getArea(dim: Grid.Dimensions): number {\r\n            const shorterSide = Math.min(dim.fslash, dim.bslash);\r\n            const longerSide  = Math.max(dim.fslash, dim.bslash);\r\n            const width = (-1) + dim.dash + shorterSide;\r\n            let area = 2 * shorterSide * (dim.dash + width);\r\n            area += (longerSide - shorterSide - 1) * width;\r\n            return area;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getRandomCoord(dimensions: Grid.Dimensions): Coord {\r\n            return new Coord(undefined!);\r\n        }\r\n    }\r\n\r\n    export namespace Grid {\r\n        export type Dimensions = {\r\n            dash: number;\r\n            bslash: number;\r\n            fslash: number;\r\n        };\r\n\r\n        export class Visible extends Grid implements VisibleGrid<S> {\r\n            public readonly hostElem: HTMLElement;\r\n            public constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n                super(desc);\r\n                const domGrid: HTMLElement = undefined!;\r\n                // TODO.impl Beehive VisibleGrid ctor.\r\n                this.__VisibleGrid_super(desc, domGrid);\r\n            }\r\n        }\r\n    }\r\n    Object.freeze(Grid);\r\n    Object.freeze(Grid.prototype);\r\n\r\n}\r\nObject.freeze(Beehive);\r\n","import { Coord as BaseCoord, Tile } from \"../Tile\";\r\nimport type { VisibleTile } from \"floor/VisibleTile\";\r\nimport { Grid as AbstractGrid } from \"../Grid\";\r\nimport { VisibleGrid } from \"../VisibleGrid\";\r\n\r\n\r\ntype S = BaseCoord.System.EUCLID2;\r\n\r\n/**\r\n *\r\n */\r\nexport namespace Euclid2 {\r\n\r\n    /**\r\n     * # Euclid2 Coord\r\n     */\r\n    export class Coord extends BaseCoord.Abstract.Mathy<S> implements Coord.Bare {\r\n\r\n        public readonly x: number;\r\n        public readonly y: number;\r\n\r\n        public constructor(desc: Coord.Bare) {\r\n            super(desc);\r\n            this.x = desc.x;\r\n            this.y = desc.y;\r\n            Object.freeze(this);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public equals(other: Coord.Bare): boolean {\r\n            return (this.x === other.x) && (this.y === other.y);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public round(): Coord {\r\n            return new Coord({\r\n                x: Math.round(this.x),\r\n                y: Math.round(this.y),\r\n            });\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Also known as the \"manhattan norm\".\r\n         *\r\n         * _Do not override this._\r\n         *\r\n         * @param other - The norm is taken relative to `other`.\r\n         * @returns The sum of the absolute values of each coordinate.\r\n         */\r\n        public oneNorm(other: Coord.Bare): number {\r\n            return this.sub(other).originOneNorm();\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public originOneNorm(): number {\r\n            return Math.abs(this.x) + Math.abs(this.y);\r\n        }\r\n\r\n        /**\r\n         *\r\n         * _Do not override this._\r\n         *\r\n         * @param other - The norm is taken relative to `other`.\r\n         * @returns The length of the longest dimension.\r\n         */\r\n        public infNorm(other: Coord.Bare): number {\r\n            return this.sub(other).originInfNorm();\r\n        }\r\n\r\n        public originInfNorm(): number {\r\n            return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n        }\r\n\r\n        /**\r\n         * @returns\r\n         * A number in the range (0, 1). `One` means the x and y coordinates\r\n         * align to the x or y axis, and `Zero` means they are plus or minus\r\n         * 45 degrees from the x or y axis.\r\n         *\r\n         * You can try this yourself in [Desmos](https://www.desmos.com/calculator)\r\n         * by pasting in the below code segment and adding a slider for `a`\r\n         * for continuous values between zero and one.\r\n         *\r\n         * ```latex\r\n         * \\frac{\\left|\\left|x\\right|-\\left|y\\right|\\right|}{\\left|x\\right|+\\left|y\\right|}=a\r\n         * ```\r\n         *\r\n         * @param other - The alignment is taken relative to `other`.\r\n         */\r\n        public axialAlignment(other: Coord.Bare): number {\r\n            return this.sub(other).originAxialAlignment();\r\n        }\r\n\r\n        public originAxialAlignment(): number {\r\n            return Math.abs(Math.abs(this.x) - Math.abs(this.y))\r\n                / (Math.abs(this.x) + Math.abs(this.y));\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public add(other: Coord.Bare): Coord {\r\n            return new Coord({\r\n                x: this.x + other.x,\r\n                y: this.y + other.y,\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public sub(other: Coord.Bare): Coord {\r\n            return new Coord({\r\n                x: this.x - other.x,\r\n                y: this.y - other.y,\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public mul(scalar: number): Coord {\r\n            return new Coord({\r\n                x: scalar * this.x,\r\n                y: scalar * this.y,\r\n            });\r\n        }\r\n    }\r\n\r\n    export namespace Coord {\r\n        export type Bare = Readonly<{\r\n            x: number;\r\n            y: number;\r\n        }>;\r\n    }\r\n    Object.freeze(Coord);\r\n    Object.freeze(Coord.prototype);\r\n\r\n\r\n\r\n    /**\r\n     * # Euclid2 Grid\r\n     */\r\n    export class Grid extends AbstractGrid<S> {\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getAmbiguityThreshold(): 24 {\r\n            return 24;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getSizeLimits(): AbstractGrid.DimensionBounds<S> { return this.SIZE_LIMITS; }\r\n        private static readonly SIZE_LIMITS = Object.freeze(<const>{\r\n            height: Object.freeze(<const>{ min: 10, max: 50, }),\r\n            width:  Object.freeze(<const>{ min: 10, max: 50, }),\r\n        });\r\n\r\n        /**\r\n         * A 2-dimensional rectangular array with height and width following\r\n         * their corresponding fields, containing `Tile` objects with `pos`\r\n         * fields allowing indexing to themselves. Uses _row-major_ ordering.\r\n         */\r\n        protected readonly grid: TU.RoArr<TU.RoArr<Tile<S>>>;\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n            super(desc);\r\n\r\n            const grid: Array<TU.RoArr<Tile<S>>> = [];\r\n            for (let row = 0; row < this.dimensions.height; row++) {\r\n                const newRow: Array<Tile<S>> = [];\r\n                for (let col = 0; col < this.dimensions.width; col++) {\r\n                    const newTile = new desc.tileClass(new Coord({ x: col, y: row, }));\r\n                    newRow.push(newTile);\r\n                }\r\n                grid.push(newRow);\r\n            }\r\n            this.grid = grid;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public forEachTile(consumer: (tile: Tile<S>) => void, thisArg: object = this): void {\r\n            this.grid.forEach((row) => row.forEach((tile) => {\r\n                consumer(tile);\r\n            }, thisArg), thisArg);\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public getUntToward(sourceCoord: Coord, intendedDest: Coord.Bare): Tile<S> {\r\n            const options = this.tile.destsFrom(sourceCoord).unoccupied.get;\r\n            if (!(options.some((tile) => tile.coord.equals(sourceCoord)))) {\r\n                // This should never happen. It is here as a reminder.\r\n                throw new Error(\"Caller code didn't break the upward occupancy link.\");\r\n            }\r\n            if (options.length === 1) {\r\n                // Minor optimization:\r\n                return options[0];\r\n            }\r\n            options.sort((tileA, TileB) => {\r\n                // Break (some) ties by one-norm:\r\n                return tileA.coord.oneNorm(intendedDest) - TileB.coord.oneNorm(intendedDest);\r\n            }).sort((tileA, TileB) => {\r\n                // Break (some) ties by one-norm:\r\n                return tileA.coord.infNorm(intendedDest) - TileB.coord.infNorm(intendedDest);\r\n            });\r\n            // Filter out options that are not equally favourable as the\r\n            // most favourable option. I think this is the best method:\r\n            // Note: it is safe to start at index `1` because of the\r\n            // above short-circuit if `options.length === 1`.\r\n            for (let i = 1; i < options.length; i++) {\r\n                if (options[i].coord.infNorm(intendedDest) > options[0].coord.infNorm(intendedDest)) {\r\n                    options.splice(i);\r\n                    break;\r\n                }\r\n            }\r\n            if (options.length === 1) {\r\n                // Minor optimization:\r\n                return options[0];\r\n            }\r\n            // Choose one of the most favourable using some randomness\r\n            // weighted to follow a straight-looking path of movement.\r\n            if (options[0].coord.x - sourceCoord.x === 0 || options[0].coord.y - sourceCoord.y === 0) {\r\n                // (the axial option (if it exists) should be the first\r\n                // due to the previous sort's tie-breaker.\r\n                if (sourceCoord.axialAlignment(sourceCoord.sub(intendedDest)) - 0.5 > 0.0) {\r\n                    // The path to the intended destination is aligned more\r\n                    // with the x or y axis than they are with those axes\r\n                    // rotated 45 degrees.\r\n                    return options[0];\r\n                } else {\r\n                    // Ignore the axial option in further computations:\r\n                    options.shift();\r\n                }\r\n            }\r\n            // Choose a random non-axial option:\r\n            return options[Math.floor(options.length * Math.random())];\r\n        }\r\n\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileAt(coord: Coord.Bare): Tile<S> {\r\n            if (coord.x < 0 || coord.x >= this.dimensions.width ||\r\n                coord.y < 0 || coord.y >= this.dimensions.height\r\n            ) {\r\n                throw new RangeError(\"Out of bounds. No such tile exists.\");\r\n            }\r\n            return this.grid[coord.y][coord.x];\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileDestsFrom(coord: Coord.Bare, radius: number = 1): Array<Tile<S>> {\r\n            let t = coord.y - radius;\r\n            let b = coord.y + radius + 1;\r\n            let l = coord.x - radius;\r\n            let r = coord.x + radius + 1;\r\n            if (t >= this.dimensions.height || b < 0\r\n             || l >= this.dimensions.width  || r < 0) return [];\r\n            return this.grid.slice(\r\n                // filter for included rows:\r\n                Math.max(0, t),\r\n                Math.min(this.dimensions.height, b),\r\n            ).flatMap((gridRow) => gridRow.slice(\r\n                // filter for included slices of rows (columns):\r\n                Math.max(0, l),\r\n                Math.min(this.dimensions.width, r),\r\n            ));\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public __getTileSourcesTo(coord: Coord.Bare, radius: number = 1): Array<Tile<S>> {\r\n            // Same behaviour as getting destinations from `coord`.\r\n            return this.__getTileDestsFrom(coord, radius);\r\n        }\r\n\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getSpawnCoords(\r\n            playerCounts: number,\r\n            dimensions: Grid.Dimensions,\r\n        ):  ReadonlyArray<Coord.Bare> {\r\n            return [{x:0,y:0,},];\r\n\r\n            // TODO.impl A proper, nice looking version of this.\r\n            //\r\n            //\r\n            //\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getArea(dim: Grid.Dimensions): number {\r\n            return dim.height * dim.width;\r\n        }\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        public static getRandomCoord(dimensions: Grid.Dimensions): Coord {\r\n            return new Coord(undefined!);\r\n        }\r\n    }\r\n\r\n    export namespace Grid {\r\n        /**\r\n         * If `width` is not specified, `height` is taken as its default value.\r\n         */\r\n        export type Dimensions = {\r\n            height: number,\r\n            width:  number,\r\n        };\r\n\r\n        export class Visible extends Grid implements VisibleGrid<S> {\r\n            public readonly hostElem: HTMLElement;\r\n\r\n            /**\r\n             * @override\r\n             */\r\n            declare protected readonly grid: TU.RoArr<TU.RoArr<VisibleTile<S>>>;\r\n\r\n            public constructor(desc: AbstractGrid.CtorArgs<S>) {\r\n                super(desc);\r\n                const gridElem = document.createElement(\"div\");\r\n                gridElem.style.setProperty(\"--euclid2-grid-width\",  this.dimensions.width.toString());\r\n                //gridElem.style.setProperty(\"--euclid2-grid-height\", this.dimensions.height.toString());\r\n                for (const row of this.grid) {\r\n                    for (const tile of row) {\r\n                        gridElem.appendChild(tile.tileElem);\r\n                    }\r\n                }\r\n                this.__VisibleGrid_super(desc, gridElem);\r\n            }\r\n        }\r\n    }\r\n    Object.freeze(Grid);\r\n    Object.freeze(Grid.prototype);\r\n\r\n}\r\nObject.freeze(Euclid2);\r\n","import { Coord } from \"floor/Coord\";\r\nimport { Grid } from \"floor/Grid\";\r\nimport { VisibleGrid } from \"floor/VisibleGrid\";\r\n\r\nimport { Euclid2 } from \"floor/impl/Euclid2\";\r\nimport { Beehive } from \"floor/impl/Beehive\";\r\n\r\nimport { ArtificialPlayer } from \"game/player/ArtificialPlayer\";\r\nimport { Chaser } from \"game/player/artificials/Chaser\";\r\n\r\n\r\n/**\r\n * This function should be imported and run for each index.js file\r\n * for the TypeScript-Projects \"offline\", \"client\", and \"server\".\r\n *\r\n * This file serves the dual purpose of initializing implementation\r\n * registries _after_ implementations and their class hierarchy have\r\n * been defined, and of importing implementations so they don't get\r\n * tree-shaken-out by webpack.\r\n */\r\nexport function PostInit(): void {\r\n\r\n    // Non-Visible Grid Implementation Registry:\r\n    (<TU.NoRo<typeof Grid.__Constructors>>Grid.__Constructors)\r\n    = Object.freeze({\r\n        [ Coord.System.EUCLID2 ]: Euclid2.Grid,\r\n        [ Coord.System.BEEHIVE ]: Beehive.Grid,\r\n    });\r\n    Object.freeze(Grid);\r\n    Object.freeze(Grid.prototype);\r\n\r\n    // Visible Grid Implementation Registry:\r\n    (<TU.NoRo<typeof VisibleGrid.__Constructors>>VisibleGrid.__Constructors)\r\n    = Object.freeze({\r\n        [ Coord.System.EUCLID2 ]: Euclid2.Grid.Visible,\r\n        [ Coord.System.BEEHIVE ]: Beehive.Grid.Visible,\r\n    });\r\n    Object.freeze(VisibleGrid);\r\n    // This is just an interface. There is no instance prototype to freeze.\r\n\r\n    (<TU.NoRo<typeof ArtificialPlayer.__Constructors>>ArtificialPlayer.__Constructors)\r\n    = Object.freeze({\r\n        CHASER: Chaser,\r\n    });\r\n    Object.freeze(ArtificialPlayer);\r\n    Object.freeze(ArtificialPlayer.prototype);\r\n}\r\nObject.freeze(PostInit);","import { Lang } from \"lang/Lang\";\r\nimport { BalancingScheme } from \"lang/LangSeqTreeNode\";\r\nimport { Game } from \"game/Game\";\r\n\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { Player } from \"../player/Player\";\r\n\r\nimport { PlayerGeneratedRequest } from \"../events/EventRecordEntry\";\r\nimport { PlayerActionEvent, TileModificationEvent } from \"../events/PlayerActionEvent\";\r\n\r\nimport { English } from \"lang/impl/English\"; // NOTE: temporary placeholder.\r\nimport { GameEvents } from \"game/__gameparts/Events\";\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport abstract class GameManager<G extends Game.Type, S extends Coord.System> extends GameEvents<G,S> {\r\n\r\n    public readonly averageFreeHealth: Player.Health;\r\n    protected currentFreeHealth: Player.Health; // TODO.impl maintain this field. and use it to spawn in health.\r\n\r\n    public readonly lang: Lang;\r\n\r\n    /**\r\n     * NOTE: Shuffling operations and the\r\n     * {@link Lang} implementation are able to support mid-game changes\r\n     * to the balancing behaviour. Making it fixed for the lifetime of\r\n     * a `Game` is a choice I made in order to make the user experience\r\n     * more simple. It's one less thing they'll see in the in-game UI,\r\n     * and I don't think they'd feel as if it were missing.\r\n     */\r\n    protected readonly langBalancingScheme: BalancingScheme;\r\n\r\n    /**\r\n     * _Does not call reset._\r\n     *\r\n     * Performs the \"no invincible player\" check (See {@link Player#teamSet}).\r\n     *\r\n     * @param gameType -\r\n     * @param impl -\r\n     * @param desc -\r\n     */\r\n    public constructor(\r\n        gameType: G,\r\n        impl: Game.ImplArgs<S>,\r\n        desc: Game.CtorArgs<G,S>,\r\n    ) {\r\n        super(gameType, impl, desc);\r\n        this.averageFreeHealth = desc.averageFreeHealthPerTile * this.grid.area;\r\n\r\n        // TODO.design How to get a Language implementation by name?\r\n        // Below is a placeholder waiting for the above todo item to be sorted out.\r\n        this.lang = English.Lowercase.getInstance();\r\n\r\n        // TODO.impl Enforce this in the UI code by greying out unusable combos of lang and coord-sys.\r\n        const minLangLeaves = this.grid.static.getAmbiguityThreshold();\r\n        if (this.lang.numLeaves < minLangLeaves) {\r\n            throw new Error(`Found ${this.lang.numLeaves} leaves, but at`\r\n            + ` least ${minLangLeaves} were required. The provided mappings`\r\n            + ` composing the current Lang-under-construction are not`\r\n            + ` sufficient to ensure that a shuffling operation will always`\r\n            + ` be able to find a safe candidate to use as a replacement.`\r\n            + ` Please see the spec for Lang.getNonConflictingChar.`\r\n            );\r\n        }\r\n        this.langBalancingScheme = desc.langBalancingScheme;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public reset(): void {\r\n        // Reset the grid and event record:\r\n        super.reset();\r\n\r\n        this.currentFreeHealth = 0.0;\r\n\r\n        // Reset hit-counters in the current language:\r\n        // This must be done before shuffling so that the previous\r\n        // history of shuffle-ins has no effects on the new pairs.\r\n        this.lang.reset();\r\n        // Shuffle everything:\r\n        this.grid.forEachTile((tile) => {\r\n            tile.setLangCharSeqPair(this.dryRunShuffleLangCharSeqAt(tile));\r\n        });\r\n\r\n        // Reset and spawn players:\r\n        this.teams.forEach((team) => team.reset());\r\n        const spawnPoints = this.grid.static.getSpawnCoords(\r\n            this.players.length,\r\n            this.grid.dimensions,\r\n        );\r\n        this.players.forEach((player) => {\r\n            player.reset(this.grid.tile.at(spawnPoints[player.playerId]));\r\n        });\r\n\r\n        // TODO.impl Targets should be spawned _after_ players have\r\n        // spawned so they do not spawn in the same tile as any players.\r\n    }\r\n\r\n\r\n    /**\r\n     * **Important:** Nullifies the existing values at `tile` and does\r\n     * not consume the returned values, which must be done externally.\r\n     *\r\n     * @param targetTile\r\n     * The {@link Tile} to shuffle their {@link Lang.CharSeqPair}\r\n     * pair for.\r\n     *\r\n     * @returns\r\n     * A {@link Lang.CharSeqPair} that can be used as a replacement\r\n     * for that currently being used by `tile`.\r\n     */\r\n    public dryRunShuffleLangCharSeqAt(targetTile: Tile<S>): Lang.CharSeqPair {\r\n        // First, clear values for the target tile so its current\r\n        // (to-be-previous) values don't get unnecessarily avoided.\r\n        targetTile.setLangCharSeqPair(Lang.CharSeqPair.NULL);\r\n\r\n        const avoid: TU.RoArr<Tile<S>> = Array.from(new Set(\r\n            this.grid.tile.sourcesTo(targetTile.coord).get\r\n            .flatMap((sourceToTarget) => this.grid.tile.destsFrom(sourceToTarget.coord).get)\r\n        ));\r\n        return this.lang.getNonConflictingChar(avoid\r\n                .map((tile) => tile.langSeq)\r\n                .filter((seq) => seq), // no falsy values.\r\n            this.langBalancingScheme,\r\n        );\r\n    }\r\n\r\n    // TODO.design what arguments must this take?\r\n    // then we need to implement it.\r\n    public dryRunSpawnFreeHealth(): ReadonlyArray<TileModificationEvent<S>> {\r\n        return [];\r\n        // NOTE to self: make sure to update this.currentFreeHealth.\r\n    }\r\n\r\n\r\n    /**\r\n     * Perform checks on an incoming event request for some action that\r\n     * a player can perform while the game is playing (ie. not paused\r\n     * or over).\r\n     *\r\n     * @param desc -\r\n     * @returns\r\n     * The player specified by the given ID, or undefined if the\r\n     * game is not playing, in which case the event request should\r\n     * be rejected.\r\n     *\r\n     * @throws\r\n     * `RangeError` if the request was made before receiving an\r\n     * acknowledgement for the previous request, or if the given ID\r\n     * does not belong to any existing player.\r\n     */\r\n    private managerCheckGamePlayingRequest(desc: PlayerGeneratedRequest): Player<S> | undefined {\r\n        if (this.status !== Game.Status.PLAYING) {\r\n            return undefined;\r\n        }\r\n        const player = this.players[desc.playerId];\r\n        if (!player) {\r\n            throw new Error(\"No such player exists.\");\r\n        }\r\n        if (desc.playerLastAcceptedRequestId !== player.lastAcceptedRequestId) {\r\n            throw new RangeError((desc.playerLastAcceptedRequestId < player.lastAcceptedRequestId)\r\n            ? (\"Clients should not make requests until they have\"\r\n                + \" received my response to their last request.\")\r\n            : (\"Client seems to have incremented the request ID\"\r\n                + \" counter on their own, which is is illegal.\")\r\n            );\r\n        }\r\n        return player;\r\n    }\r\n\r\n\r\n    /**\r\n     * @see PlayerMovementEvent\r\n     *\r\n     * Reject the request if `dest` is occupied, or if the specified\r\n     * player does not exist, or the client is missing updates for the\r\n     * destination they requested to move to, or the player is bubbling.\r\n     *\r\n     * @param desc\r\n     * A descriptor of the request describing the requester's views\r\n     * of critical parts of the game-state from their copy of the game\r\n     * state at the time of the request. Is modified to describe changes\r\n     * to be made.\r\n     */\r\n    public processMoveRequest(desc: PlayerActionEvent.Movement<S>): void {\r\n        const player = this.managerCheckGamePlayingRequest(desc);\r\n        if (!player) {\r\n            // Reject the request:\r\n            this.processMoveExecute(desc);\r\n            return;\r\n        }\r\n        const dest = this.grid.tile.at(desc.dest.coord);\r\n        if (dest.isOccupied ||\r\n            dest.lastKnownUpdateId !== desc.dest.lastKnownUpdateId) {\r\n            // The occupancy counter check is not essential, but it helps\r\n            // enforce stronger client-experience consistency: they cannot\r\n            // move somewhere where they have not realized the `LangSeq` has\r\n            // changed.\r\n            this.processMoveExecute(desc); // Reject the request.\r\n            return;\r\n        }\r\n\r\n        // Set response fields according to spec in `PlayerMovementEvent`:\r\n        desc.playerLastAcceptedRequestId = (1 + player.lastAcceptedRequestId);\r\n        desc.newPlayerHealth = {\r\n            score:  player.status.score  + dest.freeHealth,\r\n            health: player.status.health + dest.freeHealth,\r\n        };\r\n        desc.dest.lastKnownUpdateId = (1 + dest.lastKnownUpdateId);\r\n        this.currentFreeHealth -= dest.freeHealth;\r\n        desc.dest.newFreeHealth = 0;\r\n        desc.dest.newCharSeqPair = this.dryRunShuffleLangCharSeqAt(dest);\r\n        // TODO.impl spawn in some new raw health to the floor:\r\n        desc.tilesWithHealthUpdates = this.dryRunSpawnFreeHealth();\r\n\r\n        // Accept the request, and trigger calculation\r\n        // and enactment of the requested changes:\r\n        desc.eventId = this.getNextUnusedEventId();\r\n        this.processMoveExecute(desc);\r\n    }\r\n\r\n\r\n    /**\r\n     * @see PlayerActionEvent.Bubble\r\n     * @param desc - Is modified to describe changes to be made.\r\n     */\r\n    public processBubbleRequest(desc: PlayerActionEvent.Bubble): void {\r\n        // TODO.impl\r\n        // - If successful, make sure to lower the health field.\r\n        // - Make an abstract method in the OperatorPlayer class called in\r\n        //   the top-level input processor for it to trigger this event.\r\n        const bubbler = this.managerCheckGamePlayingRequest(desc);\r\n        if (!bubbler) {\r\n            // Reject the request:\r\n            this.processBubbleExecute(desc);\r\n            return;\r\n        }\r\n        desc.playerLastAcceptedRequestId = (1 + bubbler.lastAcceptedRequestId);\r\n\r\n        // We are all go! Do it.\r\n        desc.eventId = this.getNextUnusedEventId();\r\n        this.processBubbleExecute(desc);\r\n    }\r\n\r\n}\r\nObject.freeze(GameManager);\r\nObject.freeze(GameManager.prototype);\r\n","import { Game } from \"game/Game\";\r\nimport type { Coord, Tile } from \"floor/Tile\";\r\nimport type { GameManager } from \"game/__gameparts/Manager\";\r\n\r\nimport { Player } from \"./Player\";\r\n\r\n\r\n/**\r\n * Unlike {@link HumanPlayer}s, these are not guided by human input.\r\n * Instead, they are essentially defined by how often they move, and\r\n * where they decide to move toward each time they move.\r\n *\r\n * Can be paused and un-paused by the Game Manager.\r\n *\r\n * @extends Player\r\n */\r\nexport abstract class ArtificialPlayer<S extends Coord.System> extends Player<S> {\r\n\r\n    declare public readonly game: GameManager<any,S>;\r\n\r\n    private scheduledMovementCallbackId: number | NodeJS.Timeout;\r\n\r\n    /**\r\n     * See {@link ArtificialPlayer.of} for the public constructor\r\n     * interface.\r\n     *\r\n     * @param game -\r\n     * @param desc -\r\n     */\r\n    protected constructor(game: GameManager<any,S>, desc: Player.CtorArgs) {\r\n        super(game, desc);\r\n        if (game.gameType === Game.Type.CLIENT) {\r\n            throw new TypeError(\"ClientGames should be using regular Players instead.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a {@link Pos} representing an absolute coordinate (ie.\r\n     * one that is relative to the {@link Game}'s origin position')\r\n     * that this `ArtificialPlayer` intends to move toward in its next\r\n     * movement request. Pos may contain non-integer coordinate values,\r\n     * and it does not have to be inside the bounds of the {@link Grid}.\r\n     */\r\n    protected abstract computeDesiredDestination(): Coord<S>;\r\n\r\n    /**\r\n     * Units are in milliseconds.\r\n     */\r\n    protected abstract computeNextMovementTimer(): number;\r\n\r\n    public __abstractNotifyThatGameStatusBecamePlaying(): void {\r\n        this.movementContinueWithInitialDelay();\r\n    }\r\n    public __abstractNotifyThatGameStatusBecamePaused(): void {\r\n        this.game.cancelTimeout(this.scheduledMovementCallbackId);\r\n        this.scheduledMovementCallbackId = undefined!;\r\n    }\r\n    public __abstractNotifyThatGameStatusBecameOver(): void {\r\n        this.game.cancelTimeout(this.scheduledMovementCallbackId);\r\n        this.scheduledMovementCallbackId = undefined!;\r\n    }\r\n\r\n    private movementContinue(): void {\r\n        this.makeMovementRequest(this.game.grid.getUntToward(\r\n            this.coord, this.computeDesiredDestination()\r\n        ));\r\n        this.movementContinueWithInitialDelay();\r\n    }\r\n\r\n    private movementContinueWithInitialDelay(): void {\r\n        // Schedule the next movement.\r\n        this.scheduledMovementCallbackId = this.game.setTimeout(\r\n            this.movementContinue,\r\n            this.computeNextMovementTimer(),\r\n            // * Callback function arguments go here.\r\n        );\r\n        return;\r\n    }\r\n}\r\n\r\n\r\nexport namespace ArtificialPlayer {\r\n\r\n    export declare const __Constructors: Readonly<Record<\r\n        Exclude<Player.Family, typeof Player.Family.HUMAN>,\r\n        typeof ArtificialPlayer\r\n    >>;\r\n\r\n    export const of = <S extends Coord.System>(\r\n        game: Readonly<GameManager<any,S>>,\r\n        playerDesc: Readonly<Player.CtorArgs>,\r\n    ): ArtificialPlayer<S> => {\r\n        return new (__Constructors[playerDesc.familyId])(game, playerDesc);\r\n    };\r\n}\r\n// ArtificialPlayer gets frozen in PostInit after __Constructors get initialized.\r\n","import type { Coord } from \"floor/Coord\";\r\nimport type { GameManager } from \"game/__gameparts/Manager\";\r\n\r\nimport { Player } from \"game/player/Player\";\r\nimport { ArtificialPlayer } from \"../ArtificialPlayer\";\r\n\r\n\r\n/**\r\n *\r\n * @extends ArtificialPlayer\r\n */\r\n// TODO.impl\r\nexport class Chaser<S extends Coord.System> extends ArtificialPlayer<S> {\r\n\r\n    protected constructor(game: GameManager<any,S>, desc: Player.CtorArgs) {\r\n        super(game, desc);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected computeDesiredDestination(): Coord<S> {\r\n        //const humans = this.game.__players.HUMAN;\r\n        return undefined!;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected computeNextMovementTimer(): number {\r\n        return undefined!;\r\n    }\r\n}\r\nObject.freeze(Chaser);\r\nObject.freeze(Chaser.prototype);\r\n","import { Lang } from \"lang/Lang\";\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport namespace English {\r\n\r\n    /**\r\n     * # Lowercase (QWERTY)\r\n     *\r\n     * https://wikipedia.org/wiki/Keyboard_layout#QWERTY\r\n     */\r\n    export class Lowercase extends Lang {\r\n\r\n        private static SINGLETON?: Lowercase = undefined;\r\n\r\n        public static getName(): Lang.Names.Value {\r\n            return Lang.Names.ENGLISH__LOWERCASE;\r\n        }\r\n\r\n        public static getBlurb(): string {\r\n            return \"\"; // TODO.doc\r\n        }\r\n\r\n        public static getInstance(): Lowercase {\r\n            if (!this.SINGLETON) {\r\n                this.SINGLETON  = new Lowercase();\r\n            }\r\n            return this.SINGLETON;\r\n        }\r\n\r\n        // TODO.learn see https://wikipedia.org/wiki/Keyboard_layout#Dvorak\r\n        // and https://wikipedia.org/wiki/Keyboard_layout#Colemak\r\n\r\n        private constructor() { super(\r\n            Lowercase,\r\n            Object.entries(LETTER_FREQUENCY).reduce<Lang.CharSeqPair.WeightedForwardMap>(\r\n                (accumulator, current) => {\r\n                    const char: Lang.Char = current[0];\r\n                    const seq:  Lang.Seq  = current[0];\r\n                    const weight: number  = current[1];\r\n                    accumulator[char] = { seq, weight, };\r\n                    return accumulator;\r\n                },\r\n                {},\r\n            ),\r\n        ); }\r\n    }\r\n    Lowercase as Lang.ClassIf;\r\n    Object.seal(Lowercase);\r\n    Object.freeze(Lowercase.prototype);\r\n\r\n\r\n    /**\r\n     * # Mixed-Case (QWERTY)\r\n     *\r\n     * https://wikipedia.org/wiki/Keyboard_layout#QWERTY\r\n     */\r\n    export class MixedCase extends Lang {\r\n\r\n        private static SINGLETON?: MixedCase = undefined;\r\n\r\n        public static getName(): Lang.Names.Value {\r\n            return Lang.Names.ENGLISH__MIXEDCASE;\r\n        }\r\n\r\n        public static getBlurb(): string {\r\n            return \"\"; // TODO.doc\r\n        }\r\n\r\n        public static getInstance(): MixedCase {\r\n            if (!this.SINGLETON) {\r\n                this.SINGLETON  = new MixedCase();\r\n            }\r\n            return this.SINGLETON;\r\n        }\r\n\r\n        private constructor() {\r\n            let initializer: Lang.CharSeqPair.WeightedForwardMap = {};\r\n            const addMappings = (charSeqTransform: (charOrSeq: string) => string): void => {\r\n                initializer = Object.entries(LETTER_FREQUENCY).reduce(\r\n                    (accumulator, current) => {\r\n                        const char: Lang.Char = charSeqTransform(current[0]);\r\n                        const seq:  Lang.Seq  = charSeqTransform(current[0]);\r\n                        const weight: number  = current[1];\r\n                        accumulator[char] = { seq, weight, };\r\n                        return accumulator;\r\n                    },\r\n                    initializer,\r\n                );\r\n            };\r\n            addMappings((cs) => cs.toLowerCase());\r\n            addMappings((cs) => cs.toUpperCase());\r\n            super(\r\n                MixedCase,\r\n                initializer,\r\n            );\r\n        }\r\n    }\r\n    MixedCase as Lang.ClassIf;\r\n    Object.seal(MixedCase);\r\n    Object.freeze(MixedCase.prototype);\r\n\r\n\r\n    /**\r\n     * Values obtained from https://wikipedia.org/wiki/Letter_frequency\r\n     */\r\n    const LETTER_FREQUENCY = Object.freeze(<const>{\r\n        a: 8.167, b: 1.492, c: 2.202, d: 4.253,\r\n        e:12.702, f: 2.228, g: 2.015, h: 6.094,\r\n        i: 6.966, j: 0.153, k: 1.292, l: 4.025,\r\n        m: 2.406, n: 6.749, o: 7.507, p: 1.929,\r\n        q: 0.095, r: 5.987, s: 6.327, t: 9.356,\r\n        u: 2.758, v: 0.978, w: 2.560, x: 0.150,\r\n        y: 1.994, z: 0.077,\r\n    });\r\n\r\n}\r\nObject.seal(English);\r\n","import { Game } from \"game/Game\";\r\n\r\nimport { LocalGameSettings }    from \"../browser/GameSettings\";\r\nimport type { Coord }           from \"floor/Tile\";\r\nimport { VisibleTile }          from \"floor/VisibleTile\";\r\nimport { VisibleGrid }          from \"floor/VisibleGrid\";\r\n\r\nimport type { Player }          from \"game/player/Player\";\r\nimport { OperatorPlayer }       from \"game/player/OperatorPlayer\";\r\nimport { VisiblePlayerStatus }  from \"game/player/VisiblePlayerStatus\";\r\nimport { ArtificialPlayer }     from \"game/player/ArtificialPlayer\";\r\n\r\nimport { GameManager } from \"game/__gameparts/Manager\";\r\n\r\n\r\ntype G = Game.Type.OFFLINE;\r\n\r\n/**\r\n *\r\n *\r\n * @extends Game\r\n */\r\nexport class OfflineGame<S extends Coord.System> extends GameManager<G,S> {\r\n\r\n    protected settings: LocalGameSettings;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected __getGridImplementation(coordSys: S): VisibleGrid.ClassIf<S> {\r\n        return VisibleGrid.getImplementation(coordSys);\r\n    }\r\n\r\n\r\n    /**\r\n     * _Calls reset recursively for this entire composition._\r\n     *\r\n     * @param gameDesc -\r\n     */\r\n    public constructor(gameDesc: Game.CtorArgs<G,S>) {\r\n        super(\r\n            Game.Type.OFFLINE, {\r\n            tileClass: VisibleTile,\r\n            playerStatusCtor: VisiblePlayerStatus,\r\n            }, gameDesc,\r\n        );\r\n        if (!this.operator) {\r\n            throw new Error(\"The Operator for an OfflineGame should be defined.\");\r\n        }\r\n        VisiblePlayerStatus.colourizeTeamMembers(this.teams, this.operator);\r\n        this.settings = LocalGameSettings.getInstance();\r\n\r\n        // =====================================\r\n        // CALL TO RESET\r\n        this.reset();\r\n        // =====================================\r\n\r\n        /* TODO.test This should be safe in a garbage-collection and\r\n        event-handler sense: Since the event handler is added to the\r\n        event-handler-list of the `.game-grid`-classed element as an\r\n        anonymous function, which makes it impossible to remove from\r\n        the list without a reference to that function. Luckily for us,\r\n        Grid.__VisibleGrid_super will automatically remove old grid-\r\n        host elements, thus allowing them to be garbage collected, and\r\n        the event-handler function with it. */\r\n        this.grid.hostElem.addEventListener(\"keydown\", (ev): boolean => {\r\n            // console.log(`key: ${ev.key}, code: ${ev.code},`\r\n            // + ` keyCode: ${ev.keyCode}, char: ${ev.char},`\r\n            // + ` charCode: ${ev.charCode}`);\r\n            this.operator.processKeyboardInput(ev);\r\n            // Disable scroll-down via spacebar:\r\n            if (ev.keyCode === 32) {\r\n                ev.preventDefault();\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected __createOperatorPlayer(desc: Player.CtorArgs): OperatorPlayer<S> {\r\n        return new OperatorPlayer<S>(this, desc);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected __createArtifPlayer(desc: Player.CtorArgs): ArtificialPlayer<S> {\r\n        return ArtificialPlayer.of(this, desc);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public setTimeout(callback: TimerHandler, millis: number, ...args: any[]): number {\r\n        return setTimeout(callback, millis, args);\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    public cancelTimeout(handle: number): void {\r\n        clearTimeout(handle);\r\n    }\r\n}\r\nObject.freeze(OfflineGame);\r\nObject.freeze(OfflineGame.prototype);\r\n","import { WebHooks }         from \"../browser/WebHooks\";\r\nimport { Coord }            from \"floor/Tile\";\r\nimport { BalancingScheme }  from \"lang/LangSeqTreeNode\";\r\nimport { OfflineGame }      from \"./OfflineGame\";\r\nimport { PostInit }         from \"game/PostInit\";\r\n\r\nPostInit();\r\n\r\n// TODO.design override ctor args for each impl, and make it so they adapt input to pass to super ctor.\r\n// TODO.build this has been set to `var` for testing purposes. It should be `const` in production.\r\nexport const game = new OfflineGame<Coord.System.EUCLID2>({\r\n    coordSys: Coord.System.EUCLID2,\r\n    gridDimensions: {\r\n        height: 21,\r\n        width:  21,\r\n    },\r\n    gridHtmlIdHook: WebHooks.Grid.Id.GRID,\r\n    averageFreeHealthPerTile: 1.0 / 70.0,\r\n    langBalancingScheme: BalancingScheme.WEIGHT,\r\n    languageName: \"engl-low\",\r\n    operatorIndex: 0,\r\n    playerDescs: [\r\n        {\r\n            familyId: \"HUMAN\",\r\n            teamId: 0,\r\n            username: \"hello world\",\r\n            socketId: \"todo\", // TODO.impl maybe make some static method to assign unique values based on operator class?\r\n            noCheckGameOver: false,\r\n        },\r\n    ],\r\n});\r\ngame.reset();\r\n\r\n// Print some things:\r\nconsole.log(game);\r\nconsole.log(game.lang.simpleView());\r\n\r\ngame.statusBecomePlaying();\r\n\r\n// window.onerror = (msg, url, lineNum) => {\r\n//     alert(`Error message: ${msg}\\nURL: ${url}\\nLine Number: ${lineNum}`);\r\n//     return true;\r\n// }\r\n"],"sourceRoot":""}
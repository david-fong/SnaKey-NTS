@import "./general.css";

.fill-parent {
	position: absolute;
	top: 0; right: 0; bottom: 0; left: 0;
	overflow: hidden hidden;
}

.center-contents {
	display: grid;
	place-content: center;
	place-items: center;
}
.stack-contents {
	position:   relative;
}
.stack-contents > * {
	position:   absolute;
}


/* Does not imposes effects on external sizing
calculations except by setting its own items'
margins and padding, and its own padding. */
.input-group {
	background-color: var(--colour-mainBg);
	padding: var(--spacing);
	border-radius: calc(
		var(--border-radius) + (2.0 * var(--spacing))
	);
}
.input-group > * {
	contain: strict;
	position: relative;
}
.input-group input.input-group-item {
	padding: 0px;
}
.input-group input.input-group-item:invalid {
	border-style:   dotted;
}
.input-group .input-group-item {
	border-radius:  var(--border-radius);
	margin:         var(--spacing);
	border:   0px solid var(--colour-tileBg);
	color:              var(--colour-tileFg);
	background-color:   var(--colour-tileBg);
	transition: all 0.15s ease-in;
}
/* Note: The javascript focuses these on pointer entry. */
.input-group .input-group-item:focus {
	outline: none;
	border-color: var(--colour-tileBd);
	animation: 0.4s ease-in-out -0.5s infinite alternate input-group-item-focus;
}
.input-group:focus-within .input-group-item:not(:focus) {
	filter: brightness(0.9);
	opacity: 0.6;
}
@keyframes input-group-item-focus {
	from {
		margin: calc(var(--spacing) / 3.0);
		border-width: calc(1.2 * var(--spacing));
	}
	to {
		margin: calc(var(--spacing) * 2.0 / 3.0);
		border-width: calc(1.4 * var(--spacing));
	}
}


declare namespace TU {
    /**
     * ### Snakey alias for Readonly<T>
     */
    type RoArr<T> = ReadonlyArray<T>;

    /**
     * ### Snakey No-Readonly<T>
     */
    type NoRo<T extends object> = {
        -readonly [ K in keyof T ]: T[K];
    };

    // Same as ts3.5, but errs if K is not a key of T.
    type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

    // not used/needed yet.
    //type Modify<T, R extends Partial<Record<keyof T, any>>> = Omit<T, keyof R> & R;

    // not used/needed yet.
    //type Require<T, K extends keyof T> = T & Pick<Required<T>, K>;
}
